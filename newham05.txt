====================
入門 bash 読書ノート
====================
何のヒネリもなく ``bash`` を Cygwin の常用シェルとして利用する人間によるノート。
第 3 版のノートとする。

訳文が妙に面白く、個人的には読み物としても大変気に入っている一冊だ。

:著者: Cameron Newham, Bill Rosenblatt
:訳者: 株式会社クイープ
:出版社: オライリー・ジャパン
:ISBN: 4-87311-254-0

.. contents:: Table of Contents

まえがき
========
* ``echo $BASH_VERSION`` で使用している ``bash`` のバージョンを確認できる。 (p. v)

  * 今手許の環境を調べたら ``3.2.48(21)-release`` と出た。

* 本書の想定読者は「初心者」の次の段階に位置する一般的な UNIX/Linux ユーザー。(p. vi)
* 本書の狙いは、実用的なシェルプログラムを作成するためにコンピュータの学位を取得する必要はないことを示すことにある。 (p. vii)
* RUBOUT: rub out を辞書で調べると、「すり消す」とある。
* <本書では、UNIX を「UNIX と Linux」の略語と捉えている。> (p. x)

1 章 bash の基礎
================
1.3 UNIX シェルの歴史
---------------------
* 歴史的な説明から。

  * Bourne シェル (``sh``) 

    * 作成者 Steven Bourne
    * 1979 年に登場した最初の普及版 UNIX である Version 7 に搭載されていた

  * C シェル (``csh``) 

    * 作者はカリフォルニア州立大学バークレー校の Bill Joy
    * Berkley Software Disribution UNIX (BSD UNIX) の一部として書かれた

  * Korn シェル (``ksh``)

    * ``sh`` と ``csh`` の優れた機能プラス多数の独自機能から構成
    * 商用製品

1.3.1 bash
~~~~~~~~~~
* ``bash`` の名前は Bourne Again Shell から来ている。
  ``sh`` へのリスペクトが込められている。
* GNU プロジェクトのために作成されたシェルなので、無償で配布されている。
* <``bash`` は、GNU システム用の標準のシェルとして、
  公式には 1988 年 1 月 10 日の日曜日に産声をあげた。> (p. 4)

1.3.2 bash の特徴
~~~~~~~~~~~~~~~~~
以下の三点を指摘している。

* コマンドライン編集モード
* ジョブ制御
* 主にシェルをカスタマイズしたりプログラミングしたりするための機能

1.4 bash の入手
---------------
* ``echo $SHELL`` で使用しているシェルを確認できる。

  * 手許の環境で試した結果、 ``/bin/bash`` と出た。

1.6 ファイル
------------
1.6.1 ディレクトリ
~~~~~~~~~~~~~~~~~~
* チルダ展開について。

  * ユーザー名の前に ``~`` を付けると、それはそのユーザーのホームディレクトリの絶対パスとなる。
  * ``~`` はユーザー自身のホームディレクトリを参照する。

1.6.2 ファイル名、ワイルドカード、パス名の展開
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* ワイルドカードとは記号だと思えばよい。
  すべてのファイルの名前がわからなくても、パターンで指定できる機能を利用するときに使う特殊な記号。
* ``?``, ``*``, ``[set]``, ``[!set]``
* セット構造は初めて知った。
* <開きかっこ (``[``) の後に感嘆符 (``!``) を入れると、セットを「否定」することができる> (p. 12)

1.6.3 ブレース展開
~~~~~~~~~~~~~~~~~~
* 後で以下の入力を試してみる。

::

  echo b{ed,olt,ar}s
  echo b{ar{d,n,k},ed}s
  echo {d..h}
  ls *.{c,h,o}

1.7 入力と出力
--------------
1.7.1 標準入出力
~~~~~~~~~~~~~~~~
* 標準入力を利用してのコマンド入力終了を告げるために CTRL+D を押す。

1.7.3 パイプライン
~~~~~~~~~~~~~~~~~~
* <入出力リダイレクトとパイプラインが UNIX のブロック構造原理をどのように支援しているかが理解できたと思う。
  表記は実に簡単で強力である。
  特に重要なのは、パイプの概念によってコマンドの出力をほかのコマンドに渡すための見苦しい一時ファイルが要らなくなったことである。> (p. 18)

1.8 バックグラウンドジョブ
--------------------------
* バックグラウンドジョブの基本は

  1. コマンド ``&``
  2. ``jobs`` でバックグラウンドジョブを確認することができる。

1.9 特殊記号とクォーティング
----------------------------
* \p. 21 表 1-6 に特殊記号がまとまっている。

1.9.1 クォーティング
~~~~~~~~~~~~~~~~~~~~
* 特殊記号をリテラルで使用したいときは、それらを単一引用符で囲むことで OK だ。

1.9.2 バックスラッシュエスケープ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* ``find . -name`` *string* などと入力する場合、
  *string* の部分にはワイルドカードを検索対象ファイル名として指示できるが、
  これを引用符で囲むこと。

1.9.5 コントロールキー
~~~~~~~~~~~~~~~~~~~~~~
* ``stty`` コマンドを使用すると、コントロールキーの設定を確認できる。
  また必要に応じて変更できる。
  ``stty all`` か ``stty -a`` と入力してみること。

* うっかり CTRL+S を押すと画面が止まる。
  もしだしぬけに画面が止まったら、CTRL+Q を試すこと。
  <CTRL+S キーと CTRL+Q キーは基本的に迷惑な存在になっている。> (p. 26)

2 章 コマンドライン編集
=======================
* <``bash`` の編集モードでは、UNIX エディタとして最も有名な ``vi`` と ``emacs`` と同様の編集コマンドを使って、
  コマンドラインを編集することができる。> (p. 29)
* <とにかく編集モードを 1 つは覚えておきたいという場合は、 ``emacs`` モードをお勧めする。
  ``emacs`` モードのほうが、シェルそのものが提供する基本的な編集機能をより自然な形で拡張しているからだ。> (pp. 29-30)

2.3 emacs モード
----------------
* コマンドライン入力を <1 行のウィンドウからなる手軽な ``emacs``> (p. 31) と考えればよい。

2.3.1 基本コマンド
~~~~~~~~~~~~~~~~~~
* ``emacs`` を知らないユーザーにとっては、
  <基本的なキー操作は覚えやすいが、 ``emacs`` 特有の概念をひととおり身につけることが要求される。> (p. 31)

2.3.4 履歴ファイル内での移動
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* ``emacs`` での行単位での上下方向の移動を、コマンド履歴の移動に流用している。
* CTRL+R は ``reverse-i-search`` になる。

  * 目当てのコマンドラインが見つかったら、Enter ではなく CTRL+E を押すのがよさそう。

2.3.5 テキスト補完
~~~~~~~~~~~~~~~~~~
* <``emacs`` モードの最も強力な（そして一般に使用されている）機能の 1 つは、
  **テキスト補完** 機能である。> (p. 35)
* 最も重要なのは TAB である。
* \p. 37 の表 2-5 を見ると、いろいろな補完コマンドがあることがわかるが、
  やっぱり TAB 一丁で何とかなる。

2.3.6 その他のコマンド
~~~~~~~~~~~~~~~~~~~~~~
1. CTRL+L は ``clear`` と同じ。
2. CTRL+V は ``quote-char`` と同じ。
3. ESC+. および ESC+_ が便利で、前のコマンドラインの最後のワードをポイント位置に挿入する。

2.6 履歴の展開
--------------
このセクション、もう少し実用的な具体例が欲しい。

* イベント指示記号
* ワード指示記号
* 修飾子

3 章 環境のカスタマイズ
=======================
TBW

4 章 基本的なシェルプログラミング
=================================
TBW

5 章 フロー制御
===============
TBW

6 章 コマンドラインオプションと型を持つ変数
===========================================
TBW

7 章 入出力とコマンドラインの処理
=================================
TBW

8 章 プロセスの操作
===================
TBW

9 章 シェルプログラミングのデバッグ
===================================
TBW

10 章 bash の管理
=================
TBW

11 章 シェルスクリプティング
============================
TBW

12 章 bash の導入
=================
TBW

付録 A 関連シェル
=================
TBW

付録 B リファレンス
===================
TBW

付録 C 組み込みコマンドのロード
===============================
TBW

付録 D プログラム可能な補完
===========================
TBW

