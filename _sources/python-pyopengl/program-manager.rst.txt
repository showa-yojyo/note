======================================================================
シェーダープログラム管理クラス
======================================================================
GLSL プログラムオブジェクトとシェーダーオブジェクトの生成と破棄の管理方法はワンパターンなので、
この機能をカプセル化した管理クラス ``ProgramManager`` を作成しておき、
アプリケーションクラス ``AppBase`` にオブジェクトを保持させて用いるようにする。

.. contents::

.. warning::

   私の環境でプログラムが適切なグラフィックドライバーを取得できない不具合が発生しており、
   関数 ``glCreateShader`` が None になるせいで本稿のクラスは動作しない。

クラス ``ProgramManager``
======================================================================
次に挙げるようなコードを書いておく。
部分的には PyOpenGL の某モジュールにも同様のコード片がある。

.. literalinclude:: /_sample/pyopengl/program_manager.py
   :language: python3

メンバーデータの説明
======================================================================
``program_id``
  関数 ``glCreateProgram`` の戻り値をここに保持する。
  アプリケーションは、GLSL 構成要素にアクセスするときにはこの値を参照することになる。

``shader_sources``
  これは辞書オブジェクトで、そのキーは関数 ``glCreateShader`` の引数であり、
  値はその戻り値と一緒に関数 ``glShaderSource`` に与える引数（プログラムコード）のペアを想定している。

``shader_ids``
  これも辞書オブジェクトで、そのキーは先程の辞書と同じものであり、
  値は先程の関数 ``glCreateShader`` の戻り値（シェーダープログラム識別子）である。

メソッドの説明
======================================================================
アプリケーションはメソッド ``setup`` と ``cleanup`` をその初期化処理と後始末処理にて呼び出す。

.. include:: /_include/python-refs-vision.txt
