======================================================================
Joel on Software 読書ノート
======================================================================

この手の本も読んでみようと思ったら、なんとも内容が濃い。
ページが下線だらけになってしまった。

:著者: Joel Spolsky
:訳者: 青木靖
:出版社: オーム社
:ISBN: ISBN4-274-06630-4

.. contents:: ノート目次

イントロダクション
======================================================================
* <この本はとても主観的だ。私は簡潔さのため、
  強いて「私の意見では」という言葉を文章の先頭に入れなかった。
  それというのも、読んでいけば分かることなのだが、
  この本の文章の一行一行がすべて私の意見だからだ。> (p. 4)

* <私はこの本を三つのパートに分けた。
  最初のパートは小規模ソフトウェアに関すること。
  人を苦しめないソフトウェアを作るために、
  あなたのチームがすべきことがすべて、そこに書かれている。> (p. 5)
  本書全体についてノートを取るのはキツいので、
  著者の言う「最初のパート」だけ挑戦してみる。

第 1 章
----------------------------------------------------------------------
* 著者は短期開発で GUI プログラムを製作する必要に迫られたならば、
  VB を好んで選択するが、
  <配布ファイルのサイズが大きくなるのは避けられず、
  Windows にロックインされることになる> (p. 9) と考えている。
  前者はそれほど大したことないが、後者がイタイ。
* VB. NET と C# .NET は事実上同じもの。

第 2 章
----------------------------------------------------------------------
* <人々が犯す大きな誤りの中には、（略）
  最も低いレベルの単純な事柄に対する貧弱な理解や破綻した理解が原因で生まれているものがある> (p. 11)
* C 言語でよく使うスタイルの文字列のことを ASCIZ と呼んでいる。
  この章では Pascal 式文字列とASICZ との対比を議論している。
  これを読むと Pascal 式の方が利点が多いようだ。
* <宿題として、なぜ（以下略）> (p. 20) は、
  著者が「最も低いレベルの単純な事柄」を軽視していないことが窺える。

第 3 章
----------------------------------------------------------------------
著名な「ジョエルテスト」に関する記事。これをノートしないわけにはいかない。

1. ソース管理してる？
2. ワンステップでビルドできる？
3. デイリービルドしてる？
4. バグデータベースはある？
5. 新しいコードを書く前にバグを直している？
6. アップデートされているスケジュールがある？
7. 仕様書はある？
8. プログラマは静かな環境で仕事してる？
9. 手に入る最高のツールを使っている？
10. テスタはいる？
11. 採用面接のときにコードを書かせている？
12. ユーザビリティテストはしてる？ (p.23)

* <ジョエルテストの欠点は、原子力発電所向けソフトウェアが安全かどうかのチェックには使えない> (p. 24)
* <Miscrosoft のような会社は常に 12 ポイントで運営されている> (p. 24)
* <他の全ての条件が同じなら、この 12 項目をちゃんとやることで、
  堅実に製品をリリースできる統率の取れたチームができるだろう> (p. 24)

* 項目 2 の要点は、<最新のソースコードのスナップショットからリリース用のビルドを作るのに、
  どれくらいのステップが必要かということ> (p. 25)
  で、もっと突っ込むと、このステップ数が 1 であることを理想とする。

* デイリービルドの目的は、ビルドが壊れているのに気づかないという事態がないようにするため。

* <バグデータベースは複雑なものでもシンプルなものでもいい> (p. 26)
  エクセル一丁だろうが Trac だろうがいいということと解釈して構わないだろう。

* 無限欠陥法 (return 12;) のエピソードは面白い。
* 新コードを書く前にバグを修正することの重要性を、紙幅を裂いて説いている。
  一番の理由は時間が経ってから修正するのは通常困難だということのようだ。

* 言われてみると、放っておくと仕様書を書かない。

* 「ゾーン状態に入る」というのは「精神を集中して作業に没頭する」ことか。
  同僚の割り込みはその気になれば追い返せるが、
  客の電話問い合わせという割り込みがあるとキツイ。

* いいツールを利用するというのは大前提。
  <もしコンパイルに数秒よりも長くかかっているようなら、
  一番新しくて性能のいいコンピュータを買えば時間を節約できる> (p. 32) というセンスが我々には必要。
  トイレットペーパーと HDD の値段比較の話もインパクトがあっていい。

* <テスタの費用をケチるというのは非常に不経済> (p. 32)

* 最後にジョエルテストの使い方を指南して、この章を終えている。

  * <あなたがプログラミングチームのマネージャなら、
    このチェックリストでチームが最大限にうまく機能しているかどうか確かめてほしい> (p. 35)
  * 新しい仕事を受注する場合、ジョエルテストをしてスコアが低かったとする。
    そのときには <あなたにそれを改善する権限が与えられることを確認しよう> (p. 35)

* あとがきで、著者が受け取った世界中の開発者からのレポートを分析している。

  * スコアの分布は 2 と 3 の間に山がある。
  * <ジョエルテストのスコアが病的に低い> (p. 36) と思える会社からのオファーを蹴った開発者多数。

* <Visual なんたらかんたら Enterprise Architect> (p. 36)

第 4 章
----------------------------------------------------------------------
