======================================================================
Python 移行ノート
======================================================================

私の Windows マシンでの Python のアップグレード作業に必要な手順について記す。
まずは長期に亘り安定して利用してきた 2.6 から、
2.x 台最終版である 2.7 への移行作業を記す。

そして 2014 年夏、Windows 7 の 64 ビット機に Python 3.4 環境を構築する機会が訪れた。

.. contents:: ノート目次

.. note::

   * OS

     * Windows XP Home Edition SP 3
     * Windows 7 Home Premium SP 1

   * Python

     * Upgrade from 2.6.6 to 2.7.3.
     * Upgrade from 2.7.3 to 3.4.1.

2.6 から 2.7 への移行計画
======================================================================
実際のところ、手間をかけて 2.6 から 2.7 へ移行する利点は今のところなさそうに思える。
それは 2.7 での新機能を勉強してから判断すればよい。
とにかく、アップグレード手順を残しておく。

Python 2.6 site-packages の状態を保存
----------------------------------------------------------------------
私の環境では pip_ がインストールされているハズなので、
2.6 環境にインストールしたサードパーティー製パッケージを書き出しておく。

ただし、バージョンは不要なので ``cut`` にて削っておく。

.. code-block:: console

   $ cd D:/Python26/lib/site-packages
   $ pip freeze | cut -d= -f 1 > mypkgs.txt

後ほど :file:`mypkgs.txt` をテキストエディターで編集する。

Python 2.7 本体をインストール
----------------------------------------------------------------------
* Python_ の公式サイトから :file:`python-2.7.3.msi` をダウンロードする。
* 普通に Explorer 上から実行して、Python 2.6 のインストール場所の隣りにインストールする。

Python 2.6 フォルダーから一部のファイルをコピーする
----------------------------------------------------------------------
正直、この作業が必要なのかどうかわかっていない。

* :file:`sitecustomize.py` を 2.6 フォルダーの :file:`site-packages` フォルダーから
  2.7 フォルダーの対応する位置にコピーする。

最初に手動で準備するもの
----------------------------------------------------------------------
* setuptools_: インストーラーを利用する。
  :file:`setuptools-0.6c11.win32-py2.7.exe` のようなファイル名のものをダウンロードページから取得する。

* pip_: :file:`pip.1.1-tar.gz` を入手して、解凍後 :file:`setup.py` を利用する。

  .. code-block:: console

     $ python27 setup.py install

Windows インストーラーを利用するもの
----------------------------------------------------------------------
``pip`` ではインストールできないものを先にインストールしておく。

と言うより、``pip`` でインストールしたいパッケージ X がパッケージ Y に依存しているとして、
Y は Windows インストーラーでインストールするべきものであるとする。
先に Y をインストールしておかないと、
``pip`` で X をインストールする段になって、Y の扱いが怖いことになりそうだから、
ここで述べる手順がある。

私の場合のパッケージ群は次の通り。
インストーラーの拡張子は exe だったり msi だったりするが、
気にしないで構わないだろう。

* PIL_: 公式サイトに 2.7 用のものがある。
* NumPy_: 2.7 OK
* SciPy_: 2.7 OK
* Matplotlib_: 2.7 OK
* Pygame_: 2.7 OK
* Py2exe_: 2.7 OK
* PyQt4_: 2.7 OK
* pysparse: `Python Extension Packages for Windows - Christoph Gohlke`_ を利用させてもらう。

旧環境での pip freeze の出力を利用するもの
----------------------------------------------------------------------
2.6 環境で ``pip freeze`` することで、利用中の ``site-packages`` パッケージが得られる。
これを 2.7 環境の ``pip`` に食わせて様子見とする。

先ほど得た :file:`mypkgs.txt` をテキストエディターで編集する。
PIL, NumPy などのインストーラーモノの行を削除して、このテキストファイルを上書きする。
編集後、おもむろに下記コマンドラインを実行する。
かなり時間がかかることを覚悟することだ。

.. code-block:: console

   $ cd D:/Python27/Scripts
   $ ./pip install -r mypkgs.txt

* 何度か失敗するかもしれないが、成功したものを :file:`mypkgs.txt` から順次削除していき、
  再度 ``pip`` 呼び出しをすればよい。
* ログを取るのもよいだろう。

特殊なもの
----------------------------------------------------------------------
Subversion の Python binding を利用しているため、これをセットアップする。

* http://sourceforge.net/projects/win32svn/files/1.7.6/

* svn-win32-1.7.6-ap24_py27.zip をダウンロード。
  解凍してフォルダーを潜る。下記フォルダーを ``site-packages`` にコピー。

  * libsvn
  * svn_python

2.6 のクリーンナップ
----------------------------------------------------------------------
* Windows のコントロールパネル「プログラムの追加と削除」を利用して、
  Python 2.6 関連のパッケージを全部アンインストールする。

* 念のため、残骸を確認するべし。
  自分で作った設定ファイルやらがある場合、適宜修正を加え 2.7 に引っ越す。

* Python 2.6.6 をアンインストールするのはパッケージを全部片付けてからの最後。

ツールや環境変数の修正
----------------------------------------------------------------------
移行、完全に個人的なメモ。他の人には通用しない作業だ。

.bashrc
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
この設定をする理由は、私が Cygwin で ``bash`` をインタラクティブシェルとして利用しており、
そこから Windows 用の Python を呼び出すことが多いことによる。

エイリアス ``python27`` を追加。

.. code-block:: bash

   alias a='alias'
   a python26='D:/Python26/python.exe'
   a python27='D:/Python27/python.exe'

.bash_profile
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
``$PATH`` に Python 関連の記述がある場合は修正する。
設定理由は上述と同じ。

SendToCygwin.ini
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
「Cygwin に送る」というユーティリティがあり、私はこれを偏愛している。
その設定ファイルを更新しておく。

.. code-block:: ini

   *.py =python27 %F ||
   *.pyw =python27 %F ||

環境変数 PATH
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
``D:\Python26`` を ``D:\Python27`` に置換。

2.7 から 3.4 への移行
======================================================================
Python 自身のメジャーバージョンアップもさることながら、OS も 64 ビット対応のものである。

Python 3.4 本体をインストールする
----------------------------------------------------------------------
次の 2 ステップで十分だ。

* Python_ の公式サイトから :file:`python-3.4.1.amd64.msi` をダウンロードする。
* インストーラーを実行する。
  インストールオプションで pip が含まれるようにすること。

サードパーティー製パッケージのインストール
----------------------------------------------------------------------
インストーラーからインストールするものと、pip でインストールするものに大別して作業することにした。

Windows インストーラーを利用するもの
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
筆者環境では、次のパッケージ群は
`Python Extension Packages for Windows - Christoph Gohlke`_ のビルドを利用した。
わかりやすさのため、インストーラーのファイル名そのものをここに記す。

* :file:`matplotlib-1.3.1.win-amd64-py3.4.exe`
* :file:`numpy-MKL-1.8.2.win-amd64-py3.4.exe`
* :file:`Pillow-2.5.1.win-amd64-py3.4.exe`
* :file:`pygame-1.9.2a0.win-amd64-py3.4.exe`
* :file:`PyOpenGL-3.1.0.win-amd64-py3.4.exe`
* :file:`PyOpenGL-accelerate-3.1.0.win-amd64-py3.4.exe`
* :file:`pyparsing-2.0.2.win-amd64-py3.4.exe`
* :file:`scipy-0.14.0.win-amd64-py3.4.exe`

PyQt5 など、それ以外のパッケージについては、それぞれの公式サイト提供のビルドを利用した。

旧環境での pip freeze の出力を利用するもの
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#. 旧環境 (2.7) の ``pip freeze`` の出力結果をテキストファイルに保存 (:file:`mypkgs.txt`) する。
#. :file:`mypkgs.txt` を編集し、Windows インストーラーでインストールしたパッケージの行を削除する。
#. 前回移行時と同様の手順に従う。

.. code-block:: console

   $ cd D:/Python34/Scripts
   $ ./pip install -r mypkgs.txt

2.7 のクリーンナップ
----------------------------------------------------------------------
前述の 2.6 のクリーンナップと同様。

ツールや環境変数の修正
----------------------------------------------------------------------
SendToCygwin の Windows 7 版が存在しないことを除いて、前述と同様。

環境変数
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
以前は :file:`sitecustomize.py` で行っていたエンコーディング関連の指定を環境変数設定で実現する。
Windows のユーザー環境変数に次のものを指定しておくのが具合がよい。

================ ========================
環境変数         設定値
================ ========================
PYTHONIOENCODING UTF-8
PYTHONPATH       自作モジュールのパス
================ ========================

ドットファイル
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* :file:`.bashrc` の Python 関連のコードを修正。
* :file:`.bash_profile` の Python 関連のコードを修正。

2to3.py 関連
----------------------------------------------------------------------
もっとも面倒な作業は、これまで自分が書いたすべての Python コードを Python 3 仕様に書き改めることだ。
しかし :file:`$PYTHONDIR/Tools/Scripts/2to3.py` で機械的に処理すれば一応は動きそう。

.. include:: /_include/python-refs-core.txt
.. include:: /_include/python-refs-sci.txt
.. _PyQt4: http://www.riverbankcomputing.com/software/pyqt/intro
.. _Py2exe: http://www.py2exe.org/
.. _Pygame: http://www.pygame.org/
