======================================================================
組合せ論と群論
======================================================================
モジュール ``sympy.combinatorics`` を見ていく。
群論に関係する機能が中心のようだ。

.. contents:: ノート目次

.. note::

   インポート文は次のものを利用した。

   .. code-block:: python3

      from sympy.combinatorics import *

置換
======================================================================
モジュール ``sympy.combinatorics.permutations`` に群論オブジェクトのための重要な構成要素がある。
クラス ``Cycle`` と ``Permutation`` がそれで、
後で見る各種有限群オブジェクトの基礎となるデータ型を表現する。
SymPy_ のドキュメントでは先に ``Permutation`` を説明しているが、
私は ``Cycle`` を先に理解するのがよいと思うので、
ここではそのようにノートを記す。

クラス ``Cycle``
----------------------------------------------------------------------
巡回置換を表現する。基本的な構成要素なので少々細かく見てきたい。

* 要素は自然数で表現する。0 から始まる。

  * したがって、恒等置換を生成するには ``Cycle(0)`` とする。位数 1 の巡回が生成する。

* 例を挙げる。``Cycle(0, 3, 7)`` は次のような巡回置換を表現する。

  * 0 → 3
  * 3 → 7
  * 7 → 0
  * 1, 2, 4, 5, 6 は固定点。

* IPython 等の Python シェルでオブジェクトをダンプする際には

  * ``c.list()`` のようにして確認できる。
  * または明示的に Python 組み込み関数 ``print`` を用いる。

* 巡回置換を合成するにはコンストラクター呼び出し直後にさらに括弧を付けて巡回置換を追加する。
  例を示す。

  .. code-block:: text

     In [7]: Cycle(0, 3, 7)(1, 2).list()
     Out[7]: [3, 2, 1, 7, 4, 5, 6, 0]

* このクラスは実は Python の ``dict`` をスーパークラスに持つだけなので、
  あまり SymPy のオブジェクトという感じがしない。

* 極端に大きい値を巡回させると ``MemoryError`` が送出される。
  例えば ``Cycle(1000000, 100)(10000, 1, 100000000)`` などとしないほうがよい。

クラス ``Permutation``
----------------------------------------------------------------------
置換を表現する。土台となる概念は上述の巡回置換なので、
要素周りの規則はそれに準じる。

ここではこのクラスの主要な機能を記す。

コンストラクター
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
コンストラクターの記法が複数ある。好きなものを使えるようにしておく。

.. code-block:: text

   In [23]: Permutation(2, 1)(0, 5, 6)
   Out[23]: Permutation(0, 5, 6)(1, 2)

   In [24]: Permutation([[2, 1], [0, 5, 6]])
   Out[24]: Permutation(0, 5, 6)(1, 2)

   In [25]: Permutation(2, 1) * Permutation(0, 5, 6)
   Out[25]: Permutation(0, 5, 6)(1, 2)

* 上のコンストラクターのみの場合では、与える巡回置換は互いに素である必要がある。

* キーワード引数 ``size`` が便利。
  要素数は多いが置換部分が少ない置換を生成するときにはこれだ。

  .. code-block:: text

     In [26]: Permutation([[44, 88],], size=100)
     Out[26]: Permutation(99)(44, 88)

* 位数 ``n`` の恒等置換群の生成法をひとつマスターしておく。
  一番楽なのは ``Permutation(size=n)`` だろう。

置換の合成・積
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
置換の合成の記法も複数あるので注意。
次のものはすべて ``i`` に対して同じ作用を示す。いずれもまず ``p`` を作用する。

* ``(p * q)(i)``
* ``q(p(i))``
* ``i^p^q``
* ``i^(p * q)``

オブジェクトの出力
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
``Permutation`` オブジェクトを出力する方法がいくつかある。

* ``array_form``: e.g. ``[5, 2, 1, 3, 4, 6, 0]``
* ``cyclic_form``: e.g. ``[[0, 5, 6], [1, 2]]``

デフォルトの出力パターンは ``Permutation.print_cyclic`` フラグで設定する。

置換による像を得る
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
オブジェクトの丸括弧演算子を用いる。

.. code-block:: text

   In [128]: p = Permutation(2, 1)(0, 5, 6)

   In [129]: p(0), p(1), p(2)
   Out[129]: (5, 2, 1)

同サイズの文字列・コレクションの像も同様に得られる。

.. code-block:: text

   In [130]: p('ABCDEFG')
   Out[130]: ['F', 'C', 'B', 'D', 'E', 'G', 'A']

   In [131]: p(symbols('a0:7'))
   Out[132]: [a5, a2, a1, a3, a4, a6, a0]

置換によって動く要素を求める
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
メソッド ``support()`` を用いる。

.. code-block:: text

   In [149]: Permutation(2, 1)(0, 5, 6).support()
   Out[149]: [0, 1, 2, 5, 6]

   In [150]: Permutation(0, 1, 2, 3).support()
   Out[150]: [0, 1, 2, 3]

   In [151]: Permutation(size=4).support()
   Out[151]: []

置換をランダムに生成する
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ランダムな置換の生成にはクラスメソッド ``random(n)`` を用いる。
次数 ``n`` の対称群にある置換をランダムに一個返すと言えばよい？

.. code-block:: text

   In [153]: Permutation.random(10)
   Out[153]: Permutation(0, 5, 3, 4, 8)(1, 2, 9)(6, 7)

   In [154]: Permutation.random(10)
   Out[154]: Permutation(0, 4, 5, 8)(1, 2, 3, 6)(7, 9)

   In [155]: Permutation.random(10)
   Out[155]: Permutation(0, 7, 6, 8, 1, 9, 3, 2, 5, 4)

* どういう種類のランダムなのか Python だけが知っている。
* ちなみに ``random(0)`` と ``random(1)`` の結果は異なる。

置換のべき乗を求める
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
べき乗演算子 ``**`` を置換オブジェクトに適用することができる。
試しに適当な置換オブジェクトをその位数乗すると、恒等置換が得られることを見よう。

.. code-block:: text

   In [167]: p = Permutation(2, 1)(0, 5, 6); p
   Out[167]: Permutation(0, 5, 6)(1, 2)

   In [168]: p.order()
   Out[168]: 6

   In [169]: p ** 6
   Out[169]: Permutation(6)

逆置換を求める
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
逆置換オブジェクトを生成するにはべき乗演算子 ``**`` を援用する。
指数を -1 にすればよい。

.. code-block:: text

   In [160]: p = Permutation(2, 1)(0, 5, 6); p
   Out[160]: Permutation(0, 5, 6)(1, 2)

   In [161]: p ** -1
   Out[161]: Permutation(0, 6, 5)(1, 2)

   In [162]: p * (p**-1)
   Out[162]: Permutation(6)

置換の巡回表記を互換の積へ分解する
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
メソッド ``transpositions()`` を用いることで、置換を互換の積として表現できる。
置換と同等のあみだくじの描き方がわかるということだ。

.. code-block:: text

   In [170]: p = Permutation(2, 1)(0, 5, 6); p
   Out[170]: Permutation(0, 5, 6)(1, 2)

   In [171]: p.transpositions()
   Out[171]: [(0, 6), (0, 5), (1, 2)]

と思ったら、両端の線を結ぶことになってしまった。

置換の符号、偶置換、奇置換判定
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
置換の符号を得るにはメソッド ``signature()`` を、
置換の偶置換、奇置換の判定にはプロパティー ``is_even``, ``is_odd`` をそれぞれ用いる。

先ほどの 3 つの互換の積で表せる ``p`` を再利用して動作を確認する。

.. code-block:: text

   In [173]: p.signature()
   Out[173]: -1

   In [174]: p.is_even
   Out[174]: False

   In [175]: p.is_odd
   Out[175]: True

群オブジェクトジェネレーター
======================================================================
モジュール ``sympy.combinatorics.generators`` にあるジェネレーターおよび関数は、
よく使われる群を参照するのに便利だ。下に示す表はこのモジュールが提供する機能だ。

いずれも対応する群の元を ``Permutation`` オブジェクトとして生成する。

============================== ======================================================================
ジェネレーターまたは関数       機能
============================== ======================================================================
``alternating(n)``             ``n`` 次の交代群を列挙する。
``cyclic(n)``                  ``n`` 次の巡回群を列挙する。
``dihedral(n)``                ``2 * n`` 次の二面体群を列挙する。
``rubik(n)``                   ``n * n`` 次のルービックキューブ群を生成する。
``rubik_cube_generators()``    普通のルービックキューブ群を生成する。
``symmetric(n)``               ``n`` 次の対称群を列挙する。
============================== ======================================================================

ジェネレーターの動きを見よう。

.. code-block:: text

   In [180]: for i in symmetric(4): print(i.cyclic_form)
   []
   [[2, 3]]
   [[1, 2]]
   [[1, 2, 3]]
   [[1, 3, 2]]
   [[1, 3]]
   [[0, 1]]
   [[0, 1], [2, 3]]
   [[0, 1, 2]]
   [[0, 1, 2, 3]]
   [[0, 1, 3, 2]]
   [[0, 1, 3]]
   [[0, 2, 1]]
   [[0, 2, 3, 1]]
   [[0, 2]]
   [[0, 2, 3]]
   [[0, 2], [1, 3]]
   [[0, 2, 1, 3]]
   [[0, 3, 2, 1]]
   [[0, 3, 1]]
   [[0, 3, 2]]
   [[0, 3]]
   [[0, 3, 1, 2]]
   [[0, 3], [1, 2]]

   In [181]: for i in dihedral(4): print(i.cyclic_form)
   []
   [[0, 3], [1, 2]]
   [[0, 1, 2, 3]]
   [[1, 3]]
   [[0, 2], [1, 3]]
   [[0, 1], [2, 3]]
   [[0, 3, 2, 1]]
   [[0, 2]]

   In [182]: for i in alternating(4): print(i.cyclic_form)
   []
   [[1, 2, 3]]
   [[1, 3, 2]]
   [[0, 1], [2, 3]]
   [[0, 1, 2]]
   [[0, 1, 3]]
   [[0, 2, 1]]
   [[0, 2, 3]]
   [[0, 2], [1, 3]]
   [[0, 3, 1]]
   [[0, 3, 2]]
   [[0, 3], [1, 2]]

   In [183]: for i in cyclic(4): print(i.cyclic_form)
   []
   [[0, 1, 2, 3]]
   [[0, 2], [1, 3]]
   [[0, 3, 2, 1]]

ルービックキューブについては後述する。

置換群
======================================================================
``PermutationGroup``
  コンストラクター注意。

  .. todo::

     ノート。

直積群
======================================================================
モジュール ``sympy.combinatorics.group_constructs`` に群オブジェクトのコレクションから
直積群オブジェクトを生成する関数がある。

関数 ``DirectProduct(*groups)``
  .. todo::

     ノート。

名前付き群
======================================================================
モジュール ``sympy.combinatorics.named_groups`` にある群オブジェクト生成関数を見ていく。
これらの関数は ``PermutationGroup`` オブジェクトまたはその ``DirectProduct`` オブジェクトを生成する。

======================================== ======================================================================
関数                                     機能
======================================== ======================================================================
``AbelianGroup(*cyclic_orders)``         巡回群の直積群を生成する。
``AlternatingGroup(n)``                  ``n`` 次交代群を生成する。
``CyclicGroup(n)``                       ``n`` 次巡回群を生成する。
``DihedralGroup(n)``                     ``2 * n`` 次の二面体群を生成する。
``SymmetricGroup(n)``                    ``n`` 次対称群を生成する。
``RubikGroup(n)``                        ``PermutationGroup(rubik(n))`` を返す。
======================================== ======================================================================

.. todo::

   利用例を示す。

正多面体群
======================================================================
クラス ``Polyhedron``
  .. todo::

     ノート。

テンソル
======================================================================
なぜかテンソルがこんなところにある。

.. todo::

     ノート。

.. include:: /_include/python-refs-core.txt
.. include:: /_include/python-refs-sci.txt
