digraph G {
    graph [
        fontname = "Bitstream Vera Sans"
        fontsize = 9
    ]
    node [
        fontname = "Bitstream Vera Sans"
        fontsize = 9
        shape = "record"
    ]
    edge [
        arrowtail = empty
        dir = back
        fontname = "Bitstream Vera Sans"
        fontsize = 9
    ]

    Transform [
        label = "{Transform
        |# default_priority : int\l
        |+ apply()\l}"
    ]
    ConcreteTransform [
        label = "{(ConcreteTransform)
        |# default_priority : int\l
        |+ apply()\l}"
    ]
    Transformer [
        label = "{Transformer
        |- serialno : int\l
        |+ add_transform(Transform)\l+ apply_transforms()\l...}"
    ]

    node [
        fillcolor = lightgrey
        style = filled
    ]

    TransformSpec [
        label = "{TransformSpec
        |
        |+ get_transforms()\l}"
    ]
    Component [
        label = "{Component
        |component_type : str\l
        |...}"
    ]

    module [
        label = "{module
        |+ labels : dict\l+ bibliographic_fields : dict\l+ author_separators : list\l
        |}"
    ]
    document [ label = "{document|...|...}" ]
    AbstractNode [ label = "{Node|...|...}" ]

    // inheritance hierarchy
    edge [
        arrowtail = empty
        dir = back
    ]
    TransformSpec -> Transformer
    TransformSpec -> Component [ constraint = false ]
    Transform -> ConcreteTransform

    // aggregation (shared association)
    edge [
        arrowtail = ediamond
    ]

    { rank = min ; Component, module }
    { rank = same ; Transform, Transformer }

    Transform -> document [ headlabel = "document" ]

    Transform -> module [
        headlabel = "language"
        //minlen = 4.0
    ]
    Transformer -> Component [
        headlabel = "components"
        //minlen = 4.0
    ]
    Transformer -> AbstractNode [
        headlabel = "startnode"
    ]

    // composition (not shared association)
    edge [
        arrowtail = diamond
    ]

    document -> Transformer [
        headlabel = "transformer"
        taillabel = "document"
    ]
    Transformer -> Transform [
        headlabel = "transforms"
        minlen = 4.0
    ]
    document -> AbstractNode [
        constraint = false
        //minlen = 2.0
    ]
}
