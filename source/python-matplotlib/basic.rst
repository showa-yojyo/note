======================================================================
基本テク
======================================================================
本稿では Matplotlib_ インストール直後にでも実現可能な基本的な操作について記す。
基本の手順は、NumPy_/SciPy_ の機能でデータを生成し、
その 2D プロットを Matplotlib を用いて描画することだ。

.. contents::

.. note::

   特に断らない限り、以降のテキストおよびコード片においては、
   各種 ``import`` を次のようにしたものと仮定している。

   .. code-block:: python3

      import numpy as np
      import scipy as sp
      import matplotlib as mpl
      import matplotlib.pyplot as plt
      from matplotlib import pylab, mlab

基本的な関数・メソッドを押さえる
======================================================================
下の表を見てからヘルプを当たる。

後で見るように、モジュール ``matplotlib.pyplot`` の関数の機能は、
ある種の「アクティブな」オブジェクトのメソッド呼び出しをするだけに過ぎない。

================= ==============================================
関数（引数省略）  機能
================= ==============================================
``plt.plot()``    グラフを描く
``plt.hist()``    ヒストグラムを描く

``plt.show()``    イメージを一気に表示
``plt.savefig()`` イメージをファイルに保存
``plt.setp()``    プロット線の属性等、描画パラメーターの取得・指定

``plt.axis()``    ビューポート範囲指定
``plt.grid()``    グリッド描画をするかしないか指定
================= ==============================================

IPython_ を利用している場合はおもむろに ``plt?`` とタイプするのもお勧めだ。
Matplotlib の概要がサインカーブのプロットを表示する簡素な例とともにコンソールに出力する。

Figure と Axes の概念を理解する
======================================================================
Matplotlib には current figure と current axes という概念がある。
これを利用して、複数個のグラフをワンシーンに定義できるようだ。

================= ==============================================
関数              機能
================= ==============================================
``plt.figure()``  指定の figure をカレントにする
``plt.subplot()`` 指定の axes をカレントにする
================= ==============================================

Figure
  大抵の本にはいくつかの図がしばしばキャプション付きで載っている。
  Figure という語は、それに対応するクラスだと解釈したい。
  図の一つ一つが Figure のオブジェクトになると思えば、個人的にはコードが理解できる。

Axes
  普通は一つの図にグラフ一つを載せるわけだが、
  同じようなグラフを並べたものを一つの図としたい場合もある。
  Axes という語が意味するのが、そのグラフだと解釈すればよいか。

  余談だが MS Word のグラフ API にも Axes というコンセプトがあったと記憶している。

次の図にふたつの Axes を持たせたひとつの Figure を示す。

.. image:: /_static/mpl-axes.png
   :scale: 50%

* ``plt.figure(n)`` で current figure を指定する。
* ``plt.subplot(n0n1n2)`` で current axes を指定する。
  ``n0``, ``n1``, ``n2`` がそれぞれ縦方向の区画数、横方向の区画数、
  「どの区画か」を意味する。

  ``n2`` は 1 以上 ``n1 * n2`` 以下の値でなければならない。

* ``plt`` のプロットコマンドはすべて current axes に作用する。

  .. code-block:: python3

     import matplotlib as mpl
     import matplotlib.pyplot as plt

     fig = plt.figure(1) # current figure: 1 とする。
     plt.subplot(211) # 縦 2 横 1 分割で current axes: 1 になる。

     # ... ここに来る plt. で始まるプロット命令はすべて
     # 二分割された上の axes に適用される。

     plt.subplot(212) # 縦 2 横 1 分割で current axes: 2 になる。

     # ... ここに来る plt. で始まるプロット命令はすべて
     # 二分割された下の axes に適用される。

* Matplotlib は figure/axes を扱うスタイルを二つ提供している。

  * 古典的なステートマシン様式

    ユーザーコードがカレントな figure/axes が何であるかを常に意識して、
    プロットコマンドを呼び出す。
    コマンドはカレントな figure/axes に対して適用されることになる。

  * 状態とオブジェクトとを関連付けて取り扱うオブジェクト指向プログラミング様式

    figure/axes がオブジェクトになっていて、メソッドでプロットコマンドを呼び出す。
    コマンドは対象となるオブジェクトの管理する figure/axes に対して適用されることになる。

テキストを使う
======================================================================
当ノートの目的のひとつに、「数式を含むテキストを表示する」ことがある。
そのためには、事前に単純ななテキスト描画の方法を学習する必要があるだろう。
モジュール ``plt`` からテキストに強く関連していそうな機能を表にしてみよう。

================= ==============================================
関数（引数省略）  機能
================= ==============================================
``plt.text()``    ビューポート内にテキストを描く
``plt.xlabel()``  X 軸用キャプション
``plt.ylabel()``  Y 軸用キャプション
``plt.title()``   グラフ全体のキャプション
================= ==============================================

* ``plt.text()`` は指定位置にテキストを描画するコマンドと考える。

テキストプロパティ
----------------------------------------------------------------------
個人的によく使うテキストプロパティを表にまとめておく。
各種テキストコマンド関数・メソッドのキーワード引数として指定するのが一つのやり方。

================ ===================================================================================================================================================
キーワード       意味
================ ===================================================================================================================================================
``color``        テキストの色。
``family``       テキストのフォント名。
                 フォント名を直接指定するか ``"sans-serif"`` 等の予約名を指定する。
``rotation``     テキストの流し込む角度。度単位で直接指定する。
``size``         フォントサイズをポイントで指定するか ``"x-large"`` 等の予約名を指定する。
``stretch``      0 から 1000 までの値を指定するか ``"condensed"`` 等の予約名を指定する。
``style``        ``"normal"``, ``"italic"``, ``"oblique"`` から選択。
``weight``       0 から 1000 までの値を指定するか ``"bold"`` 等の予約名を指定する。
================ ===================================================================================================================================================

* テキストの基準位置は ``horizontalalignment``, ``verticalalignment`` キーワード引数で指示できる。
  例えば x, y 引数をテキストの右下位置としたい場合には次のようにする。

  .. code-block:: python3

     plt.text(x, y, 'aaaa', verticalalignment='bottom', horizontalalignment='right')

* 複数行テキストの左揃え・中央揃え・右寄せを指定する場合は ``multialignment`` キーワードを使用する。

日本語のテキストを描画する
----------------------------------------------------------------------
``matplotlib.font_manager.FontProperties`` を明示的に利用する手段を見つけた。

.. literalinclude:: /_sample/mpl/japanese-text.py
   :language: python3

結果のスクリーンショットは次のようなものだ。

.. image:: /_static/mpl-fontprop.png
   :scale: 50%

Artists 関連
======================================================================
* primitives: ``Line2D``, ``Rectangle``, ``Text``, ``AxesImage``, etc.
* containers: ``Axis``, ``Axes``, ``Figure``, etc.

コンテナーを攻略していく。

* ``Axes`` はプロッティングエリア。
* ``Subplot`` は ``Axes`` の特別なもの。コード的にもサブクラスで表現されている。
* ``Patch`` というクラス名は MATLAB から受け継いだ。

* プロパティー一覧は ``matplotlib.artist.getp`` 関数で確認できる。

Figure (``matplotlib.figure.Figure``)
----------------------------------------------------------------------
* ``Figure`` オブジェクトが "current axes" を管理している。
* ``Figure`` は（グラフのものではない）自身の座標系を持っていて、
  矩形の左下と右上がそれぞれ (0, 0), (1, 1) となっている。

  変な例だが、画像全体に対角線を一本引くにはこうする。
  キーワード引数 ``transform`` の値がいかにもな感じがするだろう。

  .. literalinclude:: /_sample/mpl/diagonal.py
     :language: python3

  結果は次のスクリーンショットのようなものとなる。

  .. image:: /_static/mpl-figcs.png
     :scale: 50%

Axes (``matplotlib.axes.Axes``)
----------------------------------------------------------------------
``Axes`` オブジェクトが図形・テキスト・目盛・グリッド・ラベル各オブジェクトを管理する。
まずコンテナーメンバーのうち、馴染みのあるものだけ表にまとめておく。

================  ====================================================================================================
メンバー名        コンテナーの内容
================  ====================================================================================================
``lines``         ``plot`` 等で作成した ``Line2D`` オブジェクト。
``patches``       各種 ``Patch`` オブジェクト。
                  ``Ellipse``, ``Polygon``, etc.
``texts``         ``text`` や ``annotate`` で作成した各種テキスト。
================  ====================================================================================================

非コンテナーメンバーも少しだけ押さえておく。

================  ====================================================================================================
メンバー名        コンテナーの内容
================  ====================================================================================================
``patch``         ``Axes`` の背景用 ``Rectangle`` オブジェクト。
``xaxis``         ``XAxis`` オブジェクト。
``yaxis``         ``YAxis`` オブジェクト。
================  ====================================================================================================

Axis (``matplotlib.axis.Axis``)
----------------------------------------------------------------------
グラフの目盛、グリッド、目盛に付けるラベル等を管理する。
``Axes`` オブジェクトの ``xaxis`` および ``yaxis`` メンバーでアクセスできる。

使用頻度の高いものだけ表にしておく。

===================   ====================================================================================================
メソッド名            機能
===================   ====================================================================================================
``get_major_ticks``   目盛 (``matplotlib.ticker.Ticker``)
                      オブジェクトを返す。
``grid``              グリッド線を描画するしないを指示。
===================   ====================================================================================================

.. code-block:: python3

   import matplotlib.pyplot as plt
   ax = plt.gca()

   # Y 軸方向の全目盛をいじる。
   for tick in ax.yaxis.get_major_ticks():
       tick.tick1On = False   # 左側の目盛を隠す。
       tick.tick2On = True    # 右側の目盛を表示する。
       tick.label1On = False  # 左側の目盛ラベルを隠す。
       tick.label2On = True   # 右側の目盛ラベルを表示する。

バックエンド
======================================================================
「プロッティングの出力先」と解釈していいか。

ユーザーインターフェイスバックエンドとハードコピーバックエンドの二種類がある。
前者はウィンドウ、後者はファイルと考えていいか。
それぞれ ``plt.show()`` と ``plt.savefig()`` の振る舞いに影響する。

ユーザーインターフェイスバックエンド
----------------------------------------------------------------------
rc パラメーターでバックエンドを指定する。
:file:`matplotlibrc` に記述するのであれば、こんな感じになる：

.. code-block:: cfg

   # PyQt4 によるウィンドウでグラフを描く。
   # もちろん、PyQt4 が別途インストール済みであることが前提。
   # ちなみに Qt5Agg は Matplotlib 1.3.x 時点では実装されていない。
   backend : Qt4Agg

コードで動的に（実行時に）指定するのならばこうする。

.. code-block:: python3

   import matplotlib as mpl
   mpl.use('Qt4Agg')

.. image:: /_static/mpl-qt4agg.png
   :scale: 50%

なお ``mpl.use`` 関数を呼び出すタイミングは、最初の ``import matplotlib``
の直後がベストのようだ。

個人的にはユーザーインターフェイスバックエンドをカスタマイズすることはない。
デフォルトの ``TkAgg`` のままで十分だ。

ハードコピーバックエンド
----------------------------------------------------------------------
ハードコピーバックエンドのカスタマイズはこのノートの目的の一つ。

* ``backend`` の値を ``PS``, ``PDF``, ``PNG``, ``SVG`` のどれかにしておくと、
  その名前の形式のファイルを作成することができる。

  コードで実現するには、次のような手順にしておけばよい。

  .. code-block:: python3

     import matplotlib as mpl
     mpl.use('PDF')  # PDF でイメージが欲しい。

     # ... プロッティングコマンド群がここに来る。

     plt.savefig('output')  # ファイル output.pdf ができる。

ヒストグラムを描く
======================================================================
ノートを整理していたら未使用のスクリプトを発見したので、説明なしにここにコードを記す。

.. literalinclude:: /_sample/mpl/histogram.py
   :language: python3

最終的な描画結果は次のようなものとなる。乱数次第で分布が変化するので注意。

.. image:: /_static/mpl-histogram.png
   :scale: 50%

曲線を描く
======================================================================
曲線とは言っても実際は折れ線だ。

多項式
----------------------------------------------------------------------
実数 :math:`x` の多項式 :math:`f(x)` について :math:`y = f(x)` のグラフを描きたい。
次の容量で曲線を定義する。

#. プロットする ``x`` のサンプル点を関数 ``numpy.arange`` で適宜準備する。
   やり方を忘れていたら :doc:`/python-numpy/index` を参照。

#. 多項式 ``f`` を関数 ``numpy.poly1d`` の戻り値で表現する。

#. 評価する変数を関数 ``np.linspace`` で用意する。
#. プロットする値を ``np.array`` オブジェクトに対する broadcasting を利用して一気に得る。

なお、サンプルコードではさらに曲線に対して接線を引いた。
``f`` の一次導関数を ``f.deriv()`` で得られることを利用する。

.. literalinclude:: /_sample/mpl/polynomial.py
   :language: python3

描画結果は次のようなものとなる。

.. image:: /_static/mpl-polynomial.png
   :scale: 50%

Bézier 曲線
----------------------------------------------------------------------
本当は B-Spline 曲線を描画したいのだが、
調べてみると Matplotlib では Bézier 曲線が限界のようだ。

手順はこういう感じのようだ：

#. クラス ``matplotlib.path.Path`` のオブジェクトを作成する。
   この引数として、Bézier 曲線の制御点リストと「打点命令」のリストを渡す。

#. そのパスオブジェクトを引数として、クラス
   ``matplotlib.patches.PathPatch`` のオブジェクトを作成する。

#. そのパッチオブジェクトを対象の ``axes`` オブジェクトに ``add_patch`` する。

Matplotlib は制御点列を与えて Bézier 曲線を定義する流儀のようだ。

まずは簡単な例を。最小の手間で 2 次の Bézier 曲線（単なる放物線）を定義することを考える。
``CURVE3`` というタイプの曲線は、制御点を 3 つ与えることで 2 次の Bézier 曲線を表現できる。
``CURVE3`` ベースの Bézier 曲線の特徴は次の通り。

* 最初と最後の制御点は、放物線の始点と終点にそれぞれ一致する。
* 中間の制御点は、放物線の両端点それぞれの接線の交点と一致する。
* よって、出来上がりの曲線形状が把握できる。

``Path`` オブジェクト構築は次のようになる。

.. literalinclude:: /_sample/mpl/bezier.py
   :language: python3
   :lines: 1-25

もうひとつ例を。ドロー系アプリでもよく見かける 3 次の Bézier 曲線を定義する。

* ``CURVE4`` 命令で制御点を指示する。
* 最初と最後の制御点は、曲線の始点と終点にそれぞれ一致する。
* 最初の制御点とその次の制御点を結ぶ直線が、曲線の始点での接線に一致する。
  また、最後の制御点とその前の制御点を結ぶ直線が、曲線の終点での接線に一致する。
* 曲線全体は、制御点列からなる多角形の内部に位置する。

``Path`` オブジェクト構築は次のようになる。

.. literalinclude:: /_sample/mpl/bezier.py
   :language: python3
   :lines: 27-

最終的な描画結果は次のようなものとなる。

.. image:: /_static/mpl-bezier.png
   :scale: 50%

.. include:: /_include/python-refs-sci.txt
