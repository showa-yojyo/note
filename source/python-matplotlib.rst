======================================================================
Python Matplotlib 利用ノート
======================================================================

.. note::

   本稿において、利用した各パッケージのバージョンは次のとおり。

   * Python_ 2.6.6
   * Setuptools_ 0.6c11
   * NumPy_ 1.6.0
   * PIL_ 1.1.6

.. contents:: ノート目次

目的
==================================================
Matplotlib_ パッケージはとても奥が深い。
手足のように使いこなせるようになるには、相当時間を要すると見た。
Python では遊びたいことが他にもたくさんあるので
Matplotlib で目的を拡大し過ぎないように、ここまでできればいいという目的を決めておく。

個人的には次の 3 点で十分だ。

* 数学の教科書にありがちな曲線グラフを描画する。
  特に xy 平面上に n 次多項式やスプライン曲線が描画できればいい。

* 数学の教科書にありがちな数式を描画する。
  つまり TeX 環境の簡易版として利用したい。

* それらを PNG 画像または PDF ファイルとして出力したい。
  できれば SVG ファイルをも得たい。

環境構築
==================================================

Matplotlib の依存パッケージをインストール
--------------------------------------------------
Matplotlib は NumPy_ を多用しているので、当然これを先にインストールしておく。
→ :doc:`/python-numpy`

あとは特に必要ない。本体のインストールへ進もう。

Matplotlib 本体をインストール
--------------------------------------------------
私のプラットフォームは Windows なので、
公式サイトからインストーラーをダウンロードして実行するの一手。

オフラインでも勉強できるようにドキュメントを確保
--------------------------------------------------
公式サイトから PDF をダウンロードして、ローカルディスクに保存する。
最初のページに "Matplotlib Release 1.0.0" というタイトルと、著者の連名
"Darren Dale, Michael Droettboom, Eric Firing, John Hunter" が書かれてある。
PDF ファイル全体は 900 ページに及ぶ大著だ。

なお、ソースコード一式を入手して、そこにある Sphinx_ によるドキュメントビルドを試みたが、
同じ処理をぐるぐるループして結局モノができなかったことがある。

動作確認
--------------------------------------------------
次のようなコードを実行してみて、それらしいイメージを目視で確認できたら OK でいい。

>>> import matplotlib.pyplot as plt
>>> plt.plot([1,2,3,4])
>>> plt.show()

最後の行の ``plt.show()`` の呼び出し開始直後に、
PIL_ の ``Image.show()`` のようにビューワーが出現する。これがなかなか面白い。

.. image:: /_static/mpl-tkagg.png
   :scale: 50%

Matplotlib の基本的なコードの書き方を習得する
==================================================
* ここから先の文中の ``plt`` は
  ``import matplotlib.pyplot as plt`` と別名定義したものとする。

* 同様に ``mpl`` は
  ``import matplotlib as mpl`` と別名定義したものとする。

基本的な関数・メソッドを押さえる
--------------------------------------------------
下の表を見てからヘルプを当たる。

後で見るように、モジュール ``matplotlib.pyplot`` の関数の仕事は、
ある種の「アクティブな」オブジェクトのメソッド呼び出しをするだけに過ぎない。

=================      ==============================================
関数（引数省略）       仕事
=================      ==============================================
``plt.plot()``         グラフを描く
``plt.hist()``         ヒストグラムを描く

``plt.show()``         イメージを一気に表示
``plt.savefig()``      イメージをファイルに保存
``plt.setp()``         プロット線の属性等、描画パラメーターの取得・指定

``plt.axis()``         ビューポート範囲指定
``plt.grid()``         グリッド描画をするかしないか指定
=================      ==============================================

Figure と Axes の概念を理解する
--------------------------------------------------
Matplotlib には current figure と current axes という概念がある。
これを利用して、複数個のグラフをワンシーンに定義できるようだ。

=================        ==============================================
関数                     仕事
=================        ==============================================
``plt.figure()``         指定の figure をカレントにする
``plt.subplot()``        指定の axes をカレントにする
=================        ==============================================

* 大抵の本にはいくつかの図がしばしばキャプション付きで載っている。
  Figure という語は、それに対応するクラスだと解釈したい。
  図の一つ一つが Figure のオブジェクトになると思えば、個人的にはコードが理解できる。

* 普通は一つの図にグラフ一つを載せるわけだが、
  同じようなグラフを並べたものを一つの図としたい場合もある。
  Axes という語が意味するのが、そのグラフだと解釈すればよいか。

  .. image:: /_static/mpl-axes.png
     :scale: 50%

* ``plt.figure(n)`` で current figure を指定する。
* ``plt.subplot(n0n1n2)`` で current axes を指定する。
  ``n0``, ``n1``, ``n2`` がそれぞれ縦方向の区画数、横方向の区画数、
  「どの区画か」を意味する。

  ``n2`` は 1 以上 ``n1 * n2`` 以下の値でなければならない。

* ``plt`` のプロットコマンドはすべて current axes に作用する。

  .. code-block:: python
     
     import matplotlib as mpl
     import matplotlib.pyplot as plt
     
     fig = plt.figure(1) # current figure: 1 とする。
     plt.subplot(211) # 縦 2 横 1 分割で current axes: 1 になる。
     
     # ... ここに来る plt. で始まるプロット命令はすべて
     # 二分割された上の axes に適用される。
     
     plt.subplot(212) # 縦 2 横 1 分割で current axes: 2 になる。
     
     # ... ここに来る plt. で始まるプロット命令はすべて
     # 二分割された下の axes に適用される。

* Matplotlib は figure/axes を扱うスタイルを二つ提供している。

  * 古典的なステートマシンを操作するイメージのやり方。

    ユーザーコードがカレントな figure/axes が何であるかを常に意識して、プロットコマンドを呼び出す。
    コマンドはカレントな figure/axes に対して適用されることになる。

  * 状態とオブジェクトとを結びつけて取り扱う典型的なオブジェクト指向プログラミングのやり方。

    figure/axes がオブジェクトになっていて、メソッドでプロットコマンドを呼び出す。
    コマンドは対象となるオブジェクトの管理する figure/axes に対して適用されることになる。

テキストを使ってみる
--------------------------------------------------
当ノートの目的には数式を含むテキストを表示することを含むが、
その前にシンプルなテキスト描画法を学習する必要があるだろう。

=================        ==============================================
関数（引数省略）         仕事
=================        ==============================================
``plt.text()``           ビューポート内にテキストを描く
``plt.xlabel()``         X 軸用キャプション
``plt.ylabel()``         Y 軸用キャプション
``plt.title()``          グラフ全体のキャプション
=================        ==============================================

* ``plt.text()`` は指定位置にテキストを描画するコマンドと考える。

テキストプロパティ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
個人的によく使うテキストプロパティを表にまとめておく。
各種テキストコマンド関数・メソッドのキーワード引数として指定するのが一つのやり方。

================    ==================================================
キーワード          意味
================    ==================================================
``color``           テキストの色。
``family``          テキストのフォント名。
                    フォント名を直接指定するか
                    ``"sans-serif"`` 等の予約名を指定する。
``rotation``        テキストの流し込む角度。
                    度単位で直接指定するのがいい。
``size``            フォントサイズをポイントで指定するか
                    ``"x-large"`` 等の予約名を指定する。
``stretch``         0 から 1000 までの値を指定するか
                    ``"condensed"`` 等の予約名を指定する。
``style``           ``"normal"``, ``"italic"``, ``"oblique"`` から選択。
``weight``          0 から 1000 までの値を指定するか
                    ``"bold"`` 等の予約名を指定する。
================    ==================================================

* テキストの基準位置は ``horizontalalignment``, ``verticalalignment`` キーワード引数で指示できる。
  例えば x, y 引数をテキストの右下位置としたい場合には次のようにする。

  .. code-block:: python

     plt.text(x, y, 'aaaa', verticalalignment='bottom', horizontalalignment='right')

* 複数行テキストの左揃え・中央揃え・右寄せを指定する場合は ``multialignment`` キーワードを使用する。

日本語のテキストを描画するには？
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
``matplotlib.font_manager.FontProperties`` を明示的に利用する手段を見つけた。

.. code-block:: python

   import matplotlib as mpl
   import matplotlib.pyplot as plt
   from matplotlib.font_manager import FontProperties

   fp = FontProperties(fname=r'C:\WINDOWS\Fonts\HGRME.ttc') # HG 明朝系
   plt.text(0, 0, u'御無礼\n一発です', fontproperties=fp, fontsize=60)
   #plt.show()

.. image:: /_static/mpl-fontprop.png
   :scale: 50%

Artists 関連
==================================================
* primitives: ``Line2D``, ``Rectangle``, ``Text``, ``AxesImage``, etc.
* containers: ``Axis``, ``Axes``, ``Figure``, etc.

コンテナを攻略していく。

* ``Axes`` はプロッティングエリア。
* ``Subplot`` は ``Axes`` の特別なもの。コード的にもサブクラスで表現されている。
* ``Patch`` というクラス名は MATLAB から受け継いだ。

* プロパティー一覧は ``matplotlib.artist.getp`` 関数で確認できる。

Figure (``matplotlib.figure.Figure``)
--------------------------------------------------
* ``Figure`` オブジェクトが "current axes" を管理している。
* ``Figure`` は（グラフのものではない）自身の座標系を持っていて、
  矩形の左下と右上がそれぞれ (0, 0), (1, 1) となっている。

  変な例だが、画像全体に対角線を一本引くにはこうする。

  .. code-block:: python

     import matplotlib as mpl
     import matplotlib.pyplot as plt
     fig = plt.figure()

     ax1 = fig.add_subplot(211)
     ax2 = fig.add_axes([0.1, 0.1, 0.7, 0.3])

     l1 = mpl.lines.Line2D([0, 1], [0, 1], transform=fig.transFigure, figure=fig)
     fig.lines.extend([l1])
     fig.canvas.draw()
     #plt.show()

  .. image:: /_static/mpl-figcs.png
     :scale: 50%

Axes (``matplotlib.axes.Axes``)
--------------------------------------------------
``Axes`` オブジェクトが図形・テキスト・目盛・グリッド・ラベル各オブジェクトを管理する。
まずコンテナーメンバーのうち、馴染みのあるものだけ表にまとめておく。

================  ==================================================
メンバー名        コンテナーの内容
================  ==================================================
``lines``         ``plot`` 等で作成した ``Line2D`` オブジェクト。
``patches``       各種 ``Patch`` オブジェクト。
                  ``Ellipse``, ``Polygon``, etc.
``texts``         ``text`` や ``annotate`` で作成した各種テキスト。
================  ==================================================

非コンテナーメンバーも少しだけ押さえておく。

================  ==================================================
メンバー名        コンテナーの内容
================  ==================================================
``patch``         ``Axes`` の背景用 ``Rectangle`` オブジェクト。
``xaxis``         ``XAxis`` オブジェクト。
``yaxis``         ``YAxis`` オブジェクト。
================  ==================================================

Axis (``matplotlib.axis.Axis``)
--------------------------------------------------
グラフの目盛、グリッド、目盛に付けるラベル等を管理する。
``Axes`` オブジェクトの ``xaxis`` および ``yaxis`` メンバーでアクセスできる。

使用頻度の高いものだけ表にしておく。

===================   ==================================================
メソッド名            機能
===================   ==================================================
``get_major_ticks``   目盛 (``matplotlib.ticker.Ticker``)
                      オブジェクトを返す。
``grid``              グリッド線を描画するしないを指示。
===================   ==================================================

.. code-block:: python

   import matplotlib.pyplot as plt
   ax = plt.gca()

   # Y 軸方向の全目盛をいじる。
   for tick in ax.yaxis.get_major_ticks():
       tick.tick1On = False   # 左側の目盛を隠す。
       tick.tick2On = True    # 右側の目盛を表示する。
       tick.label1On = False  # 左側の目盛ラベルを隠す。
       tick.label2On = True   # 右側の目盛ラベルを表示する。

バックエンド
==================================================
「プロッティングの出力先」と解釈していいか。

ユーザーインターフェイスバックエンドとハードコピーバックエンドの二種類がある。
前者はウィンドウ、後者はファイルと考えていいか。
それぞれ ``plt.show()`` と ``plt.savefig()`` の振る舞いに影響する。

ユーザーインターフェイスバックエンド
--------------------------------------------------
rc パラメーターでバックエンドを指定する。
:file:`matplotlibrc` に記述するのであれば、こんな感じになる：

.. code-block:: cfg

   # PyQt4 によるウィンドウでグラフを描く。
   # もちろん、PyQt4 が別途インストール済みであることが前提。
   backend : Qt4Agg

コードで動的に（実行時に）指定するのならばこうする。

.. code-block:: python

   import matplotlib as mpl
   mpl.use('Qt4Agg')

.. image:: /_static/mpl-qt4agg.png
   :scale: 50%

なお ``mpl.use`` 関数を呼び出すタイミングは、最初の ``import matplotlib``
の直後がベストのようだ。

個人的にはユーザーインターフェイスバックエンドをカスタマイズすることはない。
デフォルトの ``TkAgg`` のままで十分だ。

ハードコピーバックエンド
--------------------------------------------------
ハードコピーバックエンドのカスタマイズはこのノートの目的の一つ。

* ``backend`` の値を ``PS``, ``PDF``, ``PNG``, ``SVG`` のどれかにしておくと、
  その名前の形式のファイルを作成することができる。

  コードで実現するには、次のような手順にしておけばよい。

  .. code-block:: python

     import matplotlib as mpl
     mpl.use('PDF')  # PDF でイメージが欲しい。
     
     # ... プロッティングコマンド群がここに来る。
     
     plt.savefig('output')  # ファイル output.pdf ができる。

曲線を描く
==================================================

多項式
--------------------------------------------------
実数 x の多項式 f(x) について y = f(x) のグラフを描きたい。

* プロットする ``x`` のサンプル点を関数 ``numpy.arange`` で適宜準備する。
  やり方を忘れていたら :doc:`/python-numpy` を参照。

* 多項式 ``f`` を関数 ``numpy.poly1d`` の戻り値で表現する。

* プロットする ``y`` を ``list`` の内包表現を利用して一気に得る。

* 最後に ``plot(x, y)`` で曲線を描画する。
  
  .. code-block:: python
     
     import matplotlib as mpl
     import matplotlib.pyplot as plt
     import numpy as np
     
     f = np.poly1d([1, -4, 3])  # x = 1, 3 を根に持つ二次式。
     xs = np.arange(-2, 4, 0.1) # x in [-2, 4] を 0.1 刻みでプロット。
     ys = [f(x) for x in xs]    # xs と対になる ys
     plt.plot(xs, ys)           # current axes に曲線を一本追加。

* 曲線に対して接線を引きたい場合がよくある。
  上記 ``f`` の一次導関数を ``f.deriv()`` で得られるので、
  それをうまく使う。

  曲線上の点 (a, f(a)) の接線は、例えば次のようにしてプロットできる。

  .. code-block:: python

     # x = [-1, 3] から 1 間隔に接線を引く。
     slope = f.deriv()
     for a in xrange(-1, 3, 1):
         b = f(a)
         ys1 = [slope(a) * (x - a) + b for x in xs]
         ax1.plot(xs, ys1)

ベジエ曲線
--------------------------------------------------
本当は B-Spline 曲線を描画したいのだが、
調べてみると Matplotlib ではベジエ曲線が限界のようだ。

手順はこういう感じのようだ：
  
1. クラス ``matplotlib.path.Path`` のオブジェクトを作成する。
   この引数として、ベジエ曲線の制御点リストと「打点命令」のリストを渡す。

2. そのパスオブジェクトを引数として、クラス
   ``matplotlib.patches.PathPatch`` のオブジェクトを作成する。

3. そのパッチオブジェクトを対象の ``axes`` オブジェクトに ``add_patch`` する。

Path (``matplotlib.path.Path``)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Matplotlib は制御点列を与えてベジエ曲線を定義する流儀のようだ。

まずは簡単な例を。最小の手間で 2 次のベジエ曲線（単なる放物線）を定義することを考える。
``CURVE3`` というタイプの曲線は、制御点を 3 つ与えることで 2 次のベジエ曲線を表現できる。
``CURVE3`` ベースのベジエ曲線の特徴は次の通り。

* 最初と最後の制御点は、放物線の始点と終点にそれぞれ一致する。
* 中間の制御点は、放物線の両端点それぞれの接線の交点と一致する。
* よって、出来上がりの曲線形状が把握できる。

``Path`` オブジェクト構築までのコードの概形は次のようになる。

.. code-block:: python

   import matplotlib as mpl
   mpl.rcParams['patch.facecolor'] = 'none'
   import matplotlib.pyplot as plt
   from matplotlib.path import Path

   fig = plt.figure()
   ax1 = fig.add_subplot(111)

   # 2 次のベジエ曲線を定義する。
   verts = [(0., 0.), (2., 4.), (4., 0.)]
   codes = [Path.MOVETO, Path.CURVE3, Path.CURVE3]
   path = Path(verts, codes)

もうひとつ例を。ドロー系アプリでもよく見かける 3 次のベジエ曲線を定義する。

* ``CURVE4`` 命令で制御点を指示する。
* 最初と最後の制御点は、曲線の始点と終点にそれぞれ一致する。
* 最初の制御点とその次の制御点を結ぶ直線が、曲線の始点での接線に一致する。
  また、最後の制御点とその前の制御点を結ぶ直線が、曲線の終点での接線に一致する。
* 曲線全体は、制御点列からなる多角形の内部に位置する。

``Path`` オブジェクト構築の概形は次のようになる。

.. code-block:: python

   # 3 次のベジエ曲線を定義する。
   verts = [(0., 0.), (0.5, 3.5), (1., 4.), (4., 0.)]
   codes = [Path.MOVETO, Path.CURVE4, Path.CURVE4, Path.CURVE4,]
   path = Path(verts, codes)

サンプル
---------
上記のコードに加え、制御点ポリゴンを描画した画像をノートに貼り付けておく。

.. image:: /_static/mpl-bezier.png
   :scale: 50%

PathPatch (``matplotlib.patches.PathPatch``)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
``Path`` オブジェクトができたら ``PathPatch`` オブジェクトに包んで
``Axes`` オブジェクトに追加する。これで曲線も描画してくれる。

.. code-block:: python

   # ...
   import matplotlib.patches as patches
   # ...
   patch = patches.PathPatch(path)
   ax1.add_patch(patch)

TeX 表現
==================================================
.. warning::

   このノートにある外部実行ファイルを利用する機能各種の動作はほとんど確認していない。
   MiKTeX をインストールしたら即実験する。

* Matplotlib のすべてのテキスト API は TeX の数式を受け付けてくれる。
  ``$`` で囲まれた部分が TeX 表現と認識されるようだ。
  文字列はバックスラッシュの嵐になることが予想できるので、
  raw string 形式で指定するのが吉。

  .. code-block:: python

     plt.text(60, .025, r'$\mu=100,\ \sigma=15$')

* TeX 部分のテキストに適用するデフォルトのフォントを
  rc 設定の ``mathtext.default`` パラメーターで指定できる。

* TeX テキストのレイアウトは通常 Matplotlib が内部で自前で持っているエンジンが行うが、
  rc 設定を変更することで、外部の LaTeX エンジンを利用することもできる。

  * ``text.usetex`` が ``True`` になっていることが必要。
  * LaTeX, dvipng, GhostScript がシステムにインストールされていることが必要。
  * それらの実行ファイルのパスが環境変数 ``PATH`` に含まれていることが必要。

続・環境構築
==================================================
Matplotlib を利用するための環境をもっと細かく整備してみよう。

:file:`$HOME/.matplotlib/matplotlibrc`
--------------------------------------------------
ファイル名からわかるように、Matplotlib 環境のユーザー設定ファイルだ。
ドキュメントのセクション 5.1 "The matplotlibrc file" に詳しく記述がある。

* Windows 環境でもユーザーがわざわざ環境変数 ``HOME`` を設定している場合は、
  Matplotlib はきちんとそのパスを参照してくれる。

* 一度でも Matplotlib を利用すると、
  ``$HOME`` にフォルダー :file:`.matplotlib` ができている。
  そこにテキストファイル :file:`matplotlibrc` を作成する。

* テンプレは :file:`$PYTHONHOME/lib/site-packages/matplotlib/mpl-data/matplotlibrc` を使う。

  テンプレは基本的に設定コマンド？のコメントアウトで埋め尽くされている。
  ここを眺めていればカスタマイズの方法は直感できる仕組みになっている。

* :file:`matplotlibrc` は python-mode で編集するのが吉。

.. _Python: http://www.python.org/
.. _Matplotlib: http://matplotlib.sourceforge.net/
.. _setuptools: http://peak.telecommunity.com/DevCenter/setuptools
.. _Numpy: http://scipy.org/NumPy/
.. _PIL: http://www.pythonware.com/products/pil
.. _Sphinx: http://sphinx.pocoo.org/
