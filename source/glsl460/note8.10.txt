8.10. Atomic Counter Functions
----------------------------------------------------------------------

この節の不可分カウンター操作は、互いに不可分に操作する。
つまり、あるシェーダー実体化のどの特定のカウンターに対するこれらの操作は、
別のシェーダー実体化の同じカウンターに対するこれらのどの操作とも不可分だ。
これらの操作がカウンターへの他のアクセス方法に対して不可分であることや、
別々のカウンターに適用されたときに直列化されることは保証されない。
このような場合、不可分性や直列性を求めるならば、柵や障壁、
あるいは他の形式の同期を追加的に使用する必要がある。

内在するカウンターは 32 ビットの符号なし整数だ。演算の結果は
:math:`{[0, 2^{32}-1]}` に折り返される。

.. glossary::

   ``uint atomicCounterIncrement(atomic_uint c)``
       不可分に

       1. ``c`` に対するカウンターをインクリメントして
       2. インクリメント操作に先立ってその値を返す。

       これら二つのステップは、この節の不可分カウンター関数に関しては不可分に行われる。

   ``uint atomicCounterDecrement(atomic_uint c)``
       上記関数のデクリメント版。

   ``uint atomicCounter(atomic_uint c)``
      ``c`` に対するカウンター値を返す。

   ``uint atomicCounterAdd(atomic_uint c, uint data)``
       不可分に

       1. ``c`` に対するカウンターに ``data`` を加算して
       2. その演算に先立ってその値を返す。

       これら二つのステップは、この節の不可分カウンター関数に関しては不可分に行われる。

   ``uint atomicCounterSubtract(atomic_uint c, uint data)``
       上記関数の減算版。

   ``uint atomicCounterMin(atomic_uint c, uint data)``
       不可分的に

       1. ``c`` に対するカウンターを、カウンターの値と ``data`` の値の最小値に設定して
       2. 演算に先立ってその値を返す。

       これら二つのステップは、この節の不可分カウンター関数に関しては不可分に行われる。

   ``uint atomicCounterMax(atomic_uint c, uint data)``
       上記関数の最大値版。

   ``uint atomicCounterAnd(atomic_uint c, uint data)``
       不可分的に

       1. ``c`` に対するカウンターを、カウンターの値と ``data`` の値のビットごと
          の論理積にセットして
       2. 演算に先立ってその値を返す。

       これら二つのステップは、この節の不可分カウンター関数に関しては不可分に行われる。

   ``uint atomicCounterOr(atomic_uint c, uint data)``
       上記関数の論理和版。

   ``uint atomicCounterXor(atomic_uint c, uint data)``
       上記関数の排他的論理和版。

   ``uint atomicCounterExchange(atomic_uint c, uint data)``
       不可分的に

       1. ``c`` に対するカウンター値を ``data`` の値にセットして
       2. 演算に先立ってその値を返す。

       これら二つのステップは、この節の不可分カウンター関数に関しては不可分に行われる。

   ``uint atomicCounterCompSwap(atomic_uint c, uint compare, uint data)``
       不可分的に

       1. ``compare`` の値と ``c`` に対するカウンター値を比較し、
       2. 値が等しければ ``c`` に対するカウンター値を ``data`` の値にセットして
       3. 演算に先立ってその値を返す。

       これら三つのステップは、この節の不可分カウンター関数に関しては不可分に行われる。

8.11. Atomic Memory Functions
----------------------------------------------------------------------

不可分記憶関数はバッファーオブジェクトまたは共有変数格納に格納された個々の符号あり
または符号なしの整数に対して不可分な操作を行う。
すべての不可分記憶操作は、メモリーから値を読み取り、以下に述べる操作のいずれかを
使用して新しい値を計算し、新しい値をメモリーに書き込み、読み取った元の値を返す。
不可分操作によって更新されるメモリーの内容は、元の値が読み込まれてから新しい値が
書き込まれるまでの間、シェーダーの呼び出しにおける他の割り当てや不可分記憶関数
によって変更されないことが保証されている。

不可分記憶関数は限られた変数の集合に対してしかサポートされていない。
不可分記憶関数の ``mem`` 引数に渡された値が、バッファーや共有変数に対応していない場合、
シェーダーのコンパイルに失敗する。不可分記憶関数の ``mem`` 引数に配列の要素や
ベクトルの単一成分を渡しても、そのもとになる配列やベクトルがバッファーや共有変数
である限りは問題ない。

この節の組み込み関数はすべて、プロトタイプに記載されていないにもかかわらず、
``restrict``, ``coherent``, ``volatile`` 記憶修飾の組み合わせを持つ引数を受け入れる。
不可分操作は、組み込み関数の仮引数の記憶修飾ではなく、呼び出した引数のそれに
よって要求されたとおりに動作する。

.. glossary::

   ``uint atomicAdd(inout uint mem, uint data)``
   ``int atomicAdd(inout int mem, int data)``
       ``mem`` の内容に ``data`` の値を加えて新しい値を計算する。

   ``uint atomicMin(inout uint mem, uint data)``
   ``int atomicMin(inout int mem, int data)``
       ``data`` の値と ``mem`` の内容の最小値を取って新しい値を計算する。

   ``uint atomicMax(inout uint mem, uint data)``
   ``int atomicMax(inout int mem, int data)``
       上記の最大値版。

   ``uint atomicAnd(inout uint mem, uint data)``
   ``int atomicAnd(inout int mem, int data)``
       ``data`` の値と ``mem`` の内容をビットごとに論理積をとることで新しい値を計算する。

   ``uint atomicOr(inout uint mem, uint data)``
   ``int atomicOr(inout int mem, int data)``
       上記関数の論理和版。

   ``uint atomicXor(inout uint mem, uint data)``
   ``int atomicXor(inout int mem, int data)``
       上記関数の排他的論理和版。

   ``uint atomicExchange(inout uint mem, uint data)``
   ``int atomicExchange(inout int mem, int data)``
       ``data`` の値を単にコピーして新しい値を計算する。

   ``uint atomicCompSwap(inout uint mem, uint compare, uint data)``
   ``int atomicCompSwap(inout int mem, int compare, int data)``
       ``compare`` の値と ``mem`` の内容を比較する。
       値が等しい場合、新しい値は ``data`` で与えられ、
       そうでない場合は ``mem`` の元の内容から取得される。

8.12. Image Functions
----------------------------------------------------------------------

画像基本型のいずれかを使用する変数は、この節で定義する組み込みシェーダーの
画像記憶関数によって、テクスチャーの個々のテクセルを読み書きするために使用する
ことができる。
各画像変数は、テクスチャー画像が取り付けられている画像単位を参照する。

画像メモリーがアクセスメモリー以下の機能を持つ場合、
画像中の個々のテクセルは ``P`` の値に対応する ``(i)``, ``(i, j)``, ``(i, j, k)``
のどれかの座標を用いて識別される。
多重標本テクスチャーに対応する ``image2DMS`` および ``image2DMSArray`` 変数
（およびそれに対応する ``int``/``unsigned int`` 型）では、
各テクセルが複数の標本を持つことがあり、個々の標本は整数の ``sample`` 引数を
使って識別される。
座標と標本番号は OpenGL 仕様の 8.26 "Texture Image Loads and Stores" に
記述されている方法で個々のテクセルを選択するのに使用される。

ロードと格納は浮動小数点数、整数、符号なし整数型をサポートする。
下にあるデータ型のうち ``gimage`` で始まるものは、
前節の ``"gvec"`` や ``"gsampler"`` と同様に、
``"image"``, ``"iimage"``, ``"uimage"`` のいずれかで始まる型を意味する
プレースホルダーを果たす。

以下のプロトタイプの ``IMAGE_PARAMS`` は 33 個の別々の関数を表すプレースホルダーで、
それぞれが異なる型の画像変数に対応する。
``IMAGE_PARAMS`` のプレースホルダーは、以下の引数リストのいずれかで置き換えられる：

.. code:: glsl

   (gimage2D image, ivec2 P)
   (gimage3D image, ivec3 P)
   (gimageCube image, ivec3 P)
   (gimageBuffer image, int P)
   (gimage2DArray image, ivec3 P)
   (gimageCubeArray image, ivec3 P)
   (gimage1D image, int P)
   (gimage1DArray image, ivec2 P)
   (gimage2DRect image, ivec2 P)
   (gimage2DMS image, ivec2 P, int sample)
   (gimage2DMSArray image, ivec3 P, int sample)

ここで、各行は三種類の画像変数型のいずれかを表し、
``image``, ``P``, ``sample`` は操作する個々のテクセルを指定する。
``image``, ``P``, ``sample`` から操作する個々のテクセルを特定する方法、
およびテクセルの読み書き方法は、OpenGL 仕様 8.26 "Texture Image Loads and Store"
で規定されている。

不可分関数は、画像変数の個々のテクセルまたは標本に対して操作を行う。
不可分記憶操作は、選択されたテクセルから値を読み取り、後述する操作のいずれかを
使用して新しい値を計算し、選択されたテクセルに新しい値を書き込み、読み取った元の値を返す。
不可分操作によって更新されるテクセルの内容は、元の値が読み込まれてから新しい値が
書き込まれるまでの間に、他の画像格納や不可分関数によって変更されないことが保証される。

不可分記憶操作は、すべての画像変数型の部分集合にしか対処しない。
``image`` は以下のいずれかでなければならない：

* 符号あり整数画像変数（型が ``"iimage"`` で始まる）で、フォーマット修飾子が ``r32i`` であり、
  ``int`` 型の ``data`` 引数で使用される。
* 符号なし整数画像変数（型が ``"uimage"`` で始まる）で、フォーマット修飾子が ``r32ui`` であり、
  ``uint`` 型の ``data`` 引数で使用される。
* 浮動小数点数画像変数（型がは ``"image"`` で始まる）で、フォーマット修飾子が ``r32f`` であり、
  ``float`` 型の ``data`` 引数で使用される。
  該当するのは ``imageAtomicExchange`` しかない。

この節の組み込み関数はすべて、プロトタイプに記載されていないにもかかわらず、
``restrict``, ``coherent``, ``volatile`` 記憶修飾の組み合わせを持つ引数を受け入れる。
画像操作は、組み込み関数の仮引数の記憶修飾ではなく、呼び出した引数のそれによって
要求されたとおりに動作する。

.. glossary::

   ``int imageSize(readonly writeonly gimage1D image)``, etc.
       画像の寸法または ``image`` に束縛された画像の寸法を返す。
       配列された画像の場合、戻り値の最後の成分に配列のサイズが格納される。
       キューブ画像の場合は、一つの面の寸法と、
       配列されている場合はキューブマップ配列内のキューブの数しか返さない。
       注意: ``readonly writeonly`` という修飾語は、
       ``readonly`` と ``writeonly`` の両方で修飾された変数か、またはどちらの
       修飾もない変数を受け入れる。
       これは、仮引数が背後にあるメモリーの読み取りにも書き込みにも使用されない
       ことを意味する。

   ``int imageSamples(readonly writeonly gimage2DMS image)``
   ``int imageSamples(readonly writeonly gimage2DMSArray image)``
       画像または ``image`` に束縛されている画像の標本数を返す。

   ``gvec4 imageLoad(readonly IMAGE_PARAMS)``
       画像単位 ``image`` から座標 ``P`` のテクセルをロードする。
       多重標本ロードの場合、標本番号は ``sample`` で与えられる。
       ``image``, ``P``, ``sample`` で有効なテクセルが特定されると、
       メモリー上で選択されたテクセルを表すビットは、
       OpenGL 仕様 8.26 "Texture Image Loads and Stores" で記述されている方法で、
       ``vec4``, ``ivec4``, ``uvec4`` に変換されて返される。

   ``void imageStore(writeonly IMAGE_PARAMS, gvec4 data)``
       ``image`` で指定された画像の座標 ``P`` のテクセルに ``data`` を格納する。
       多重標本格納の場合、標本番号を ``sample`` で指定する。
       ``image``, ``P``, ``sample`` で有効なテクセルが特定されると、
       データを表現するためのビットは、
       OpenGL 仕様 8.26 "Texture Image Loads and Stores" で記述されている方法で
       画像単位のフォーマットに変換され、指定されたテクセルに格納される。

   ``uint imageAtomicAdd(IMAGE_PARAMS, uint data)``
   ``int imageAtomicAdd(IMAGE_PARAMS, int data)``
       選択されたテクセルの内容に ``data`` の値を加算して新しい値を計算する。

   ``uint imageAtomicMin(IMAGE_PARAMS, uint data)``
   ``int imageAtomicMin(IMAGE_PARAMS, int data)``
       選択されたテクセルの内容と ``data`` の値との最小値を取ることで、新しい値
       を計算する。

   ``uint imageAtomicMax(IMAGE_PARAMS, uint data)``
   ``int imageAtomicMax(IMAGE_PARAMS, int data)``
       上記関数の最大値版。

   ``uint imageAtomicAnd(IMAGE_PARAMS, uint data)``
   ``int imageAtomicAnd(IMAGE_PARAMS, int data)``
       選択されたテクセルの内容と ``data`` の値とをビットごとに論理積をとること
       により、新しい値を計算する。

   ``uint imageAtomicOr(IMAGE_PARAMS, uint data)``
   ``int imageAtomicOr(IMAGE_PARAMS, int data)``
       上記関数の論理和版。

   ``uint imageAtomicXor(IMAGE_PARAMS, uint data)``
   ``int imageAtomicXor(IMAGE_PARAMS, int data)``
       上記関数の排他的論理和版。

   ``uint imageAtomicExchange(IMAGE_PARAMS, uint data)``
   ``int imageAtomicExchange(IMAGE_PARAMS, int data)``
   ``float imageAtomicExchange(IMAGE_PARAMS, float data)``
       ``data`` の値を単にコピーして新しい値を計算する。

   ``uint imageAtomicCompSwap(IMAGE_PARAMS, uint compare, uint data)``
   ``int imageAtomicCompSwap(IMAGE_PARAMS, int compare, int data)``
       選択されたテクセルと ``compare`` の値と内容を比較する。
       値が等しい場合は新しい値が ``data`` で与えられ、
       そうでない場合はテクセルから読み込まれた元の値から取得される。

8.13. Geometry Shader Functions
----------------------------------------------------------------------

これらの機能は、幾何シェーダーでしか利用できない。

.. glossary::

   ``void EmitStreamVertex(int stream)``
       出力変数の現在の値を ``stream`` の現在の出力基本形状に放出する。
       ``stream`` 実引数は定整数でなければならない。
       この呼び出しから戻ると、出力変数すべての値は未定義だ。
       複数の出力ストリームがサポートされている場合にしか使用できない。

   ``void EndStreamPrimitive(int stream)``
       ``stream`` の現在の出力基本形状を完了し、新しいものを開始する。
       ``stream`` 実引数は定整数式でなければならない。頂点は放出されない。
       複数の出力ストリームがサポートされている場合にしか使用できない。

   ``void EmitVertex()``
       出力変数の現在の値を、現在の出力基本形状に出力する。
       複数の出力ストリームがサポートされている場合、これは ``EmitStreamVertex(0)``
       を呼び出すことと等価だ。
       この呼び出しから戻ると、出力変数の値は未定義だ。

   ``void EndPrimitive()``
       現在の出力基本形状を完了し、新しいものを開始する。
       複数の出力ストリームがサポートされている場合、これは ``EndStreamPrimitive(0)``
       を呼び出すことと等価だ。
       頂点は放出されない。

関数 ``EmitStreamVertex()`` は頂点が完成したことを指定する。
頂点は、ストリームに関連付けられた組み込みおよびユーザー定義の出力変数すべての
現在の値を使用して、頂点ストリーム ``stream`` の現在の出力基本形状に追加される。
``EmitStreamVertex()`` 呼び出し後は、出力ストリームすべてに対する出力変数すべての
値が未定義だ。
幾何シェーダー呼び出しが、出力レイアウト修飾子 ``max_vertices`` で許可されている
以上の頂点を放出していた場合、
``EmitStreamVertex()`` 呼び出しの結果は未定義となる。

関数 ``EndStreamPrimitive()`` は、頂点ストリームの現在の出力基本形状が完了し、
その後の ``EmitStreamVertex()`` によって（同型の）新しい出力基本形状が開始する
ことを指定する。
この関数は頂点を放出しない。
出力レイアウトが ``points`` と宣言されている場合、
``EndStreamPrimitive()`` の呼び出しはオプションだ。

幾何シェーダーは、ストリームそれぞれについて頂点のない出力基本形状の状態から始まる。
幾何シェーダーが停止すると、ストリームそれぞれの現在の出力基本形状が自動的に完成する。
幾何シェーダーが単一の基本形状しか書き込まないならば ``EndStreamPrimitive()``
を呼び出す必要はない。

複数出力ストリームは出力基本形状型が ``points`` と宣言されている場合に限り対処される。
``EmitStreamVertex()`` や ``EndStreamPrimitive()`` を呼び出す幾何シェーダーが
プログラムに含まれていて、その出力基本形状型が ``points`` でない場合は、
コンパイルエラーまたはリンクエラーとなる。

8.14. Fragment Processing Functions
----------------------------------------------------------------------

フラグメント処理機能はフラグメントシェーダーでしか利用できない。

8.14.1. Derivative Functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

微分は計算的に高く付き、数値的に不安定な場合がある。
そのため、実装では、高速だが完全には正確ではない導関数の計算を使用して、
真の微分係数を近似することにしても構わない。非一様な制御フローでは、微分は未定義だ。

微分に期待される動作は、右・左微分を使って指定される。

.. admonition:: コメント

   ここに定義式が MathJax で定義されている。
   式 (1a) と (1b) が右微分係数、(2a) と (2b) が左微分係数の近似式に読める。
   本文参照。

単標本ラスタライズの場合、式 (1b)と (2b) で :math:`{\dd{x} \le 1.0}.`
多重標本ラスタライズの場合、式 (1b)と (2b) で :math:`{\dd{x} \le 2.0}.`

:math:`{\dd{F}\dd{y}}` も同様に近似される。

多重標本ラスタライズでは、任意のフラグメントまたは標本に対して、隣接する
フラグメントまたは標本を考慮することができる。

典型的な例としては、2x2の正方形のフラグメントまたは標本を考慮し、
行ごとに独立した ``dFdxFine`` と列ごとに独立した ``dFdyFine`` を計算する一方で、
2x2 の正方形全体に対しては、単一の ``dFdxCoarse`` と単一の ``dFdyCoarse`` しか
計算しないというものがある。
したがって、すべての二次の粗い導関数、
たとえば ``dFdxCoarse(dFdxCoarse(x))`` は、非線形の引数であっても 0 になる可能性
がある。
しかし、二次微分、例えば ``dFdxFine(dFdyFine(x))`` は、
2x2 正方形内で計算された独立した微分の差を適切に反映する。

この方法は、スクリーン座標ではなく、ウィンドウ座標によって変わるという制約のもと、
フラグメントごとに異なっていても構わない。
OpenGL 仕様 14.2 "Invariance" に記述されている不変性の要件は、微分計算では緩和されているが、
これはメソッドがフラグメント位置の関数である可能性があるためだ。

一部の実装では、GL ヒント（OpenGL 仕様 21.4 "Hints" 参照）を与えることで、
``dFdx`` および ``dFdy`` の微分精度を変化させ、ユーザーが画質と速度のトレードオフ
を行えるようにしている。
これらのヒントは ``dFdxCoarse``, ``dFdyCoarse``, ``dFdxFine``, ``dFdyFine``
には影響しない。

.. glossary::

   ``genFType dFdx(genFType p)``
       ``dFdxFine(p)`` または ``dFdxCoarse(p)`` のいずれかを返す。
       これは実装上の選択に基づいており、おそらくどちらか速い方、
       または品質と速度のヒントを通じて API が選択する方によって行われる。

   ``genFType dFdy(genFType p)``
       上記の ``y`` 版。

   ``genFType dFdxFine(genFType p)``
       ウィンドウ ``x`` 座標に関する ``p`` の偏微分を返す。
       現在のフラグメントとそのすぐ隣のフラグメントの ``p`` の値に基づいて、
       局所差分を使用する。

   ``genFType dFdyFine(genFType p)``
       上記の ``y`` 版。

   ``genFType dFdxCoarse(genFType p)``
       ウィンドウ ``x`` 座標に対する ``p`` の偏微分を返す。
       現在のフラグメントの隣接する部分の ``p`` の値に基づいて局所的な差分をとり、
       現在のフラグメントの ``p`` の値を含める場合もあるが、必ずしもそうはしない。
       つまり、与えられた領域では、実装は ``dFdxFine(p)`` で許容されるよりも
       少なく一意的な位置で微分を計算することができる。

   ``genFType dFdyCoarse(genFType p)``
       上記の ``y`` 版。

   ``genFType fwidth(genFType p)``
       ``abs(dFdx(p)) + abs(dFdy(p))`` を返す。

   ``genFType fwidthFine(genFType p)``
       ``abs(dFdxFine(p)) + abs(dFdyFine(p))`` を返す。

   ``genFType fwidthCoarse(genFType p)``
       ``abs(dFdxCoarse(p)) + abs(dFdyCoarse(p))`` を返す。

8.14.2. Interpolation Functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

組み込み補間関数は、シェーダー指定の ``(x, y)`` 位置でフラグメントシェーダーの
入力変数の補間値を計算するために利用できる。
組み込み関数を呼び出すたびに別の ``(x, y)`` 位置が使用され、
それらの位置は入力の既定値を生成するために使用される既定の ``(x, y)`` 位置とは
異なる場合がある。

すべての補間関数において ``interpolant`` は ``in`` 宣言の左辺値でなければならない。
``in`` 宣言には、変数、ブロックまたは構造体のメンバー、配列要素、またはこれらの
組み合わせが含まれる。
さらに、成分選択演算子 (``.xy``, ``.xxz``, etc.) を ``interpolant`` に適用する
ことができる。
この場合、補間関数は ``interpolant`` の値に成分選択演算子を適用した結果を返す。
例えば ``interpolateAt(v.xxz)`` は ``interpolateAt(v).xxz`` を返すように定義
されている。
配列された入力は、一般的な（非一様）整数表現でインデックスを付けることができる。

``interpolant`` が ``flat`` 修飾子付きで宣言されている場合、
補間された値は単一基本形状に対してどこでも同じ値になる。
そのため、補間に使用される位置は影響せず、関数は同じ値を返すだけだ。
``interpolant`` が ``centroid`` 修飾子付きで宣言されている場合、
``interpolateAtSample()`` と ``interpolateAtOffset()`` が返す値は、
通常 ``centroid`` 修飾子で使われる位置を無視して、指定された位置で評価される。
``interpolant`` が ``noperspective`` 修飾子付きで宣言された場合、
補間された値は遠近法補正なしで計算される。

.. glossary::

   ``float interpolateAtCentroid(float interpolant)``, etc.
       処理されている画素と基本形状の両方の内側の位置で採取された入力
       ``interpolant`` 関数の値を返す。
       得られる値は、修飾子 ``centroid`` を付けて宣言された場合、入力変数に
       割り当てられた値と同じになる。

   ``float interpolateAtSample(float interpolant, int sample)``, etc.
       標本番号 ``sample`` の位置にある入力 ``interpolant`` 変数の値を返す。
       多重標本バッファーが利用できない場合、入力変数は画素の中心で評価される。
       標本 ``sample`` が存在しない場合、入力変数の補間に使用される位置は未定義だ。

   ``float interpolateAtOffset(float interpolant, vec2 offset)``, etc.
       ``offset`` で指定された画素の中心からのオフセットで採取された入力
       ``interpolant`` の値を返す。
       ``offset`` の浮動小数点成分二つは、それぞれ ``x`` 方向と ``y`` 方向の
       画素単位のオフセットを表す。

       オフセットが ``(0, 0)`` の場合は画素の中心を表す。
       この関数が対処するオフセットの範囲と粒度は実装依存だ。

8.15. Noise Functions
----------------------------------------------------------------------

ノイズ関数 ``noise1``，``noise2``，``noise3``，``noise4`` は GLSL 4.4 以降
非推奨となった。
SPIR-V を生成していない場合、これらの関数は 0.0 または
すべての成分が 0.0 であるベクトルを返すように定義される。
SPIR-V を生成する際には、ノイズ関数は宣言されておらず、使用することはできない。

以前のリリースと同様に、ノイズ関数はコンパイル時定数式とは意味的にみなされない。

.. glossary::

   ``float noise1(genFType x)``
   ``vec2 noise2(genFType x)``
   ``vec3 noise3(genFType x)``
   ``vec4 noise4(genFType x)``
       入力値 ``x`` に基づいて 1, 2, 3, 4 次元のノイズ値をそれぞれ返す。

8.16. Shader Invocation Control Functions
----------------------------------------------------------------------

シェーダー呼び出し制御機能は、多角形分割制御シェーダーと計算シェーダでしか利用可能でない。
これは、パッチ（多角形分割制御シェーダーの場合）または作業ループ（計算シェーダーの場合）
を処理するために使用される複数のシェーダー呼び出しの相対的な実行順序を制御する
ために使用される。他の方法では相対的な順序が未定義のまま実行される。

.. glossary::

   ``void barrier()``
       ``barrier()`` の任意の静的インスタンスでは、単一の入力パッチに対する
       多角形分割制御シェーダの呼び出しすべてが、それを越えて継続することが許可
       される前にそれ（障壁）に入らなければならない。
       または単一の作業グループに対する計算シェーダーの呼び出しすべてが、
       それを越えて継続する前にそれに入らなければならない。

関数 ``barrier()`` はシェーダー呼び出し間の実行の部分的に定義された順序を与える。
これにより、ある種のメモリーアクセスでは、
``barrier()`` のある静的インスタンスの前にある呼び出しによって書き込まれた値が、
同じ ``barrier()`` の静的インスタンスの呼び出しの後にある他の呼び出しによって
安全に読み取られることが保証される。
これらの障壁呼び出しの間では、呼び出しが未定義の順序で実行される可能性があるため、
多角形分割制御シェーダーの頂点単位またはパッチ単位出力変数の値、
あるいは計算シェーダーの ``shared`` 変数の値は、
:ref:`4.3.6. Output Variables` （多角形分割制御シェーダーの場合）
および :ref:`4.3.8. Shared Variables`
（計算シェーダー用の場合）に挙げられているいくつかのケースで未定義となる。

多角形分割制御シェーダーの場合、関数 ``barrier()`` はシェーダーの関数
``main()`` の中にしか置くことができず、どの制御フローの中でも呼び出すことができない。
関数 ``main()`` 内の ``return`` 文の後に障壁を置くこともまた許されない。
誤って配置された障壁はコンパイルエラーを引き起こす。

``barrier()`` は制御フローに影響を与えるが、
共有変数と多角形分割制御の出力変数へのメモリアクセスを同期させるに過ぎない。
その他のメモリーアクセスについては、ある静的な ``barrier()`` のインスタンスに先立つ
呼び出しによって書き込まれた値が、同じ静的な ``barrier()`` のインスタンスの
呼び出しの後にある他の呼び出しによって安全に読み取られることを保証するものではない。
これを達成するには ``barrier()`` とメモリー障壁の両方を使用する必要がある。

計算シェーダーでは、関数 ``barrier()`` を制御フローの中に置くことができるが、
その制御フローは一様制御フローでなければならない。
つまり、障壁の実行に導かれるすべての制御式は動的一様な式でなければならない。
これにより、シェーダーの呼び出しの何かが条件文に入る場合、呼び出しすべてが
条件文に入ることになる。
コンパイラーは、このようなことが起こらないかもしれないと検知できる場合には、
警告を出すことが推奨されていますが、コンパイラーがこれを完全に判断することはできない。
したがって、 ``barrier()`` が一様制御フローの中にしか存在しないようにするのは作者の責任だ。
そうしないと、いくつかのシェーダー呼び出しは、他の呼び出しでは決して到達しない障壁を待機して
いつまでも動かないままになる。

8.17. Shader Memory Control Functions
----------------------------------------------------------------------

単一のシェーダー呼び出しの中では、その呼び出しによる書き込みの可視性と順序は
明確に定義されている。
しかし、複数の別々のシェーダー呼び出しによる単一の共有メモリーアドレスへの
読み書きの相対的な順序は、ほとんど定義されていない。
さらに、単一のシェーダ呼び出しによって実行される複数のメモリーアドレスへの
アクセスの順序も、他のシェーダー呼び出しによって観察されるため、未定義だ。

以下の組み込み関数を使って、読み書きの順序を制御することができる：

.. glossary::

   ``void memoryBarrier()``
       単一シェーダー呼び出しが発行するメモリートランザクションの順序を制御する。

   ``void memoryBarrierAtomicCounter()``
       単一シェーダー呼び出しが発行する不可分カウンター変数へのアクセスの順序を
       制御する。

   ``void memoryBarrierBuffer()``
       単一シェーダー呼び出し内で発行されたバッファー変数へのメモリートランザクション
       の順序を制御する。

   ``void memoryBarrierShared()``
       同じ作業グループ内の他の呼び出しから見て、単一シェーダー呼び出し内で発行された
       共有変数へのメモリートランザクションの順序を制御する。
       計算シェーダーでのみ使用可能。

   ``void memoryBarrierImage()``
       単一シェーダー呼び出し内で発行された画像に対するメモリートランザクション
       の順序を制御する。

   ``void groupMemoryBarrier()``
       同じ作業グループ内の他の呼び出しから見て、単一シェーダー呼び出し内で発行
       されたすべてのメモリートランザクションの順序を制御する。
       計算シェーダでのみ使用可能。

メモリ障壁の組み込み関数は、他のシェーダー呼び出しがアクセス可能なメモリーに格納
された変数への読み書きを順番に行うために使用できる。
これらの関数は、呼び出されると、選択された変数型にアクセスする呼び出し元が以前に
実行したすべての読み書きの完了を待機して、その後は何の影響も受けずに戻る。
組み込み関数 ``memoryBarrierAtomicCounter()``, ``memoryBarrierBuffer()``,
``memoryBarrierImage()``, ``memoryBarrierShared()`` は、
それぞれ不可分カウンター、バッファー、画像、共有変数へのアクセスの完了を待機する。
組み込み関数 ``memoryBarrier()`` および ``groupMemoryBarrier()`` は、
上記のすべての変数型へのアクセスの完了を待機する。
``memoryBarrierShared()`` と ``groupMemoryBarrier()`` は計算シェーダーでのみ
使用可能で、その他の関数はすべてのシェーダー型で使用可能だ。

これらの関数が戻ってくると、呼び出しに先立って ``coherent`` 変数を使って実行された
メモリー格納の効果は、将来、他のシェーダー呼び出しによって同じメモリーに
coherent access が行われても、それが見えるようになる [#f1]_。
特に、あるシェーダーの段階でこのように書き込まれた値は、
後続の段階のシェーダー呼び出しによって実行された coherent memory access に対して、
それらの呼び出しが元のシェーダー呼び出しの実行によって引き起こされた場合には見えることが保証されている。
例えば、特定の幾何シェーダー呼び出しに起因する基本形状に対してのフラグメントシェーダー呼び出しなど。

.. rubric:: Footnotes

.. [#f1] 格納とロードの間に happens-before 関係が成立する場合にのみ、アクセスは将来のアクセスとなる。

さらに、メモリー障壁機能は、他のシェーダー呼び出しから観察されるように、
呼び出した呼び出しが実行する格納所を順序付ける。
メモリー障壁がなければ、一つのシェーダー呼び出しが coherent 変数に二つの格納を
実行すると、二番目のシェーダー呼び出しは、二番目の格納によって書き込まれた値を、
一番目の格納によって書き込まれた値よりも先に見るかもしれない。
しかし、最初のシェーダー呼び出しが二つの格納の間にメモリー障壁関数を呼び出した場合、
選択された他のシェーダー呼び出しは、最初の格納の結果を見る前に二番目の格納の結果
を見るようなことはない。
``groupMemoryBarrier()`` または ``memoryBarrierShared()`` 関数を使用する場合、
この順序保証は同じ計算シェーダー作業グループ内の他のシェーダー呼び出しにしか適用されず、
他のすべてのメモリー障壁関数は他のすべてのシェーダ呼び出しに保証を与える。
メモリー格納を実行する起動が観測するメモリー格納の順序を保証するのにメモリ障壁は
必要ない。以前に書き込んだ変数を読み出す呼び出しは、他のシェーダー起動が同じメモリーに
書き込まない限り、常に最後に書き込まれた値を見ることになる。

.. admonition:: コメント

   この節は特に意味が解らない。

8.18. Subpass-Input Functions
----------------------------------------------------------------------

サブパス入力関数は Vulkan フラグメント段階を対象にしている場合のみ利用可能だ。

サブパス入力は次の組み込み関数で読み込まれる。
再び ``g`` は文字なし、``i``, ``u`` のいずれかのプレースホルダーであって、
浮動小数点、符号付き整数、符号なし整数のいずれかを示すものとする。
これらは引数の型と戻り値の型が一致しなければならない：

.. glossary::

   ``gvec4 subpassLoad(gsubpassInput subpass)``
   ``gvec4 subpassLoad(gsubpassInputMS subpass, int sample)``
       サブパス入力から現在のフラグメント座標の暗黙の位置 ``(x, y, layer)``
       を読み取る。

8.19. Shader Invocation Group Functions
----------------------------------------------------------------------

OpenGL Shading Language の実装では、単一シェーダー段階に対する複数のシェーダー
呼び出しを、オプションで単一 SIMD 呼び出しグループにグループ化することができ、
呼び出しは未定義の実装依存の方法でグループに割り当てられる。
このような実装上のシェーダーアルゴリズムでは、グループ内のすべてのアクティブな
呼び出しに対して真偽値の合成を評価できることは有益だ。

.. glossary::

   ``bool anyInvocation(bool value)``
       グループ内の少なくとも一つのアクティブな呼び出しにおいて ``value`` が
       真である場合に、かつその場合に限り真を返す。

   ``bool allInvocations(bool value)``
       グループ内の呼び出しすべてについて ``value`` が真である場合に、
       かつその場合に限り真を返す。

   ``bool allInvocationsEqual(bool value)``
       グループ内のアクティブな呼び出しすべてにおいて ``value`` が同じであれば
       真を返す。

これらの関数において、グループ内のアクティブな呼び出しすべてに対して同じ結果が
返される。

これらの関数は、条件付きで実行されるコード内で呼び出すことができる。
一部の呼び出しが関数呼び出しを実行しないグループでは、
関数が返す値は、その呼び出しに対して値が十分に定義されている場合でも、
その関数を呼び出さない呼び出しの影響を受けない。

これらの関数は、定義されていない呼び出しグループの ``value`` の値に依存しているため、
これらの関数が返す値はほとんど定義されていない。ただし、
``anyInvocation()`` は ``value`` が ``true`` の場合に ``true`` を返すことが
保証されており、
``allInvocations()`` は ``value`` が ``false`` の場合に ``false`` を返すことが
保証されている。

実装では呼び出しをグループにまとめる必要はないので、
``anyInvocation()``と ``allInvocations()`` で ``value`` を単に返し、
``allInvocationsEqual()`` で ``true`` を返せば、 これらの関数の合法的な実装となる。

フラグメントシェーダーの場合、SIMD 呼び出しグループ内の呼び出しには、
ラスタライズされている基本形状で被覆されている画素に対応する呼び出しと、
被覆されていない近隣の画素に対応する呼び出しが含まれる。
補助呼び出し (:ref:`7.1. Built-In Language Variables`) が作成されることもあり、
そのような補助呼び出しの画素の値は、
``anyInvocation()``, ``allInvocations()``, ``allInvocationsEqual()``
が返す値に影響を与えることがある。
