======================================================================
WebGL Specification 1.0 読書ノート 2
======================================================================

`WebGL Specification <https://www.khronos.org/registry/webgl/specs/latest/1.0/>`__
を読んでいく。

.. contents:: ノート目次

5 DOM Interfaces
======================================================================

本節では、上述の機能へのランタイムアクセスをサポートするために DOM に追加された
インターフェイスと機能について述べられている。

5.1 Types
----------------------------------------------------------------------

本文中の表に列挙された型が以降の節すべてのインターフェイスで用いられるとある。
JavaScript ではなく C 言語のコードで書かれているのが気になる。

5.2 ``WebGLContextAttributes``
----------------------------------------------------------------------

``WebGLContextAttributes`` 辞書には描画面の属性が含まれており、
``getContext`` の二番目の引数として渡される。

* 後述の例と併せて眺めると良い。

5.2.1 Context creation parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ここにある一覧に ``WebGLContextAttributes`` オブジェクトの各属性とその用途について説明がある。

* 各属性のデフォルト値は 5.2 の表のとおり。
* 既定値は ``getContext`` に二番目の引数が渡されなかった場合、
  または指定された名前の属性を持たないユーザーオブジェクトが渡された場合に採用される。

``alpha``
    この値が ``true`` である場合、描画バッファーにアルファーチャンネルがある。

``depth``
    この値が ``true`` の場合、描画バッファーは少なくとも 16 ビットの深度バッファーを持つ。

``stencil``
    この値が ``true`` の場合、描画バッファーは少なくとも 8 ビットのステンシルバッファーを持つ。

``antialias``
    この値が ``true`` で、かつ実装が antialiasing をサポートしている場合、
    描画バッファーは選択した手法と品質を使用してそれを実行する。

``premultipliedAlpha``
    この値が ``true`` の場合、ページ合成器は描画バッファーにあらかじめアルファ値が乗算された色が含まれているとみなす。

    * ``alpha = false`` の場合、このフラグは無視される。
    * ``premultipliedAlpha`` フラグの効果の詳細については Premultiplied Alpha を参照。

``preserveDrawingBuffer``

    この値が ``false`` の場合、Drawing Buffer の項にあるように描画バッファーが提示されると、
    描画バッファーの内容は既定値に消去される。
    描画バッファーのすべての要素（カラー、深度、ステンシル）が消去される。

    この値が ``true`` の場合、バッファーは消去されず、オーナーが消去するか上書きするまで、その値が保持される。
    ``preserveDrawingBuffer`` フラグを ``true`` に設定すると、一部のハードウェアではパフォーマンスに大きな影響を与えることがある。

``powerPreference``
    この WebGL コンテキストに適した GPU の構成を示すヒントをブラウザーに提供する。
    この値は、複数の GPU を備えたシステムでどの GPU を使用するかに影響を与える可能性がある。
    たとえば、デュアル GPU システムでは、レンダリング性能を犠牲にして消費電力の少ない GPU を使用する場合があり得る。
    このプロパティーはヒントに過ぎず、WebGL の実装がこれを無視しても構わない。

    WebGL の実装では、この属性の値にかかわらず、コンテキストの喪失および復元イベントを使用して、電力とメモリーの消費を調整する。

    この属性が取り得る値は次のどれかだ：

    ``"default"``
        どの GPU 構成が最も適しているかをブラウザーに判断させる。これが既定値だ。

    ``"high-performance"``
        消費電力よりもレンダリング性能を優先した GPU 構成を要求する。
        この値を指定すると、モバイル機器のバッテリー駆動時間が大幅に短くなる可能性がある。
        実装では、最初はこの要求を尊重し、しばらくするとコンテキストを失い、
        要求を無視して新しいコンテキストを復元することにしてもかまわない。

        ----

        バックグラウンドの高性能コンテキストを失うことをブラウザーが決定するということがひじょうにありがちなので、
        このオプションを要求するアプリケーションは、堅牢なコンテキスト消失処理を試験し、維持する必要がある。

        ----

    ``"low-power"``
        レンダリング性能よりも省電力を優先した GPU 設定を要求する。
        一般的に、内容が描画パフォーマンスに制約される可能性が低い場合にこの値を使用するべきだ。
        たとえば、

        * 一秒間にワンフレームしかレンダリングしない場合、
        * 単純なシェーダーで比較的単純なジオメトリーのみを描画する場合、
        * 小さな HTML ``canvas`` 要素を使用する場合

        などだ。

        モバイル機器のバッテリー駆動時間が著しく改善される可能性があるので、このオプションを推奨。

``failIfMajorPerformanceCaveat``
    この値が ``true`` の場合、作成された WebGL コンテキストのパフォーマンスが、
    同等の OpenGL 呼び出しを行うネイティブアプリケーションのパフォーマンスよりも大幅に低下すると実装が判断した場合、
    コンテキストの作成を失敗させる。

    * このオプションは使わないと思うので、これ以上調べない。

``desynchronized``
    この値が ``true`` の場合、ブラウザーはキャンバスの描画を最適化して、
    入力イベントからラスタライズまでの待ち時間を短縮することができる。
    そのためには、キャンバスの描画周期をイベントループから非同期化するか、
    通常のブラウザーの描画アルゴリズムを迂回するか、またはその両方を行う必要がある。
    このモードでは、通常の描画の仕組み、ラスタライズ、またはその両方が迂回されるため、
    目に見える tearing artifacts が発生する可能性がある。

    ----

    ブラウザーは、通常、表示されていないバッファでレンダリングを行い、表示のためにスキャンされているバッファーと素早く交換する。
    この技術は tearing artifacts を引き起こす可能性があるという代償を払って遅延を削減する。

    この真偽値の属性は、入力とラスタライズの間の遅延時間が重要な描画アプリケーションなど、
    特定の種類のアプリケーションを実装する際に役立つ。

----

``WebGLContextAttributes`` 引数を ``getContext`` に渡すコード例（仕様書のコードを改変）。
この例では、ページ上に ``canvas1`` という名前の ``canvas`` 要素が存在することを仮定している。

.. code:: javascript

   const canvas = document.getElementById('canvas1');
   const gl = canvas.getContext('webgl',
                                { antialias: false,
                                  stencil: true });

5.3 ``WebGLObject``
----------------------------------------------------------------------

``WebGLObject`` インターフェイスはすべての GL オブジェクトの親となるインターフェイスだ。
各 ``WebGLObject`` は ``invalidated`` フラグを持っており、これは最初はセットされていない。

5.4 ``WebGLBuffer``
----------------------------------------------------------------------

``WebGLBuffer`` インターフェイスは OpenGL バッファーオブジェクトを表現する。
基礎となるオブジェクトは

* ``glGenBuffers`` を呼び出して作成され、
* ``glBindBuffer`` を呼び出して束縛され、
* ``glDeleteBuffers`` を呼び出して削除される。

5.5 ``WebGLFramebuffer``
----------------------------------------------------------------------

``WebGLFramebuffer`` インターフェイスは OpenGL Framebuffer オブジェクトを表現する。
基礎となるオブジェクトは、

* ``glGenFramebuffer`` を呼び出すことで作成され、
* ``glBindFramebuffer`` を呼び出すことで束縛され、
* ``glDeleteFramebuffer`` を呼び出すことで削除される。

5.6 ``WebGLProgram``
----------------------------------------------------------------------

``WebGLProgram`` インターフェイスは OpenGL Program Object を表現する。
基礎となるオブジェクトは、

* ``glCreateProgram`` を呼び出すことで作成され、
* ``glUseProgram`` を呼び出すことで使用され、
* ``glDeleteProgram`` を呼び出すことで削除される。

5.7 ``WebGLRenderbuffer``
----------------------------------------------------------------------

``WebGLRenderbuffer`` インターフェイスは OpenGL Renderbuffer オブジェクトを表現する。
基礎となるオブジェクトは、

* ``glGenRenderbuffers`` を呼び出すことで作成され、
* ``glBindRenderbuffer`` を呼び出すことで束縛され、
* ``glDeleteRenderbuffers`` を呼び出すことで削除マークが付く。

5.8 ``WebGLShader``
----------------------------------------------------------------------

``WebGLShader`` インターフェイスは OpenGL Shader オブジェクトを表現する。
このオブジェクトは、

* ``glCreateShader`` で作成され、
* ``glAttachShader`` でプログラムに取り付けられ、
* ``glDeleteShader`` で削除される。

5.9 ``WebGLTexture``
----------------------------------------------------------------------

``WebGLTexture`` インターフェイスは OpenGL Texture Objectを表現する。
基礎となるオブジェクトは、

``glGenTextures`` を呼び出すことで作成され、
``glBindTexture`` を呼び出すことで束縛され、
`` glDeleteTextures`` を呼び出すことで削除される。

5.10 ``WebGLUniformLocation``
----------------------------------------------------------------------

``WebGLUniformLocation`` インターフェイスは、シェーダープログラムにおける ``uniform`` 変数の位置を表現する。

5.11 ``WebGLActiveInfo``
----------------------------------------------------------------------

5.11.1 Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.12 ``WebGLShaderPrecisionFormat``
----------------------------------------------------------------------

5.12.1 Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.13 ArrayBuffer and Typed Arrays
----------------------------------------------------------------------

5.14 The WebGL context
----------------------------------------------------------------------

5.14.1 Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.14.2 Getting information about the context
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.14.3 Setting and getting state
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.14.4 Viewing and clipping
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.14.5 Buffer objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.14.6 Framebuffer objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.14.7 Renderbuffer objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.14.8 Texture objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.14.9 Programs and Shaders
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.14.10 Uniforms and attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.14.11 Writing to the drawing buffer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.14.12 Reading back pixels
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.14.13 Detecting context lost events
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.14.14 Detecting and enabling extensions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.15 ``WebGLContextEvent``
----------------------------------------------------------------------

5.15.1 Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.15.2 The Context Lost Event
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.15.3 The Context Restored Event
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.15.4 The Context Creation Error Event
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
