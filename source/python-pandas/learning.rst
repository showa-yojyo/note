======================================================================
学習方法
======================================================================

Pandas_ の初期段階での学習方法について思いつくままに記す。
なお、コンソールは基本的には IPython_ を利用する前提だ。
プロットなどでは Jupyter Notebook を利用するのが自然かも知れない。

.. contents::

IPython のプロファイルを仕込む
======================================================================

Pandas_ を学習するときには次のコードを毎回コンソールに打ち込むことになる：

.. code:: python

   import pandas as pd
   import numpy as np

この手間を省略するために、IPython のプロファイル機能を活用する。

.. code:: console

   bash$ PANDAS_PROFILE_NAME=pandas
   bash$ ipython profile create $PANDAS_PROFILE_NAME
   bash$ cd $(ipython locate profile $PANDAS_PROFILE_NAME)/startup
   bash$ cat common_import.py <<EOF
   import pandas as pd
   import numpy as np
   EOF

他にも、ダミー DataFrame オブジェクトを生成するコードを置くのもよいだろう。

そして IPython セッションを開始するときには次のようにするのだ：

.. code:: console

   bash$ ipython --profile $PANDAS_PROFILE_NAME

基本ドキュメントを精読する
======================================================================

初学者は Pandas_ 公式文書の次の二点にまず目を通すことになる。
ここに書かれているコードを可能な限り IPython などで試すことで Pandas_ の本質的な機能を体得することになる。

* Getting Started の Getting started tutorials
* User Guide の 10 minutes to pandas

Getting started tutorials ノート
----------------------------------------------------------------------

このチュートリアルを実施する際にデモ CSV ファイルが必要だ。
普通に読んでいればいずれのファイルもダウンロードできるので問題ないが、
オフラインで作業するときにはあらかじめダウンロードしておく。

CSV ファイルから ``DataFrame`` オブジェクトを生成するコードを上述のスクリプトに含めておくといい。

.. code:: python

   titanic = pd.read_csv("path/to/titanic.csv")
   air_quality_short = pd.read_csv("path/to/air_quality_no2.csv", index_col=0, parse_dates=True)
   air_quality_long = pd.read_csv("/path/to/air_quality_no2_long.csv", parse_dates=True)

要点が各章の終わりにまとめられているので、内容を習得したか確認する。

* 基礎的概念

  * Pandas_ のパッケージ要素を利用するには ``import pandas as pd`` とする（別名定義はタイプ量節約のため）。
  * クラス ``DataFrame`` は二次元の表を表す。これが当ライブラリーの主役のようなものだ。
  * ``DataFrame`` の列のそれぞれは ``Series`` というものだ。
  * Pandas プログラミングでは ``DataFrame`` または ``Series`` に対してメソッドを呼び出すことで何かをする。

* I/O について

  * ``read_`` から始まる名前の関数がファイルからの入力機能だ（アンダースコアのあとにファイルフォーマットを表す名前が付く）。
  * 反対に ``.to_`` から始まる名前のメソッドがファイル出力機能だ。
  * オブジェクトをチェックするのにメソッド ``.head()``, ``.tail()``, ``.info()`` と
    プロパティー ``.dtypes`` が手軽に使える。

* ``DataFrame`` の部分集合へのアクセス

  * 角括弧を用いるのが基本的だ。
  * そのような角括弧の内側には、単一の行または列ラベル、行または列ラベルのリスト、
    ラベルのスライス、条件付き式、またはコロンが入る。
  * メソッド ``.loc[]`` では行名または列名を用いる。
  * メソッド ``.iloc[]`` では表における添字を用いる。
  * ``.loc[]`` にせよ ``.iloc[]`` にせよ、値を代入するのにも用いられる。

* プロットするには

  * ``Series`` と ``DataFrames`` の両方にプロパティー ``.plot`` が提供されていて、
    そこからプロット用メソッド各種を呼び出すことができるようになっている。
  * 基本的には、各列は異なる要素としてプロットされる。
  * Pandas が生成するあらゆるプロットは Matplotlib_ オブジェクトだ。

* 既存の列から新しい列を作成するには

  * 代入による。左辺は ``df[new_column_name] = ...`` のような形であり、
    右辺は何らかの出力だろう。
  * 操作は要素ごとになされる。行をループする必要はない。
  * 行名または列名を変えるには ``rename()`` を使う。

* 統計概要を計算するのは

  * 集約系の統計は列全体または行全体について計算ができる。
  * ``.groupby()`` は「分割・適用・結合」パターンの原動力だ。
  * ``.value_counts()`` は各列に対して、存在する値それぞれがいくつ含まれるかを勘定するのに具合が良い。

* 表の配置を変えるには

  * ``.sort_values()`` は列を整列する。一つでも複数でも整列できる。
  * ``.pivot()`` は純粋にデータを再構築する一方、``.pivot_table()`` は集約を行う。
  * ``.pivot()`` の逆は ``.melt()`` だ。「縦長を横長にする操作の逆は、横長を縦長にする」と覚える。

* 複数の表からデータを結合するには

  * 関数 ``concat()`` を使うと複数の表を、列ごとにでも行ごとにでも結合することができる。
  * 表に対するデータベースにおける merging/joining 操作には関数 ``merge()`` を使う。

* 時系列データを操作するには

  * 関数 ``to_datetime()`` を使えば、まともな日付文字列を日付時間オブジェクトに変換することができる。
  * Pandas の日付時間オブジェクトには時間計算、論理演算、日付に関連するプロパティー ``.dt`` が備わっている。
  * ``DatetimeIndex`` オブジェクトにはこれらの日付関係のプロパティーがあり、使いやすいスライス操作をサポートする。
  * ``.resample()`` は時系列の頻度を変える強力なメソッドだ。

* 文字列を操作するには

  * 文字列メソッドは ``.str`` から利用可能だ。
  * 文字列メソッドは要素ごとに機能し、条件付きインデックスに対して用いられる。
  * メソッド ``.replace()`` は与えられた ``dict`` オブジェクトに従って値を変換する使い勝手のよいメソッドだ。

10 minutes to pandas
----------------------------------------------------------------------

とても 10 分で履修できるような分量に収まっていない Pandas_ の紹介記事だ。
上述のチュートリアルと併せて読んでもいいし、チュートリアルだけ読んで次に進んでもいい。

.. include:: /_include/python-refs-core.txt
.. include:: /_include/python-refs-sci.txt
