======================================================================
Effective Debugging 読書ノート
======================================================================

:著者: Diomidis Spinellis
:訳者: 黒川 利明
:出版社: オライリー・ジャパン
:ISBN: 978-4-87311-799-7
:関連 URL: `O'Reilly Japan - Effective Debugging <https://www.oreilly.co.jp/books/9784873117997/>`__

.. contents:: ノート目次

まえがき
======================================================================
* 本書は経験を積んだ開発者向けに書かれている。
* 本書で紹介するデバッグ技法は、あえて詳細にまでこだわって記述した。

本書の内容
----------------------------------------------------------------------
* 本書で扱うテーマは、一般的なものからより特殊なものに並んでいる。

本書の利用法
----------------------------------------------------------------------
#. 戦略と手法
#. スキルとツール

   * <慣れ親しんだツールを使い続ける安楽さを放棄して、より高度なツールを習得する学習に挑戦する>

#. 技法のアイデア

仕事の流儀
----------------------------------------------------------------------
#. ソフトウェア設計で行うすべての事項

  * 最高水準のメカニズム
  * デバッグモード
  * ログのメカニズム
  * コマンドラインツールによるスクリプトで分析する
  * エラーを見せる
  * コアダンプを取得する方法を用意する
  * 非決定性のあるものを最小化する

#. ソフトウェア構築の手順

  * 同僚
  * 単体テスト
  * assertion
  * コードの品質
  * 非決定性のあるもの排除

#. 開発と運用の管理で行うこと

   * 課題管理システム
   * 問題をトリアージ（この本はどういうわけか医療用語がしばしば現れる）
   * バージョン管理システム
   * ツールや環境の多様性を担保する
   * ライブラリーのソースや高度なツールを買う
   * etc.

用語についての注意
----------------------------------------------------------------------
* ISO/IEC/IEEE 24765:2010 という規格で用語が定義されているので、
  それに準拠すると言っている。

  * 「故障」「欠陥」は fault, defect, bug の意味にとる。
  * 「障害」は failure の意味にとる。
  * <故障や欠陥という用語が障害を表すのに使われることが、IOS 標準でも
    認められているが、混乱を招くことがある>

* Unix を Unix の原則や API に従うシステムすべてに使う。
* ルーチンをメンバー関数、メソッド、関数、手続き、サブルーチンの総称として使う。

本書の表記法
----------------------------------------------------------------------
* <コマンドラインツールのインターフェースは何十年も変わらないのに、
  GUI ではバージョンごとに異なる>

1 章 高水準戦略
======================================================================

項目 1: あらゆる問題を課題管理システムで扱う
----------------------------------------------------------------------
TBW

項目 2: 問題に対する洞察を得るにはウェブで焦点を絞って検索する
----------------------------------------------------------------------
TBW

項目 3: 前条件と後条件が満たされていることを確認する
----------------------------------------------------------------------
TBW

項目 4: 問題からバグをドリルアップするかプログラムの先頭からバグへドリルダウンする
----------------------------------------------------------------------
TBW

項目 5: 既知の正常なシステムと問題を起こしているシステムとの違いを検出する
----------------------------------------------------------------------
TBW

項目 6: ソフトウェアのデバッグ機能を使う
----------------------------------------------------------------------
TBW

項目 7: ビルドと実行環境を多様化する
----------------------------------------------------------------------
TBW

項目 8: 作業の焦点を最も重要な問題に絞る
----------------------------------------------------------------------
TBW


2 章 汎用の手法と実践
======================================================================

項目 9: デバッグを成功させるために心の準備をする
----------------------------------------------------------------------
TBW

項目 10: 問題の効率的な再現を可能にする
----------------------------------------------------------------------
TBW

項目 11: 変更から結果までのターンアラウンド時間を最小化する
----------------------------------------------------------------------
TBW

項目 12: 複雑なテストシナリオを自動化する
----------------------------------------------------------------------
TBW

項目 13: デバッグデータを包括的に概観する
----------------------------------------------------------------------
TBW

項目 14: ソフトウェアのアップデートを考える
----------------------------------------------------------------------
TBW

項目 15: サードパーティソースコードを調べて洞察を得る
----------------------------------------------------------------------
TBW

項目 16: 特別な監視およびテスト装置を使う
----------------------------------------------------------------------
TBW

項目 17: 失敗による結果をさらに際立たせる
----------------------------------------------------------------------
TBW

項目 18: 手に負えないシステムのデバッグを自分のデスクで行えるようにする
----------------------------------------------------------------------
TBW

項目 19: デバッグタスクを自動化する
----------------------------------------------------------------------
TBW

項目 20: デバッグの前後で大掃除をする
----------------------------------------------------------------------
TBW

項目 21: 問題を起こすクラスのすべてのインスタンスを修正する
----------------------------------------------------------------------
TBW


3 章 汎用ツールと技法
======================================================================

項目 22: デバッグデータをUnixコマンドラインツールで分析する
----------------------------------------------------------------------
TBW

項目 23: コマンドラインツールのオプションとイディオムを活用する
----------------------------------------------------------------------
TBW

項目 24: デバッグデータをエディタで調べる
----------------------------------------------------------------------
TBW

項目 25: 作業環境を最適化する
----------------------------------------------------------------------
TBW

項目 26: バグの原因と経緯とをバージョン管理システムで探す
----------------------------------------------------------------------
TBW

項目 27: 独立なプロセスからなるシステムの監視ツールを使う
----------------------------------------------------------------------
TBW


4 章 デバッガ技法
======================================================================

項目 28: シンボリックデバッグ用にコンパイルしたコードを使う
----------------------------------------------------------------------
TBW

項目 29: コードをステップ実行する
----------------------------------------------------------------------
TBW

項目 30: コードとデータのブレークポイントを活用する
----------------------------------------------------------------------
TBW

項目 31: 逆デバッグ機能をよく知っておく
----------------------------------------------------------------------
TBW

項目 32: ルーチン間の呼び出しに沿って探索する
----------------------------------------------------------------------
TBW

項目 33: 変数と式の値を調べてエラーを見つける
----------------------------------------------------------------------
TBW

項目 34: 実行プロセスにどのようにデバッガをアタッチするかを知っておく
----------------------------------------------------------------------
TBW

項目 35: コアダンプの扱い方を知っておく
----------------------------------------------------------------------
TBW

項目 36: デバッグツールを整備する
----------------------------------------------------------------------
TBW

項目 37: アセンブラコードとハードのメモリ内容を確認する方法を知っておく
----------------------------------------------------------------------
TBW


5 章 プログラミング技法
======================================================================

項目 38: 怪しいコードをレビューして手動で実行する
----------------------------------------------------------------------
TBW

項目 39: コードとその内容を同僚に説明する
----------------------------------------------------------------------
TBW

項目 40: デバッグ機能を追加する
----------------------------------------------------------------------
TBW

項目 41: ロギング文を追加する
----------------------------------------------------------------------
TBW

項目 42: ユニットテストを使う
----------------------------------------------------------------------
TBW

項目 43: アサーションを使う
----------------------------------------------------------------------
TBW

項目 44: デバッグしたプログラムに変動を与えて推理を検証する
----------------------------------------------------------------------
TBW

項目 45: 稼働例と問題コードとの相違を最小化する
----------------------------------------------------------------------
TBW

項目 46: 怪しいコードを単純にする
----------------------------------------------------------------------
TBW

項目 47: 怪しいコードを他の言語で書き直す
----------------------------------------------------------------------
TBW

項目 48: 怪しいコードの可読性と構造を改善する
----------------------------------------------------------------------
TBW

項目 49: バグの症状を取り除くのではなく、原因を取り除く
----------------------------------------------------------------------
TBW


6 章 コンパイル時の技法
======================================================================

項目 50: 生成コードを調べる
----------------------------------------------------------------------
TBW

項目 51: 静的プログラム解析ツールを使う
----------------------------------------------------------------------
TBW

項目 52: ビルドと実行を決定的に構成する
----------------------------------------------------------------------
TBW

項目 53: デバッグライブラリを使用してチェックするよう構成する
----------------------------------------------------------------------
TBW


7 章 実行時の技法
======================================================================

項目 54: テストケースを作って問題を発見する
----------------------------------------------------------------------
TBW

項目 55: 迅速に失敗させる
----------------------------------------------------------------------
TBW

項目 56: アプリケーションのログファイルを調べる
----------------------------------------------------------------------
TBW

項目 57: システムとプロセスの演算操作のプロファイルをとる
----------------------------------------------------------------------
TBW

項目 58: コード実行をトレースする
----------------------------------------------------------------------
TBW

項目 59: 動的なプログラム解析ツールを使う
----------------------------------------------------------------------
TBW


8 章 マルチスレッドコードのデバッグ
======================================================================

項目 60: デッドロックを事後検討デバッグで分析する
----------------------------------------------------------------------
TBW

項目 61: キャプチャして複製する
----------------------------------------------------------------------
TBW

項目 62: 専用ツールでデッドロックと競合条件を見つける
----------------------------------------------------------------------
TBW

項目 63: 非決定性を切り分けて取り除く
----------------------------------------------------------------------
TBW

項目 64: 競合制約状態を調べてスケーラビリティ問題を検討する
----------------------------------------------------------------------
TBW

項目 65: 性能カウンタを使ってフォールスシェアリングを探す
----------------------------------------------------------------------
TBW

項目 66: 高水準な抽象化を用いてコードを書き直すことを検討する
----------------------------------------------------------------------
TBW
