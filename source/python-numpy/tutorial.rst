======================================================================
Tentative NumPy Tutorial ノート
======================================================================
本稿は `Tentative NumPy Tutorial <http://wiki.scipy.org/Tentative_NumPy_Tutorial>`_ を読んだノートだ。
かつて一度は目を通したハズだが、今ザッとリンク先を読んでみたら記憶から抜けている事項が妙に多いので、テキストの形でノートを残すことにした。

.. contents::

Prerequisites
======================================================================
これは問題ない。

* NumPy_ を利用するためには、当然 Python_ のことを少々は知っている必要がある。最低でも Python と NumPy を開発環境で利用可能なようにしておく必要がある。
* さらに次のものがあれば便利とある。私は後ろふたつは確保している。

  * IPython_: これはコンソール環境というか、シェルというか、未挑戦。
  * Matplotlib_: :doc:`/python-matplotlib` 参照。
  * SciPy_: :doc:`/python-scipy/index` 参照。

The Basics
======================================================================
NumPy の基本は何と言ってもクラス ``ndarray`` である。便宜上ここでは配列と呼ぶが、任意次元のテーブルと思ったほうがよい。
以下 ``a`` をこのクラスのオブジェクトとする。

* ``array`` という別名が付いている。
* そのテーブルの寸法 (dimensions) を **axes** と呼ぶ。

  * 対応するプロパティーは ``a.shape`` である。

    * 型は tuple であり、どの要素も正の整数である。
    * 例えば 3 次元空間の横ベクトルならば ``(3,)`` となる。縦ベクトルならばなんと ``(3, 1)`` になる。
    * テーブルの外側から内側に向かって axis の個数が列挙されている。

* axes の個数を **rank** と呼ぶ。対応するプロパティーは ``a.ndim`` であり、値は ``len(a.shape)`` と等しい。

An example
----------------------------------------------------------------------
上述の配列オブジェクトのプロパティーのはたらきを示すコードなので、理解度を念のため確認しておけばよい。

Array Creation
----------------------------------------------------------------------
配列オブジェクトを生成する方法はいくつもある。

* クラス ``array`` のコンストラクターに Python の list または tuple のオブジェクトを渡して生成する。

  * 配列の ``dtype`` は各要素から推論 (deduce) されて決まる。またはキーワード引数 ``dtype`` で明示的に指定できる。
  * 生成する配列の rank に応じて、list または tuple を入れ子にして指定する。

* 要素が具体的に決まっていないが、配列の dimensions だけから生成する方法としては、関数
  ``ones``, ``zeros``, ``empty`` あるいはその系統の関数を用いる。

  * 引数に ``(3, 4)`` のように指定する。
  * 要素の型を明示的にキーワード引数 ``dtype`` で指定することができる。指定しない場合は ``float64`` になる。

* 関数 ``arange`` を用いれば、Python の関数 ``range`` よろしく、いわゆる start-stop-step 方式で生成する配列要素を指定できる。

  * ただし、浮動小数点型に対しては色々と危ない。代わりに関数 ``linspace`` を使うのだ。

    * こちらは start-stop-length 方式になる。
    * デフォルトでは生成配列の最後の要素が stop 自身になる。

Printing Arrays
----------------------------------------------------------------------
* 高 rank の配列要素の出力結果の書式について述べている。基本ルールはこういう感じ：

  * 最後の axis の要素（最も内側）は左から右に配列される。
  * 最後から 2 番目の axis は上から下に配列される。
  * 残りは上から下に配列されるが、各 axis 間は一行空く。

* あまりに巨大な配列は適宜出力を省略するようになっている。
* 関数 ``set_printoptions`` でその辺りを調整できる。

Basic Operations
----------------------------------------------------------------------

Universal Functions
----------------------------------------------------------------------

Indexing, Slicing and Iterating
----------------------------------------------------------------------

Shape Manipulation
======================================================================

Changing the shape of an array
----------------------------------------------------------------------

Stacking together different arrays
----------------------------------------------------------------------

Splitting one array into several smaller ones
----------------------------------------------------------------------

Copies and Views
======================================================================

No Copy at All
----------------------------------------------------------------------

View or Shallow Copy
----------------------------------------------------------------------

Deep Copy
----------------------------------------------------------------------

Functions and Methods Overview
----------------------------------------------------------------------

Less Basic
======================================================================

Broadcasting rules
----------------------------------------------------------------------

Fancy indexing and index tricks
======================================================================

Indexing with Arrays of Indices
----------------------------------------------------------------------

Indexing with Boolean Arrays
----------------------------------------------------------------------

The ix_() function
----------------------------------------------------------------------

Indexing with strings
----------------------------------------------------------------------

Linear Algebra
======================================================================

Simple Array Operations
----------------------------------------------------------------------

The Matrix Class
----------------------------------------------------------------------

Indexing: Comparing Matrices and 2D Arrays
----------------------------------------------------------------------

Tricks and Tips
======================================================================

"Automatic" Reshaping
----------------------------------------------------------------------

Vector Stacking
----------------------------------------------------------------------

Histograms
----------------------------------------------------------------------

References
======================================================================
ここには 7 個の参考文書がリストされているが、おそらくどれも読まないで済ませそうだ。

.. include:: /_include/scipy-refs.txt
