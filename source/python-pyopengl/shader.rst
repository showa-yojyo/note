======================================================================
GLSL の動作を確認する
======================================================================
本稿では私（筆者）の PyOpenGL_ 環境で GLSL を利用できるかどうかを確認する。
私の OpenGL の知識はバージョン 1.4 程度で止まっており、ましてやシェーダーなどは触ったこともない。
ゆえに、ここでは初歩的な事項の確認にとどまる。

.. contents::

サンプルプログラムを探す
======================================================================
なにぶん知識がないものだから Google で GLSL 等の単語を検索して、色々と漁ってみるしかない。
次のようなサイトが取っ掛かりになる。

* `GLSL 1.2 Tutorial <http://www.lighthouse3d.com/tutorials/glsl-tutorial/>`_

話が早いことに PyOpenGL で書かれたプログラムも発見できた。

* `rndblnch / opengl-programmable <https://bitbucket.org/rndblnch/opengl-programmable/src>`_

GLSL を利用するような極小プログラムを書く
======================================================================
プログラムをスクリプトファイル :file:`glshaderappbase.py` の形で構成する。全体を以下に示す。

.. literalinclude:: /_sample/pyopengl/glshaderappbase.py
   :language: python3

コードの構造は前回までと同様につき、シェーダープログラムらしいところを焦点に絞って解説する。

このスクリプトの大部分を占めるクラス ``GLShaderAppBase`` は主に次のふたつの目的を持つ。

#. OpenGL シェーダープログラムに関係するリソースの初期化・解体処理をカプセル化すること。
#. オマケ的に、本クラス単体でシェーダーによる何か簡単な描画を実演すること。

本稿で説明するのは、主に最初の項目についてとなる。

コンストラクター
----------------------------------------------------------------------
* 「簡単な描画」の事情により、コンテキストバージョンを 2.1 に決め打つ。
  ただし、基本的には当クラスのサブクラスではもっと新しいコンテキストバージョンを設定する。

* シェーダー関連のメンバーデータを宣言する。

  * ``shader_sources`` は辞書インスタンスとする。キー、値はそれぞれ OpenGL のシェーダータイプ、ソースコードテキストとして扱う。
  * ``shader_ids`` も辞書インスタンスとする。キー、値はそれぞれ OpenGL のシェーダータイプ、生成シェーダーとして扱う。
  * ``program_id`` は OpenGL のシェーダープログラムとして扱う。

  このクラスではこれらのメンバーデータを初期化生成と削除時に参照する。

* アニメーションを実装するので、カメラ角度（モデル角度）をメンバーデータ ``rotation`` として保持しておく。

  * ただしサブクラスでは全く利用しない予定。

メソッド ``init_program``
----------------------------------------------------------------------
メソッド ``init_program`` では、プログラマブルシェーダーのセットアップを行う。
次のような関数を呼び出すことで、シェーダーを構成するようだ。

* ``glCreateShader``, ``glDeleteShader``
* ``glShaderSource``
* ``glCompileShader``
* ``glCreateProgram``
* ``glAttachShader``
* ``glLinkProgram``
* ``glUseProgram``

これらの関数の呼び出し順序やエラー処理の実装はかなりワンパターンになるらしい。
ウェブで発見したプログラムは大体 ``init_program`` のような構造であった。
実際に、PyOpenGL のパッケージディレクトリーを ``grep glCreateShader`` のような検索をすると、
モジュール ``OpenGL.GL.shaders`` に似た構造を持つ関数があるのがわかる。

OpenGL の仕様書の記述によると、関数 ``glDeleteShader`` の呼び出しはアタッチの直後あたりでも構わぬようだが、いつものメソッド ``cleanup`` まで先送りする。
そのために OpenGL から返り値として得られるプログラム・シェーダーを識別する値をメンバーデータに保存する。

* シェーダープログラム ID の保存は、この値が別の箇所から参照する機会があることによる。
* また、いずれの識別子も本プログラム全体の終了直前に後片付け処理で参照したいことにもよる。

関数 ``glShaderSource`` の呼び出し
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
関数 ``glShaderSource`` に「プログラム文字列」を渡すのがキモ。
本コードでは頂点シェーダーとフラグメントシェーダーに渡すプログラム文字列をスクリプト内にハードコードしている。
ここでの目的はあくまで動作確認であるゆえ、その実装はいずれもつまらないものになっている（これならシェーダーを利用する意義がない）。

クラス定義の前に ``VERT_SHADER_SOURCE`` および ``FRAG_SHADER_SOURCE`` を Python の文字列 (``str``) として定義している。
ちなみに ``bytes`` 型で定義しても動作する。

ログのデコード
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
関数 ``glGetShaderInfoLog``, ``glGetProgramInfoLog`` を利用するのであれば、その戻り値をコンソールに出力する際には ``.decode()`` して
``bytes`` 型から ``str`` 型に変換しておくとよい。

メソッド ``init_shader_source``
----------------------------------------------------------------------
メソッド ``init_shader_source`` は前述のシェーダープログラム初期化メソッドから呼び出すためのテンプレートメソッドとする。

各サブクラスで、頂点シェーダーやフラグメントシェーダーのソースコードをメンバーデータの辞書に設定する。

メソッド ``destroy_shaders``
----------------------------------------------------------------------
メソッド ``destroy_shaders`` では、本クラスまたはサブクラスがシェーダープログラム利用時に、関連リソースを削除する。
シェーダーをプログラムから関連付けを解除したり、オブジェクトを削除したりして完全にクリーンにする。

本メソッドは描画ウィンドウが閉じるタイミングでだけ呼び出されることを想定しているので、対応するメンバーデータのゼロクリア等は行わない。

* シェーダーオブジェクトを ``glDetachShader`` と ``glDeleteShader`` で片付ける。
* シェーダープログラムを ``glDeleteProgram`` で片付ける。

メソッド ``do_render``
----------------------------------------------------------------------
レガシー API 満載の実装につき、説明は差し控える。サブクラスではプリミティブを現代風の API で定義かつ描画する。

実行する
======================================================================
スクリプト :file:`glshaderappbase.py` を実行すると、いつものように描画ウィンドウが出現する。
それに加えて Python 関数 ``print`` による情報がコンソールウィンドウに出力する。

描画ウィンドウ
----------------------------------------------------------------------

.. image:: /_static/pyopengl-glsl-minimal.png
   :scale: 70%

描画ウィンドウの内容を説明すると、「ピンクのティーポットがゆっくりと回転している」というものだ。
何の工夫もないシェーダープログラムが忠実にビューポートに再現されているために、物体の色彩や質感に表情のようなものがまったく感じられないはずだ。

.. include:: /_include/pyopengl-refs.txt
