======================================================================
GLSL の動作を確認する
======================================================================
本稿では私（筆者）の PyOpenGL_ 環境で GLSL を利用できるかどうかを確認する。
私の OpenGL の知識はバージョン 1.4 程度で止まっており、ましてやシェーダーなどは触ったこともない。
ゆえに、ここでは初歩的な事項の確認にとどまる。

.. contents::

サンプルプログラムを探す
======================================================================
なにぶん知識がないものだから Google で GLSL 等の単語を検索して、色々と漁ってみるしかない。
次のようなサイトが取っ掛かりになる。

* `GLSL 1.2 Tutorial <http://www.lighthouse3d.com/tutorials/glsl-tutorial/>`_

話が早いことに PyOpenGL で書かれたプログラムも発見できた。

* `rndblnch / opengl-programmable <https://bitbucket.org/rndblnch/opengl-programmable/src>`_

GLSL を利用するような極小プログラムを書く
======================================================================
プログラムをスクリプトファイル :file:`glsl-minimal.py` の形で構成する。全体を以下に示す。

.. literalinclude:: /_sample/pyopengl/glsl-minimal.py
   :language: python3

シェーダープログラムらしいところを焦点に絞って解説する。

メソッド ``init_program``
----------------------------------------------------------------------
メソッド ``init_program`` では、プログラマブルシェーダーのセットアップを行う。
次のような関数を呼び出すことで、シェーダーを構成するようだ。

* ``glCreateShader``, ``glDeleteShader``
* ``glShaderSource``
* ``glCompileShader``
* ``glCreateProgram``
* ``glAttachShader``
* ``glLinkProgram``
* ``glUseProgram``

これらの関数の呼び出し順序やエラー処理の実装はかなりワンパターンになるらしい。
ウェブで発見したプログラムは大体 ``init_program`` のような構造であった。
実際に、PyOpenGL のパッケージディレクトリーを ``grep glCreateShader`` のような検索をすると、
モジュール ``OpenGL.GL.shaders`` に似た構造を持つ関数があるのがわかる。

関数 ``glShaderSource`` の呼び出し
----------------------------------------------------------------------
関数 ``glShaderSource`` に「プログラム文字列」を渡すのがキモ。
本コードでは頂点シェーダーとフラグメントシェーダーに渡すプログラム文字列をスクリプト内にハードコードしている。
ここでの目的はあくまで動作確認であるゆえ、その実装はいずれもつまらないものになっている（これならシェーダーを利用する意義がない）。

クラス定義の前に ``VERT_SHADER_SOURCE`` および ``FRAG_SHADER_SOURCE`` を Python の文字列 (``str``) として定義している。
ちなみに ``bytes`` 型で定義しても動作する。

実行する
======================================================================
スクリプト :file:`glsl-minimal.py` を実行すると、いつものように描画ウィンドウが出現する。
それに加えて Python 関数 ``print`` による情報がコンソールウィンドウに出力する。

描画ウィンドウ
----------------------------------------------------------------------

.. image:: /_static/pyopengl-glsl-minimal.png
   :scale: 70%

描画ウィンドウの内容を説明すると、「ピンクのティーポットがゆっくりと回転している」というものだ。
何の工夫もないシェーダープログラムが忠実にビューポートに再現されているために、物体の色彩や質感に表情のようなものがまったく感じられないはずだ。

コンソールウィンドウ
----------------------------------------------------------------------

.. code-block:: console

   $ python34 glsl-minimal.py
   Vendor: Intel
   Renderer: Intel(R) HD Graphics
   Version: 3.1.0 - Build 9.17.10.3347
   GLSL: 1.40 - Intel Build 9.17.10.3347

OpenGL と GLSL のバージョンが明確になるので、この出力処理は常にプログラムに含めておいたほうが良さそうだ。

.. include:: /_include/pyopengl-refs.txt
