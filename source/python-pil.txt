======================================================================
Python PIL 利用ノート
======================================================================

体系的にまとめるまでの間は Q & A 形式でノートしておく。

.. contents:: ノート目次

PIL 自身
==================================================

PIL のサイトはどこ？
--------------------------------------------------
PIL のサイトは http://www.pythonware.com/products/pil にある。

パッケージ入手方法とインストール方法は？
--------------------------------------------------
インターネットに接続した環境で ``easy_install PIL`` する。

もしかすると Windows 用には PIL の製品サイトがインストーラーを提供しているかもしれない。
ちなみにこのノートは 1.1.7 を利用して記述する。

オフラインドキュメントはある？
--------------------------------------------------
手許に Python Imaging Library Overview というタイトルの PDF ファイルが存在する。
入手場所は忘れたが、おそらく上記サイトのはず。

ファイル名は ``pil-handbook.pdf`` で、
Fredrik Lundh と Matthew Ellis という人物の共著になっている。

画像処理基本
==================================================

既存の画像ファイルのフォーマット変換の方法は？
--------------------------------------------------
``Image.save`` するときのファイル名の拡張子で PIL が勝手に変換してくれる。
GIF ファイル ``image.gif`` を PNG に変換するには、例えば下のようにする。

>>> import Image
>>> im = Image.open("image.gif")
>>> im.save("image.png")

「特定のフォルダーにあるすべての GIF ファイルを PNG に変換する」のような作業は、こうする。

.. code-block:: python

   # pil-handbook の例を一部改変。動作未確認。
   import os.path
   import glob
   import Image

   for infile in glob.glob("*.gif"):
       file, ext = os.path.splitext(infile)
       im = Image.open(infile)
       im.save(file + ".png")

Python を利用する必要がないのであれば、
シェルから Image Magick の ``convert`` ユーティリティーを使う手もある。

画像をいじっていたらジャギーが出て困るのだが？
--------------------------------------------------
関数によっては ``Image.ANTIALIAS`` を引数に指定すると具合がよくなるものもある。
特に、イメージを縮小してジャギーが生じる場合は、プログラム中の
``resize`` と ``thumbnail`` の実引数をチェックする。

イメージをモノクロにするには？
--------------------------------------------------
メソッド ``convert`` を使って L モードにするだけで OK のようだ。
内部的に各ピクセルの RGB 値をグレースケール化しているようだ。
次の式でスケールが決まる。
::
  
  L = R * 299/1000 + G * 587/1000 + B * 114/1000

画像ファイルがない状態からイメージを生成するには？
--------------------------------------------------
関数 ``Image.new`` を利用する。少なくともカラーモードと画像サイズを指定すればよい。

>>> # 1024 x 768 の RGB イメージを初期化する。
>>> import Image
>>> img = Image.new('RGB', (1024, 768))

このオブジェクトは、いわばまっさらなキャンヴァスだ。
ここに他のイメージオブジェクトを ``paste`` メソッド等を利用して描く。

ブレンディングについて例を挙げてくれ？
--------------------------------------------------
TBW

Band の考え方について教えてくれ
--------------------------------------------------
例えば、手許にある PNG ファイルから読み込んだイメージデータは RGBA モードだ。
これは R, G, B, A という色プラスアルファに関する情報を持っている。
このようなものを PIL では multi-band であると表現する。

イメージオブジェクトの ``split`` メソッドでこの band を
L モードのイメージとして抽出できる。

.. code-block:: python

   # RGBA なイメージだと仮定する。
   img = Image.open('illvelo.png')
   assert img.mode == 'RGBA'

   # split メソッドで R, G, B, A 各成分をイメージの形で抽出する。
   img.load()
   bands = img.split()
   band[0].show() # R 成分のグレースケールが拝める。

テキスト関連
==================================================

テキストを描画する一番簡単なコードは？
--------------------------------------------------
とりあえず ``ImageDraw`` モジュールの機能を利用する。

.. code-block:: python

   import Image
   import ImageDraw

   # デフォルト背景色の 128x128 サイズのキャンヴァスを用意する。
   img = Image.new('RGBA', (128, 128))

   # Draw 関数でオブジェクトを作成。
   draw = ImageDraw.Draw(img)

   # 画面の左上隅にテキストを赤く描画する。
   draw.text((0, 0), u'Hello, world', fill=0x0000FF)

日本語のテキストを描画するには？
--------------------------------------------------
コツは 3 つある。

* 関数 ``ImageFont.truetype`` で日本語対応のフォントオブジェクトを作成する。
* その際に ``encoding`` 引数に適切なエンコーディングを指示する。
* ``text`` メソッドの引数にそのフォントを与える。

.. code-block:: python

   # 動作確認がまだ。
   import Image
   import ImageDraw
   import ImageFont

   img = Image.new('RGB', (512, 512), 0x000000)
   dr = ImageDraw.Draw(img)
   fnt = ImageFont.truetype('msmincho.ttc', size=120, encoding='utf-8')
   dr.text((0, 0), u'御無礼', font=fnt, fill=0xFFFFFF)
   #img.show()

ImportError: DLL load failed になるのはなぜ？
--------------------------------------------------
``import ImageFont`` で表題のエラーが出た。
エラーメッセージを真に受けると :file:`_imagingft.pyd` が何らかの理由でおかしい。

