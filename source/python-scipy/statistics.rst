======================================================================
確率と統計
======================================================================
本稿では SciPy_ の統計機能を見ていこう。個人的には統計にほとんど興味がないので、
このページは特にやっつけ作業になる予定だ。

.. todo::

   もっと書くことはないのか。

.. contents::

基本統計量
======================================================================
以下の説明では ``x`` を何らかの統計データを表現する
shape が一次元の ``np.array`` 型インスタンスとする。
また、各代表値・散布度を計算するのに十分の個数の要素を含むものとする。

モジュール ``scipy.stats`` の機能に頼らずとも
NumPy_ の機能で計算可能な統計量が多いようだ。

最大値
----------------------------------------------------------------------
統計データ ``x`` の最大値を得るには以下のいずれかを用いればよい。

* ``x.max()`` の戻り値。
* ``np.max(x)`` の戻り値。
* ``n, (smin, smax), sm, sv, ss, sk = scipy.stats.describe(x)`` として ``smax`` を採る。

最小値
----------------------------------------------------------------------
統計データ ``x`` の最小値を得るには以下のいずれかを用いればよい。最大値と同様。

* ``x.min()`` の戻り値。
* ``np.min(x)`` の戻り値。
* ``n, (smin, smax), sm, sv, ss, sk = scipy.stats.describe(x)`` として ``smin`` を採る。

平均値
----------------------------------------------------------------------
統計データ ``x`` の平均値を得るには以下のいずれかを用いればよい。

* ``x.mean()`` の戻り値。
* ``np.mean(x)`` の戻り値。
* ``n, (smin, smax), sm, sv, ss, sk = scipy.stats.describe(x)`` として ``sm`` を採る。

中央値
----------------------------------------------------------------------
統計データ ``x`` の中央値を得るには ``np.median(x)`` の戻り値を用いる。

最頻値
----------------------------------------------------------------------
統計データ ``x`` の最頻値を得るには以下のようにする。
``vals`` と ``counts`` が最頻値と出現回数をそれぞれ表す。

>>> from scipy import stats
>>> vals, counts = stats.mode(x)

百分位数
----------------------------------------------------------------------
統計データ ``x`` の百分位数を得るには次のようにする。

* ``np.percentile(x, q)`` の戻り値。ただし ``q`` は 0 から 100 までの数。

  * ``q = 0`` ならば最小値が得られる。
  * ``q = 100`` ならば最大値が得られる。
  * ``q = 50`` ならば中央値が得られる。

SciPy にも同等の機能はあるのだが、NumPy が提供する上述の関数の仕様を推奨している。

分散
----------------------------------------------------------------------
統計データ ``x`` の分散を得るには以下のいずれかを用いればよい。

* ``x.var()`` の戻り値。
* ``np.var(x)`` の戻り値。
* ``n, (smin, smax), sm, sv, ss, sk = scipy.stats.describe(x)`` として ``sv`` を採る。

分散といえば ``N`` で割るのか ``N - 1`` で割るのかという問題がつきまとうが、
NumPy の ``var`` はキーワード引数 ``ddof`` を明示的に与えれば biased でも unbiased でも求まる。
デフォルトでは ``ddof=0`` なので biased であり、
例えば ``x.var(ddof=1)`` として呼び出せば unbiased な分散が得られる。
一方 ``scipy.stats.describe`` のほうは unbiased な分散を返す。

標準偏差
----------------------------------------------------------------------
統計データ ``x`` の標準偏差を得るには以下のいずれかを用いればよい。分散と同様。
NumPy のキーワード引数 ``ddof`` に関する事情も同様。

* ``x.std()`` の戻り値。
* ``np.std(x)`` の戻り値。
* ``n, (smin, smax), sm, sv, ss, sk = scipy.stats.describe(x)`` として分散 ``sv`` から平方根をとって標準偏差を計算する。

範囲幅
----------------------------------------------------------------------
統計データ ``x`` の範囲幅を得るには以下のいずれかを用いればよい。

* ``np.ptp(x)`` の戻り値。
* 以下の手順で得る。

  #. 先述の手法で ``x`` の最大値と最小値を求める。
  #. 両者の差を取り、この値が範囲幅となる。

歪度
----------------------------------------------------------------------
統計データ ``x`` の歪度を得るには以下の手順で得る。

* ``scipy.stats.skew(x)`` の戻り値。
* ``n, (smin, smax), sm, sv, ss, sk = scipy.stats.describe(x)`` として ``ss`` を採る。

尖度
----------------------------------------------------------------------
統計データ ``x`` の尖度を得るには以下の手順で得る。歪度と同様。

* ``scipy.stats.kurtosis(x)`` の戻り値。
* ``n, (smin, smax), sm, sv, ss, sk = scipy.stats.describe(x)`` として ``sk`` を採る。

確率分布
======================================================================
各種確率分布用の機能はモジュール ``scipy.stats`` 配下に大量に用意されている。
まずは `リファレンス <http://docs.scipy.org/doc/scipy/reference/stats.html>`_ から
distribution とかで検索すると色々とわかる。

代表的な離散型確率分布を気の向くままいくつか記す。

==================  ==============  =========================  ============================
分布型              名称            オブジェクト               Frozen RV オブジェクト作成例
==================  ==============  =========================  ============================
``rv_discrete``     一様分布        ``scipy.stats.randint``    サイコロを振るのならば ``rv = randint(1, 7)`` のようにする。
``rv_discrete``     Bernoulli 分布  ``scipy.stats.bernoulli``  コイントスならば ``rv = scipy.stats.bernoulli(0.5)`` のようにする。
``rv_discrete``     二項分布        ``scipy.stats.binom``      麻雀半荘を ``N`` 戦やってのトップ回数ならば ``rv = binom(N, 1/4)`` のようにする。
``rv_discrete``     Poisson 分布    ``scipy.stats.poisson``    例が思いつかないが ``rv = scipy.stats.poisson(1/256)`` のようにする。
``rv_continuous``   一様分布        ``scipy.stats.uniform``
``rv_continuous``   指数分布        ``scipy.stats.expon``
``rv_continuous``   正規分布        ``scipy.stats.norm``
``rv_continuous``   ガンマ分布      ``scipy.stats.gamma``
``rv_continuous``   カイ二乗分布    ``scipy.stats.chi2``
``rv_continuous``   t 分布          ``scipy.stats.t``
==================  ==============  =========================  ============================

各種確率分布オブジェクトを利用する場合は次のような手順でコードを組むことになる。

#. 分布の種類に対応する **Frozen RV** オブジェクトを生成する。
   以下の説明ではオブジェクトの変数名を ``rv`` とする。
#. 目的に応じて ``rv`` のメソッドを呼び出す。

   * 平均値、分散、歪度、尖度の計算は
     ``mean, var, skew, kurt = rv.stats(moments='mvsk')`` でする。
   * 離散型分布の確率質量関数は ``rv.pmf(...)`` を利用する。
   * 連続型分布の確率密度関数は ``rv.pdf(...)`` を利用する。
   * 累積分布関数は ``rv.cdf(...)`` を利用する。
   * 乱数を生成するには ``rv.rvs()`` を利用する。

モーメント量の計算ならば次のようにする。

.. code-block:: python3

   from scipy.stats import D
   rv = D(...)
   mean, var, skew, kurt = rv.stats(moments='mvsk')

.. include:: /_include/python-refs.txt
