======================================================================
常微分方程式
======================================================================
本稿では SciPy_ を用いて簡単な微分方程式の数値計算を行う。
どうも偏微分方程式は現時点では未実装らしいので、
常微分方程式だけを解くことにする。

.. contents::

関数 ``scipy.integrate.odeint``
======================================================================
関数 ``scipy.integrate.odeint`` を利用することで、
常微分方程式を数値的に解くことができる場合がある。

コード的な手順は次のとおりとなる。これはもっとも単純な使い方に過ぎない。

#. 後述のコード例中に見られるような関数 ``deriv`` を定義する。

   * 第 1 引数が微分方程式中の未知関数。本説明では ``y`` とする。
   * 第 2 引数が関数のパラメーター。本説明では ``t`` とする。
   * 戻り値がパラメーター ``t`` における ``[一次微分, 二次微分, ...]`` を意味する。

#. 未知関数の定義域に亘るパラメーター列を用意する。後述コード例の ``time`` が相当する。
#. 微分方程式の初期値（初期条件）を数値で与える。後述コード例の ``yinit`` が相当する。
#. 関数 ``scipy.integrate.odeint`` に三者を引数にして呼び出す。

   * 戻り値が ``time`` 各パラメーターに対応する未知関数 ``y`` の各値である。

コード例を示す。定数係数 2 階線形微分方程式を解くものだ。

.. literalinclude:: /_sample/scipy/odeint.py
   :language: python3

私の環境での実行結果は次のとおり。
いつものような ``print`` ではプログラムの実行内容がさすがに理解不能なので、
本稿はプロットによるグラフ描画の出力を示す。
微分方程式 :math:`y'' +3y' + 2y = 0` は
:math:`y = C_1 e^{-x} + C_2 e^{-2x}` が一般解であり、
図の曲線はそのように見えるだろう。

.. image:: /_static/scipy-ode.png
   :scale: 60%

.. include:: /_include/python-refs-core.txt
.. include:: /_include/python-refs-sci.txt
