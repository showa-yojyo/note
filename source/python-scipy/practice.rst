======================================================================
ドキュメントを読む
======================================================================
SciPy_ サイト内のリンクを色々と辿っていったところ、どうやら次のタイトルの文書が有用なようだ。

* `Getting Started <http://scipy.org/getting-started.html>`_
* `SciPy Tutorial <http://docs.scipy.org/doc/scipy/reference/tutorial/index.html>`_
* `Cookbook <http://wiki.scipy.org/Cookbook>`_

そこで、本稿ではこれらの文書の読書ノートを記すことにする。

.. contents::

Getting Started
======================================================================
初心者をなるべく速く SciPy を理解させ、かつ生産的にさせることを目的とするページ。

What are NumPy, SciPy, matplotlib, ...?
----------------------------------------------------------------------
* NumPy_ の配列型は数値に関する作業に対して便利。
* SciPy_ は科学的な作業に必要な routines を含む。例を挙げると次のようなものがある。

  * 数値積分
  * 微分方程式のソルバー
  * 最適化
  * 疎行列

* Matplotlib_ は高品質はプロットを生産する。数値モデルを図示するのに便利。
* IPython はインタラクティブな作業を容易にする。

How to work with SciPy
----------------------------------------------------------------------
* 一番普通のやり方は、IPython を利用すること。これでコマンドを入力し、スクリプトを走らせる。
* スクリプトを書くには、はどんなテキストエディターを用いてもよい。
* <Some of the packages such as Python(x,y) mentioned in *Installing the SciPy Stack*
  also offer an integrated scientific development environment>
  読み違えていなければ、他のページで列挙されている SciPy Stack の構成要素は次のパッケージ群を指す。

  * Python_: 言語自身も構成要素である。
  * NumPy_: 数値計算の土台をなすパッケージ。
  * SciPy_: 当パッケージ。
  * Matplotlib_: プロットパッケージ。
  * IPython_: インターフェイス。環境と言ったほうが伝わる。
  * Pandas_: データ構造パッケージ。
  * SymPy_: 計算機数学・計算機代数パッケージ。
  * Nose_: 単体テストに便利なパッケージ。

* NumPy も SciPy もプロット機能を提供しない。プロットパッケージとしては Matplotlib_ が最も普通に利用されている。

.. todo::

   * IPython とやらを試す。
   * Pandas とやらを試す。
   * SymPy とやらを試す。

Learning to work with SciPy
----------------------------------------------------------------------
* Python の全般に関するの学習は、公式サイトの Python チュートリアルが素晴らしい。
* Python での数値計算に関して

  * 各種ツールに関する理解を得る方法のひとつは、次に挙げるオンラインリソースを当たることだ。

    * http://scipy-lectures.github.io/index.html
    * http://wiki.scipy.org/Additional_Documentation
    * http://docs.scipy.org/doc/scipy/reference/tutorial/index.html

  * それに加えて、書籍が多数あるので活用すること。
    Google で ``SciPy scientific python`` 等のキーワードで検索するとよい。

An example session
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* IPython 環境上での操作例を記した文章。Bessel 関数の最大値の計算とプロット出力を行う例にいつの間にか書き換えられている？
* **SciPy Stack** をインストール済みであることを事前条件としている。

An example script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
前述の操作をスクリプトでやったらどうなるかを記した文章。

* モジュール ``argparse`` を利用してコマンドライン引数を実装している。
* 関数 ``np.linspace`` が等間隔に値を並べる配列を生成するものであることが読み取れる。明らかに使い勝手が良い。

SciPy Tutorial
======================================================================
このガイドブックのチュートリアル "SciPy Tutorial" こそが言わば公式チュートリアル。
SciPy の機能を厳選して構成されたと思われるので、一通り読んでみたくなる。
しかし、各章かなりの分量がある。テキストおよび画像がふんだんにあり、重い。自分の興味のあるトピックに絞ってまずは学習を進めたい。

Introduction
----------------------------------------------------------------------
見出しのとおり、SciPy の紹介および導入手順の記述となっている。

* SciPy は MATLAB, IDL, Octave, R-Lab, SciLab をライバルと位置づけている。
* 例の ``import numpy as np`` 等のインポート規約をしているのはここ。
* サブパッケージの構成と要約の表がある。
* ``help``, ``np.info``, ``np.source`` がヘルプ三種の神器。

  * ``info`` はキーワード引数でテキストの書式を細かくコントロールできる。
  * ``source`` はちょっと珍しい機能なので、
    初めて使う ``scipy`` 配下の関数に対して、一度は試してみる価値あり。
    もし ``Not available for this object.`` というメッセージが出たら諦める。

Basic functions in Numpy (and top-level scipy)
----------------------------------------------------------------------
Interaction with Numpy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* モジュール ``scipy`` のトップレベルは ``numpy`` の関数をすべて含む。
  なので ``a = scipy.arange(5)`` のようにも書けるが、そうはせずに ``a = np.arange(5)`` のように書くほうがよい。

Index Tricks
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
配列インスタンスを素早く作成するために、
``np.r_``, ``np.c_``, ``np.mgrid``, ``np.ogrid`` の使い方を習得する。

* オブジェクト ``np.r_`` は各配列を横に連結するのに使える。関数 ``np.concatanate`` よりタイプしやすい。
* ステップ数を指示するのに、変な使い方で虚数 (j) を与えることになる。
* 同様に ``np.c_`` は各配列を縦に（して横に）連結できる。
* N 次元配列を定義するのにオブジェクト ``np.mgrid`` を利用できる。拡張スライス記法が使える。
* ``np.ogrid`` は使い途がわからない。ちょっと触っただけだが。

Shape manipulation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
多次元配列を縦にしたり、横にしたり、分割したり、……といった操作をするルーチンを指す。

Polynomials
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SciPy では多項式を取り扱う方法はふたつある。両方の形式は相互に交換可能である。

#. クラス ``np.lib.polynomial.poly1d`` で多項式オブジェクトを定義する。例えば：

   * ``p.integ`` で原始関数取得。キーワード引数 ``k`` が定数項。
   * ``p.derive`` で導関数取得。
   * ``p(arraylike)`` で評価。

#. 単に配列で多項式の係数を表現するもの。この場合は降べきの順に係数を格納する。

Vectorizing functions (vectorize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* 関数 ``vectorize`` を使うと、スカラー引数を取りスカラー値を戻す関数 ``func`` から、
  array-like 版 ``func`` を新たに定義することができる。

* こんなものを使わなくても、最初からベクトルを引数に取ってベクトル値を返す関数を定義すればよい？
  いや、何らかの最適化の結果であったり、組み込み関数などは ``vectorize`` しないとベクトル化できまい。

Type handling
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* ``np.iscomplex``/``np.isreal`` は配列ベースで、要素ごとの判定。
* ``np.iscomplexobj``/``np.isrealobj`` はオブジェクトベースで、引数丸ごと全体の判定。
* 実部・虚部の取得には関数形式の ``np.real``/``np.imag`` を利用するとよい。戻り値が配列型になる。

  * 絶対値が極めて小さい場合は、関数 ``np.real_if_close`` も考慮する。

* スカラー性の判定には関数 ``np.isscalar`` を。
* 型キャストには ``np.cast`` オブジェクトを。

Other useful functions¶
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
その他便利な機能を羅列している。

* 角度モノを取り扱うときは ``angle``, ``unwrap`` を当たってみる。
* 等間隔に値を定義する場合は ``linspace`` が有用。対数版は ``logspace`` を。
* 関数 ``select`` は「複数版 if 文」みたいなもの。
* モジュール ``scipy.misc`` には色々とある。

  * 階乗の計算には ``factorial`` 系関数（浮動小数点型ならばガンマ関数）で得られる。
  * n 個から k 個を選ぶ組み合わせ :math:`_n \mathrm{C} _r` は ``comb(n, k)`` で求まる。
  * かの Lena の画像イメージを返す関数 ``lena`` が存在する。

* 関数 ``central_diff_weights`` と ``derivative`` は関数の微分の近似に便利。

Special functions (scipy.special)
----------------------------------------------------------------------
TBW

Integration (scipy.integrate)
----------------------------------------------------------------------
数値積分および常微分方程式にまつわる技法を提供するサブパッケージ。

関連ノートは複数にまたがって記す。

* :doc:`/python-scipy/integrate`
* :doc:`/python-scipy/ode`

Optimization (scipy.optimize)
----------------------------------------------------------------------
最適化アルゴリズムや一変数関数の根を求める計算機能等を提供するサブパッケージ。

ノートは別項 :doc:`/python-scipy/nonlinear-equations` で扱う。

Interpolation (scipy.interpolate)
----------------------------------------------------------------------
補間機能に関する機能を提供するサブパッケージ。
ノートは別項 :doc:`/python-scipy/interpolate` で扱う。

Fourier Transforms (scipy.fftpack)
----------------------------------------------------------------------
TBW

Signal Processing (scipy.signal)
----------------------------------------------------------------------
画像処理か。

Linear Algebra (scipy.linalg)
----------------------------------------------------------------------
線形代数に関する機能を提供するサブパッケージ。

* ``sci.mat`` を利用すると MATLAB 風表記で行列インスタンスを定義できる。
* 行列 ``A`` に対して、もし存在すれば逆行列は ``linalg.inv(A)`` または ``A.I`` で得られる。
* 1 次方程式 :math:`Ax = b` を ``linalg.solve(A, b)`` で解くことができる（解が存在すれば）。
* ``A`` の行列式は ``linalg.det`` で求める。
* ノルムには関数 ``linalg.norm`` を用いる。ノルムの種類を引数で指示する。
* 最小二乗法には ``linalg.lstsq`` を用いる。
* 固有値・固有ベクトル、各種分解も可能。
* 行列のテイラー展開による各種関数もサポート。

関連ノートは複数にまたがって記す。

* :doc:`/python-scipy/linear-equations`
* :doc:`/python-scipy/eigenvalues`
* :doc:`/python-scipy/least-squares`

Sparse Eigenvalue Problems with ARPACK
----------------------------------------------------------------------
TBW

Statistics (scipy.stats)
----------------------------------------------------------------------
確率、統計の計算に関する機能を提供するサブパッケージ。
ノートは別項 :doc:`/python-scipy/statistics` で扱う。

Compressed Sparse Graph Routines (scipy.sparse.csgraph)
----------------------------------------------------------------------
TBW

Multi-dimensional image processing (scipy.ndimage)
----------------------------------------------------------------------
ここも画像処理か。

File IO (scipy.io)
----------------------------------------------------------------------
SciPy はある種のファイルフォーマットを操作できるということがわかる。
MATLAB ファイルやら WAV ファイルやら。

Weave (scipy.weave)
----------------------------------------------------------------------
Python コードの内部に C/C++ のコードを含めるためのパッケージだそうだ。
今は読む必要はない。

Cookbook
======================================================================
よくあるタスクのレシピ集のページのようだ。導入レベルのものからまったく高度なものまで幅広く取り揃っている。

Scipy Central
----------------------------------------------------------------------
レシピの検索および投稿は http://scipy-central.org/ でできるようだ。

NumPy / SciPy
----------------------------------------------------------------------
まずは "NumPy / SciPy" を見ていく。

* BuildingArrays は NumPy の基本中の基本である array インスタンスの
  作り方について説明している。コードを一通り手で打って実行して結果を見るべし。

  * ``dtype`` の結果が異なるかもしれない。
  * bool-array で array の要素群にアクセスできるのは初耳。
  * 多次元スライスに早く慣れること。
  * ``linspace``, ``mgrid``, ``ogrid``, ``zeros``, ``ones`` が便利なことがある。
  * 組み込み関数 ``reduce`` を利用した ``mdot`` の実装例。

* Rank and nullspace: 行列の階数を二種類のトレランスを指定して計算する例。
* Interpolation: 指定点列を通過するスプライン曲線を得る例と、
  フィッティングの例を説明。

* Optimization は専門外なのでわからない。
* Linear Regression: ``scipy.stats.linregress``
* A coupled spring-mass system: 微分方程式を解く例に、
  ばねと重りのペア 2 つを摩擦のある床の上に置いて引っ張る状況を出している。

* Intersection of functions: ``scipy.optimize.fsolve`` で 2 曲線の交点が求められる。
* KDTree: ``scipy.spatial.kdtree.KDTree`` 別ページ :doc:`/python-scipy/spatial` を参照。

Graphics は何か色々あるが、
Matplotlib_ と PIL の ``Image`` データ作成方法しか用がない。

あとは SWIG 関連か。

Advanced topics
----------------------------------------------------------------------
まだ 1 レシピしかないもよう。

Compiling Extensions
----------------------------------------------------------------------
まだ 1 レシピしかないもよう。しかも Windows 限定の話題。

Scientific Scripts
----------------------------------------------------------------------
TBW

Input Output
----------------------------------------------------------------------
TBW

Graphics
----------------------------------------------------------------------
TBW

Using NumPy With Other Languages (Advanced)
----------------------------------------------------------------------
高度な内容となる。

Scientific GUIs
----------------------------------------------------------------------
TBW

.. include:: /_include/scipy-refs.txt
