======================================================================
Data Structures: Objects and Arrays
======================================================================

本書のウェブページ <https://eloquentjavascript.net/code> では特定の章の内容に沿ったコードを実行することができる。
別の環境で演習問題に取り組む場合は、本章の完全なコードをリンク先からダウンロードすることになる。

.. contents::

The weresquirrel
======================================================================

プログラミング言語の教科書でリス男の小説が突如始まる。

Data sets
======================================================================

JavaScript には値の並びを格納するためのデータ型が用意されている。
これは配列と呼ばれ、角括弧で囲まれた値のリストをカンマで区切って定義する。
構文は Python の ``list`` に似ているようだ。

.. code:: javascript

   let listOfNumbers = [2, 3, 5, 7, 11];
   console.assert(listOfNumbers[2] == 5);
   console.assert(listOfNumbers[0] == 2);
   console.assert(listOfNumbers[2 - 1] == 3);

Properties
======================================================================

* JavaScript ではオブジェクトのほとんどすべてがプロパティーを有する。
  例外は ``null`` と ``undefined`` だ。
* JavaScript でプロパティーにアクセスするには、ドットと角括弧の二つの方法がある。

  * だから ``value.x`` が有効な式であるとすれば ``value["x"]`` も有効だ。

* 配列の要素は、その配列のプロパティーとして格納される。

Methods
======================================================================

* 関数を含むプロパティーはふつうはその値のメソッドと呼ばれる。

Objects
======================================================================

* 型 ``object`` の値は、プロパティーのコレクションとみなせる。
  オブジェクトを作成する一つの方法は、中括弧を使ってプロパティーを列挙するというものだ。

.. code:: javascript

   let day1 = {
       squirrel: false,
       events: ["work", "touched tree", "pizza", "running"]
   };

* JavaScript では、中括弧には意味が二つある。

  * 文のブロックを定義するもの
  * そうでなければオブジェクトを定義するもの

* 存在しないプロパティーを読み取ると、値 ``undefined`` が得られる。
* プロパティーの値がすでに存在している場合は置き換えられ、
  存在しない場合は新しいプロパティーが存在しない場合は、オブジェクトに新しいプロパティーを作成する。
* 単項演算子 ``delete`` をオブジェクトのプロパティーに適用すると、指定されたプロパティーをオブジェクトから削除する。
  Python の ``del`` に似ている。
* 演算子 ``in`` は、文字列とオブジェクトに適用すると、そのオブジェクトに指定した名前のプロパティーがあるかどうかをテストする。
* 関数 ``Object.keys`` にオブジェクトを渡すと、オブジェクトのプロパティー名を表す文字列の配列が返る。
* 関数 ``Object.assign`` は、あるオブジェクトのすべてのプロパティーを別のオブジェクトにコピーする。

.. code:: javascript

   console.log(Object.keys({x: 0, y: 0, z: 2}));
   // → ["x", "y", "z"]

   let objectA = {a: 1, b: 2};
   Object.assign(objectA, {b: 3, c: 4});
   console.log(objectA);
   // → {a: 1, b: 3, c: 4}

Mutability
======================================================================

* 数値、文字列、ブーリアンなど、これまでの章で説明してきた値の種類は、すべて mutable だ。
  これらの型の値を変更することはできない。
* 変数には変更可能なものと一定のものがあるが、これは値の振る舞いとは別のもの。
* オブジェクトへの ``const`` 定義は、それ自体は変更されず、同じオブジェクトを指し続けるものの、
  そのオブジェクトの中身は変更される可能性がある。
* 演算子 ``==`` でオブジェクトを比較する場合、同一性によって比較する。
  異なるオブジェクトを比較すると、たとえ同一のプロパティーを持っていたとしても ``false`` を返す。

The lycanthrope's log
======================================================================

* ブレース記法のプロパティー名の後に値がない場合、その値は同じ名前のものとなる。
* 相関係数の説明がある。
* :math:`\varphi \approx 0.069` となり、わずか。ピザを食べても変身には影響しないだろう。

Computing correlation
======================================================================

* JavaScript では、2×2 の表を 4 要素の配列で表すことができる。
* しかし、平板な配列を使うほうが単純で、表にアクセスする式を短くすることができる。

結果として得られたデータセットは本章のコーディングサンドボックス <https://eloquentjavascript.net/code#4> にある。
ここでは ``JOURNAL`` とダウンロード可能なファイルに保存されている。

* 指定した値が配列内に存在するかどうかをテストするメソッド ``includes`` がある。

残るは、記録されたタイプのすべてのイベントの相関関係を見つけて、何か目立つものがないかどうかを見ることとなった。

Array loop
======================================================================

現代の JavaScript では配列、文字列、その他のデータ構造をループするのに次の構文を使える：

.. code:: javascript

   for (let entry of JOURNAL) {
       console.log(`${entry.events.length} events.`);
   }

The final analysis
======================================================================

分析の結果、ピーナッツを食べることがリスに変身する確率に強い正の影響を与えること、
歯を磨くと大きな負の効果があることが観察された。

Further arrayology
======================================================================

配列のメソッドをいくつか挙げる。

* ``unshift`` と ``shift`` はそれぞれ先頭に対して要素を追加、削除する。
* ``indexOf`` と ``lastIndexOf`` は想像通りの振る舞いをする。
* ``slice`` は Python のそれと似ている。
* ``concat`` は Python の ``extend`` と同等。二項演算子 ``+`` と同じ。

Strings and their properties
======================================================================

* ``indexOf`` には引数に文字列を与えられることに注意する。
* ``slice`` は配列のそれと同等の振る舞いをする。
* ``trim`` は Python の ``strip`` に相当する。
* ``padStart`` というメソッドが存在する。

  .. code:: javascript

     console.assert("6".padStart(3, "0") == "006");

* ``split`` は Python と同様。
* ``join`` は Python と主客転倒している。
* ``repeat`` がある。

Rest parameters
======================================================================

* JavaScript でも可変個引数関数を定義することができる。関数の最後の引数の前に ``...`` を書く。
* 引数の配列をとる関数を呼び出す際にも、同様の三点表記が使える。
* ある配列を他の配列に埋め込むようなこともできる。

.. code:: javascript

   function max(...numbers) {
       let result = -Infinity;
       for (let number of numbers) {
           if (number > result) result = number;
       }
       return result;
   }

   let numbers = [5, 1, 7];
   console.assert(max(...numbers) == 7);

   // read another array into the new array.
   let words = ["never", "fully"];
   console.assert(["will", ...words, "understand"]);

The Math object
======================================================================

* ``Math`` はオブジェクトというよりも単なる名前空間のように捉えたい。
  ここにある関数や値が大域変数である必要がないようにしたいので、こういう形式になっている。
* 乱数機能は ``Math`` にある。

Destructuring
======================================================================

.. code:: javascript

   function phi(table) {
       return (table[3] * table[0] - table[2] * table[1]) /
           Math.sqrt((table[2] + table[3]) *
               (table[0] + table[1]) *
               (table[1] + table[3]) *
               (table[0] + table[2]));
   }

これは次のようにも書ける：

.. code:: javascript

   function phi([n00, n01, n10, n11]) {
       return (n11 * n00 - n10 * n01) /
           Math.sqrt((n10 + n11) * (n00 + n01) *
           (n01 + n11) * (n00 + n10));
   }

また、次のようにすることでオブジェクトのプロパティーの値を得られる。

.. code:: javascript

   let {name} = {name: "Faraji", age: 23};
   // or let {age} = {name: "Faraji", age: 23};
   // or let {name, age} = {name: "Faraji", age: 23};
   console.assert(name == "Faraji");

JSON
======================================================================

JSON という一般的なシリアライズフォーマットがある。

* JavaScript 以外の言語でも、Web 上のデータ保存・通信フォーマットとして広く使われている。
* JavaScript には、JSON との間でデータを変換するための関数 ``JSON.stringify`` と ``JSON.parse`` がある。

Summary
======================================================================

* オブジェクトや配列は、複数の値を一つの値にまとめるものだ。
* JavaScript のほとんどの値はプロパティを持っているが、例外は ``null`` と
  ``undefined`` の二つ。
* プロパティーにアクセスするには ``value.prop`` または ``value["prop"]`` のように書く。
* 配列は通常、型が同じ値を任意の個数だけ格納する。プロパティーの名前には数字を使用する。
* 配列要素を ``for`` ループで反復するときには ``for(let element of array){ ... }``
  のような特別な構文を利用できる。

Exercises
======================================================================

.. todo:: 問題をやるのは後回し。
