=====================
入門 xyzzy 読書ノート
=====================

最初で最後の Xyzzy 解説本。本書の改訂版が出ることすらなかったようだ。
この怪テキストエディターを主題に本を著すのは至難と言えよう。

:著者: 山本泰三・日枝政弘・稲川知久・佐野匡俊
:出版社: 株式会社オーム社
:ISBN: ISBN4-274-06600-2

.. contents:: ノート目次

はじめに
==================================================
* <既に xyzzy を使っており xyzzy の標準機能をさらに広く知りたい人は
  「第 7 章テキストを効率的に編集するための機能」から読み始めることをおすすめします>
  (p. v) とあるゆえ、本腰を入れてノートをとるのは、その章からでよいだろう。

* 油断ならないのは環境変数の規約。

  * ``$XYZZY`` は「xyzzy のインストールディレクトリ」を指す。
    つまり ``xyzzy.exe`` のあるディレクトリの絶対パスだ。
  * Bash のように記号 ``~`` でホームディレクトリを表現する。
    環境変数名は後述。

第 1 章 xyzzy の概要
==================================================
短いページ数で概要をザッと説明している。
<Emacs に似たテキストエディタ> (p. 7) とのこと。

第 2 章 xyzzy の導入
==================================================
2.1 インストール
--------------------------------------------------
* ここで紹介されている Noah は、実際に試してみると xyzzy 抜きで優れた圧縮・解凍ツールだということが実感できた。
* ``xyzzycli.exe`` と ``xyzzy.exe`` のショートカットファイルを両方作っておくのがよさそうだ。
  ランチャーや Send To フォルダに入れておく。

2.2 環境変数の設定
--------------------------------------------------
* <xyzzy は、ホームディレクトリとして環境変数 ``XYZZYHOME`` を参照> (p. 12) するのだが、
  経験上 ``HOME`` で代用が効くので、以降の ``XYZZYHOME`` を勝手に
  ``HOME`` で置き換えて読ませてもらう。このノートでも同様。

2.3 xyzzy の起動と終了
--------------------------------------------------
* 超必修事項：
  <何らかの理由により xyzzy が終了できなくなった場合は、
  ``C-g`` と入力してください。
  このコマンドを実行すると、処理の実行待ちである状態から抜け出したり、
  実行途中の処理を中断したりすることができます。> (p. 17)

2.4 初期設定ファイルの作成
--------------------------------------------------
* Emacs における ``.emacs`` に相当するファイルは Xyzzy では ``.xyzzy`` であり、
  ファイルを置く場所もホームディレクトリとなる。
* ``siteinit.l`` ファイルは ``$XYZZY/site-lisp`` に置く。
* これらのファイルの詳細については、6.2 で行う。

第 3 章 xyzzy に触れてみる
==================================================
GUI の操作を説明しているだけだから読み飛ばす。

第 4 章 xyzzy を使う上での基礎知識
==================================================
4.1 画面構成
--------------------------------------------------
* ミニバッファとステータスバー

  * <ミニバッファは、ユーザが xyzzy と対話的な処理を行うための領域です。
    これは、他の Windows 系のエディタにはない、非常に特徴的な機能のひとつで、
    ユーザは、ミニバッファを通じてコマンドを入力して実行したり、
    値の入力を行ったりすることができるようになっています。> (p. 35)
    Emacs も含め、テキストエディタがこの種の GUI を備えているのは非常に珍しいと思う。

* カーソルとポイント

  * <テキスト入力位置を示すための四角い目印をカーソルと呼び、
    カーソルがある位置のことをポイントと呼びます。
    ポイントの位置は、実際には、カーソルの左側の文字と文字となります。> (p. 36)
    とあるが、xyzzy の設定ダイアログを見たり等すると、
    カーソルではなくキャレットという用語を使っているようだ。

4.4 キーバインド
--------------------------------------------------
* xyzzy のコマンドを起動する基本的な方法は、
  コマンド名を明示的に指定しての呼び出しだ。
  例えば forward-char を実行したければ、まず
  ``M-x`` をキーイン、つまり ``Esc`` を押した後 ``X`` キーを押す。
  それからミニバッファにて ``forward-char`` とキーインすると、
  xyzzy の forward-char コマンドが起動し、めでたくキャレットが一文字分次に移動する。

  だが、forward-char コマンドは使用頻度が高い。
  毎回このような入力をするわけはなく、単に ``C-f`` をキーイン、
  つまり、Ctrl キーを押しながら ``F`` キーを押すだけでこのコマンドが起動するようになっている。

  この例のように、「コマンド」と「キーボード入力手順」を関連付けることを
  **キーバインド** と呼ぶ。

* キーバインドの集合を **キーマップ** と呼ぶ。

  * **グローバルキーマップ** は、すべてのモードで共有して適用されるキーマップ。
  * **ローカルキーマップ** は、編集モード等で独自に適用されるキーマップ。
  * ローカルの方が優先される。

* 修飾キー

  * xyzzy では ``Ctrl``, ``Shift``, ``Meta`` キーを修飾キーとして使う。
  * Meta キーは、``Esc`` キーや ``Alt`` キーで代用する。
  * ``Ctrl`` で修飾するには、キーを押したまま修飾したいキーを押す。
  * ``Shift`` で修飾するには、``Ctrl`` と同様にする。
  * ``Esc`` で修飾するには、 
    ``Esc`` を「押して離して」から修飾したいキーを押すことで実現する。
  * ``Alt`` で修飾するには、 ``Ctrl`` と同様にする。
  * 修飾キーを複数同時に適用したい場合は、うまく工夫する。

* 2 ストロークキー

  * 2 ストロークキーとは、 ``C-x C-f`` や ``C-c C-f`` のように、
    <割り当てられた機能を実現するために、2 回のキー入力が必要となるキー操作のこと> (p. 42)
    をいう。
  * 3 ストロークキーも存在する。
  * すべてのストロークを終了しない時点で ``C-g`` とキーインすると、
    それまでの入力全体をキャンセルできる。

第 5 章 基本的な操作
==================================================
* <Windows 系のエディタ特有の操作と、Emacs 風の操作が混在してくる。> (p. 45)

5.1 文字入力とカーソル移動
--------------------------------------------------
本書で言うカーソルはキャレットを指す。

* <よくあるケースが、プログラムのソースコードを編集しているときに Tab キーを押すと、
  コードがインデントされるだけで、TAB 文字が挿入されないというものです。> (p. 45)
  こういう場合は ``C-q`` (quote-char) の後に堂々と Tab キーを押せばよい。

* <カーソルキーを使うとホームポジションから手が離れてしまうので、
  ``C-f`` / ``C-b`` / ``C-n`` / ``C-p`` を好んで使うユーザも多いようです。> (p. 47)

* xyzzy を使っていて困るのは、人に触らせると Home キーや End キーを押してくることなのを思い出した。

* ページ単位で移動するコマンド (``C-x [`` / ``C-x ]``) は知らなかった。
  オープンソースのプロジェクトのソースコードとかを見ると、
  ``^L`` が含まれていることがあるぐらいで、馴染みがなかった。

5.2 ファイル操作
--------------------------------------------------
* ``C-x C-w`` の挙動が Emacs と違うので注意。
  Emacs 風にカスタマイズすることができる。
* ``C-x C-v`` でファイルを「開きなおす」ことができる。
  内容が巻き戻るのは前回保存した時点まで。

5.3 バッファ操作
--------------------------------------------------
* バッファの切り替えはバッファバーのタブをクリックすることで行うのが基本。
* バッファが多い場合はバッファ選択ダイアログを使うと便利。 ``F2`` キー押し。
* 切り替えるというより、一度に保存やクローズをしたい場合は ``list-buffers`` コマンドがよい。
  ``C-x C-b`` で実行。
* バッファを閉じるには、以下のどれかの操作がよさそう。

  * バッファバーのタブの右クリックメニューから「閉じる」。
  * ``C-x k`` で ``kill-buffer`` する。
  * ``list-buffers`` のバッファ経由で閉じる。

* 書き込み許可の切替は ``C-x C-q`` で行う。モード行の左端。

5.4 編集
--------------------------------------------------
* xyzzy にはテキストの範囲選択が二系統ある。
  <セレクションは、Windows で一般的に使われている選択範囲のことを指し、
  リージョンとは、Emacs で使われている指定されたテキストの領域のことを指します。>
  (p. 55)
* 個人的には xyzzy ではほとんどリージョンで済ますが、
  セレクションの切り取り、コピー、貼り付けのショートカットキーがそれぞれ
  ``C-Delete``, ``C-Insert``, ``S-Insert`` であることは知っておく。

* ``M-@`` で単語をリージョンとして設定できることを初めて知った。

* ``M-x yank-and-pop`` は何か便利な利用法があるだろうか。

5.6 その他の操作
--------------------------------------------------
ミニバッファ一口メモ。

* ミニバッファにおける入力テキストの補完ルールについて説明。
  どうも Bash のコマンドライン補完に似ていて、
  Tab や Space で入力中の文字列を補完してくれる。

* ミニバッファの入力履歴機能。

  * 使えるキーは
    ``Up`` / ``C-p`` / ``M-p``, 
    ``Down`` / ``C-n`` / ``M-n``,
    ``C-Up``, ``C-Down`` なのだが、Ctrl キー付きのものは「全履歴対象」だ。
    <既にミニバッファに何らかの文字列が入力されているかどうかは関係なく、
    全ての履歴を参照しようとします。> (p. 67)

  * 履歴データは
    ``$XYZZY/usr/$USERNAME/OS/.xyzzy.history`` というファイルに保存される。

* ミニバッファでのキー操作

  * Home キーを押すと、バッファのキャレット位置の単語がミニバッファに現れる。
    ただし、ミニバッファのキャレット位置はその末端にないと、予期せぬ位置の単語が現れるようだ。

  * ``C-c /`` で文字列中の \ を / に置換できる。
    逆方向の置換も用意されている（がまず使わない）。

  * 処理のキャンセル操作として、ここでも ``C-g`` が通じる。

第 6 章 基本的な設定
==================================================
6.1 共通設定ダイアログ
--------------------------------------------------
設定ダイアログには個人的に興味がない。

* 共通設定で設定された値は、次のファイルに保存されている。

  * ``$XYZZY/usr/$USERNAME/$OS/xyzzy.ini``
  * ``$XYZZY/usr/$USERNAME/$OS/.xyzzy.history``

* <バックアップファイルは、対象ファイルの末尾に
  ``~`` もしくは ``.番号~`` を付加したものとなります。> (p. 71)

6.2 初期設定ファイル
--------------------------------------------------
一方こちらは重視している。

* <次の 2 つのファイルをまとめて初期設定ファイルと呼びます。> (p. 71)

  * ``~/.xyzzy``
  * ``siteinit.l``

* 慣れぬ間は ``.xyzzy`` のほうに記述をしたほうがよい。
  というより、「ユーザー」設定なのだから 
  $HOME にあるファイルでカスタマイズ内容を記述するのが当然だと思う。

* 初期設定ファイルの反映で気をつける点が一つ。
  ``siteinit.l`` を編集した場合には、xyzzy を普通に再起動するだけでは不十分。
  Ctrl と Shift キーを押しつつ、xyzzy を起動する必要がある。

第 7 章 テキストを効率的に編集するための機能
==================================================
7.1 検索/置換
--------------------------------------------------
* 再検索は ``F5`` で順方向、 ``S-F5`` で逆方向。
* 正規表現による検索をする場合は、 ``M-s`` で順方向、
  ``M-r`` で逆方向。再検索をする場合は先程と同じく ``F5`` キーが使える。

  * 手許の環境を確かめたら、 ``M-r`` は単に replace-string になっているが？

* インクリメンタルサーチは絶対に欠かせないが、
  <あらかじめ専用のライブラリ ``isearch.l`` をロードしておく必要があります。>
  (p. 83)
  ::

    (require "isearch")

  * ``C-s`` または ``C-r`` を押すたびに次の箇所へジャンプしていく。
  * 検索の中止は ``C-g`` を入力する。
  * <インクリメンタルサーチ中に ``C-w`` を入力すると、
    カーソル位置の単語の末尾までが検索文字列として取得> (p. 85) できる。
  * インクリメンタルサーチの弱点は、日本語文字列の指定が難しいこと。

* 連続検索 (csearch) について触れているが、何が便利なのかよくわからない。

* 置換は問い合わせ型 (query-replace) と一括型がある。
* grep が非常に便利。

  * grep バッファで、検索結果行で ``F10`` を押すと、
    別バッファにそのファイルのその行を表示する。
    ``F11`` で次の検索結果行にジャンプする。
    そして、一個前の検索結果行に戻りたければ ``C-u F11`` を押す。

* ミニバッファの grep について

  * ``M-x grep`` は入力を正規表現とみなすらしい。
    <正規表現を使いたくない場合は、 ``fgrep`` コマンドを使います。> (p. 96)
  * カレントバッファのみを対象に検索する方法がある。
    ``C-u M-x grep`` なり ``C-u M-x fgrep`` なりすればできる。

* 一括置換

  * gresreg-dialog で、指定フォルダのファイル群に一括置換を適用できる。
  * ``M-x gresreg`` 系のコマンドで、開いている全バッファを対象に一括置換を適用できる。

    ============================  =========================
    ``M-x gresreg``               文字列一括置換
    ``M-x query-gresreg``         確認しながら gresreg
    ``M-x re-gresreg``            正規表現で文字列一括置換
    ``M-x query-gresreg-regexp``  確認しながら re-gresreg
    ============================  =========================

7.3 矩形処理
--------------------------------------------------
* <ここでいう「矩形処理」とは、長方形に区切られた領域内のデータを切り取ったり、
  コピーしたり、貼り付けたりする処理のことです。> (p. 100)
* 個人的にはリージョン矩形しか利用しないので、そこだけノートをとる。
* ``kill-rectangle``, ``yank-rectangle``, ``string-rectangle`` を多用していたが、
  copy, clear, open, delete の各種矩形コマンドにも慣れよう。

7.4 文字の変換
--------------------------------------------------
* 文字の変換機能は、日本語関連に関してはセレクションが対象となる。
* <全角文字のひらがなは半角文字のカタカナに変換されます。
  （略）逆に、半角文字から全角文字へ変換する場合には、
  半角文字のカタカナを全角のひらがなとカタカナのどちらに変換するかを選ばなくてはなりません。> (p. 109)
  とあるが、もう面倒だからいつでもカタカナで構わないと思う。
* リージョンの変換。知らなかったコマンドだけノート。

  ===========  ==============================
  ``C-x C-u``  リージョンの文字を大文字に変換
  ``C-x C-l``  リージョンの文字を小文字に変換
  ===========  ==============================

7.5 編集モード
--------------------------------------------------
メジャーモードに関する解説。

* c-mode では <``M-;`` と入力すると行末に C 言語のコメントが挿入されます。> (p. 111)
* ファイルの先頭部分（具体的には 1000 文字以内）に、次の記述を含めておく。
  そうすると、ファイルを開いたときにメジャーモードがそれに設定される。
  このルールは拡張子ルールよりも強い。
  ::

    -*- Mode: モード -*-

  例えば c-mode を強制的に適用したい場合はこうなる：
  ::

    /* -*- Mode: c -*- */

7.6 詰め込み
--------------------------------------------------
* ``M-x auto-fill-mode`` というマイナーモードがあるが、
  これは新規文書作成時に利用するのが普通のようだ。

* 既存のテキストに対しては、fill-region 系コマンドを利用するのがわかりやすそうだ。
  パラグラフまたはリージョンが対象となる。

* C++ コメントの詰め込みという、非常に実用的な例が p. 116 にある。
  ``C-x .`` で詰め込み接頭辞を指定し、 ``M-q`` で詰める。

7.7 略称展開
--------------------------------------------------
略称展開はテキスト入力の手間を大幅に軽減する機能ゆえ、
ここを確実に押さえておくことが極めて重要だ。

Emacs 同様、xyzzy も静的展開と動的展開を実装している。
経験上、使用頻度は動的展開のほうが圧倒的に大きい。

* ``C-x /`` で、入力途中の単語に対し、
  動的略称展開候補を順次表示する。

  * キーバインドは普通 ``M-/`` に変えると使いやすい。

* ``C-x \`` で、入力途中の単語に対し、
  動的略称展開候補をポップアップリストに表示する。

* ``*dabbrevs-no-undo*`` 変数は知らなかった。

静的展開 (``M-x abbrev-mode``) は仕込みの質がすべて。

* ``M-x edit-abbrevs``, ``M-x list-abbrevs`` で編集可能

7.9 キーボードマクロ
--------------------------------------------------
* <``C-u`` の後に 0 を入力すると、無限回繰り返されます。
  ただし、編集可能領域の先頭/末尾にカーソルが到着すると止まります。> (p. 127)
* 暴走したキーボードマクロを <強制的に停止させるには ``C-g`` を入力> (p. 128) 
  すればよい。
* CSV データの整形にキーボードマクロを応用する例は、とてもよく出来ている。
  ミニバッファでの Lisp 式評価がマクロに組み込まれているのが、例として素晴らしい。

7.10 その他の編集方法
--------------------------------------------------
* 今まで何度も顔を出していた digit-argument の説明。
  ``C-u 数字`` と ``M-数字`` のどちらでも構わない。
* ``C-u C-x C-f`` は「文字エンコーディングを指定してファイルを開く」。
* テキストの整形コマンドとして列挙されているものを眺めていたら、見慣れぬものが多い。
  どうやら center-region と indent-region 以外を
  string-rectangle と delete-region で代用していたからのようだ。
* 空白文字の処理コマンドは覚えておいたほうがよい。

  * ``C-x C-o`` 複数の空行を削除。常に利用機会がある。
  * ``M-\`` カーソル前後の空白文字を削除。
  * ``M-/`` カーソル前後の空白文字をまとめて半角空白文字一個に圧縮。
    プログラムコード編集時に利用しがち。キーバインドは多分これと違うものにしている。
  * ``M-^`` カーソル前後の空白文字と直前の改行を削除。
    複数行にまたがるような関数のパラメータ行を編集するのに便利。

第 8 章 テキストを自在に移動するための機能
==================================================
8.1 カーソルの移動
--------------------------------------------------
* ``M-f``, ``M-b`` について <日本語の場合には、
  漢字やカタカナや記号などの出現箇所を区切りとして移動します。> (p. 135)
* ``M-}``, ``M-{`` で段落単位でキャレットを移動する。
  一瞬素直にスクロールしたほうが早いのではと思ったが、
  まさに今編集している reST 形式のテキストでは、段落単位で移動するのも便利だ。

8.2 グローバルマーク
--------------------------------------------------
* ``C-F2`` でそんなダイアログボックスが出る。
  しおり機能だが、どうせ使わない。

8.3 タグジャンプ
--------------------------------------------------
これも使わない。grep で間に合っている。

第 9 章 複数のファイルを効率的に編集するための機能
==================================================
9.1 セッション
--------------------------------------------------
* xyzzy のコマンドラインオプションに、セッションを指定するものがある。
  ::

    $ xyzzycli -s xxx.ssn

9.3 ファイラ
--------------------------------------------------
grep と gresreg は便利かもしれない。

第 10 章 テキストの編集を補助するための機能
==================================================
<特に文字エンコーディングは、Windows のテキストエディタとして最高レベルの完成度>
(p. 173) とあるが、少なくとも日本語に関しては不自由したことがない。

10.1 印刷
--------------------------------------------------
* ヘッダとフッタの書式を指定することができる。
  日付の書式をカスタマイズしたいことが多いはずなので、これは押さえたい。

10.2 バックアップ
--------------------------------------------------
* 設定ダイアログのバックアップファイル画面で、
  「バックアップファイルをつくる」のチェックを外せば、当該機能を無効化できる。

10.3 多言語
--------------------------------------------------
* フォントの設定を共通設定ダイアログのフォントタブで行う。
* 文字セットに対応したフォントの調べ方が p. 192 の囲み記事にある。
  Internet Explorer のインターネットオプションダイアログにある、
  全般タブのフォント設定画面を見て、「テキスト形式フォント」にリストされるフォントのどれかならば、
  xyzzy で利用できるらしい。
* <xyzzy には、ラテン語（フランス語、ドイツ語、イタリア語など）入力支援用の
  Lisp が用意されています。（略）簡単なラテン語入力環境としては十分です。> (p. 193)

  * ``(require "iso8859-1")``
  * 例えば ``C-x 8 " U`` とキーインすると、大文字の U にウムラウトが付いた文字が得られる。

この後、中国語、ロシア語、東アジア言語、フランス語等の OS 別入力方法の解説がある。
個人的には無用なトピックなので、ノート割愛。

10.4 改行コード/文字エンコーディング
--------------------------------------------------
* 次のコマンドは必修。

  =============  ==========================================
  ``C-x C-k n``  現在のバッファの改行コードを変更
  ``C-x C-k f``  現在のバッファの文字エンコーディングを変更
  =============  ==========================================

* ファイル新規作成時の改行コード、エンコーディングを指定する方法がある。
  ::

    (setq *default-fileio-encoding* *encoding-euc-jp*)
    (setq *default-eol-code* *eol-lf*)

10.5 クリップコードエンコーディング
--------------------------------------------------
クリップボードにテキストが入っている場合に、
xyzzy にその文字エンコーディングをどのように解釈させるかを指定する機能か。

* メニューアイテムの「クリップボードエンコーディング」か、
  ``M-x change-clipboard-encoding`` でエンコーディングを変更できる。
* <相手側のアプリケーションが Shift-JIS でしか受け取れないのであれば、
  クリップボードエンコーディングは Shift-JIS にしておかなければなりません。>
  (p. 211)
* xyzzy のバッファに <表示されている文字を適切にファイルに保存できるかどうかは
  バッファエンコーディングに依存します。> (p. 214)

第 11 章 他のアプリケーションに代わりになる機能
==================================================
11.1 電卓
--------------------------------------------------
* ``M-x calc`` で電卓バッファ登場。バッファを閉じるには kill-buffer でよい。
* ``set`` と入力すると、電卓変数が一覧できる。

  * ``set 変数名=値`` で変数に値をセットする。
  * ``1 / 3`` を小数値として表示したい場合は ``set ratio=float`` とする。
  * 自分で変数を定義することができる。いきなり ``r=3`` のように評価すればよい。
  * 自分で関数を定義することができる。
    ::

      $ add(x,y)=x+y
      function
      $ add(3,2)
      5

  * かなりの数のビルトイン関数がある。

第 12 章 その他の標準機能
==================================================
12.1 外部プログラムの実行
--------------------------------------------------
ここでは <バッファの内容をフィルタプログラムに通す> (p. 243) 方法を習得しよう。

=========  ==================================================================
``C-x &``  外部プログラムを非同期実行して、その標準出力をバッファに表示する。
           ls, find, make 等向き。
``C-x #``  バッファ全体をフィルタプログラムの結果で置き換える。
           sort, uniq 等向き。
``C-x |``  リージョンをフィルタプログラムの結果で置き換える。
=========  ==================================================================

* msdev や devenv は ``C-x &`` で。
  ありがたいことに、コンパイルエラーを grep バッファ同様に
  F10 と F11 キーで発生箇所にジャンプできる。

12.2 その他の機能
--------------------------------------------------
buffer-menu
~~~~~~~~~~~
* ``C-x C-b`` 画面でのキー操作方法を、次のものだけは少なくとも記憶しておくこと。

====================  ===========
削除マークをつける    ``d`` ``k``
各種マークを取り消す  ``u``
マークに従って実行    ``x``
====================  ===========

calendar
~~~~~~~~
* ``M-x calendar`` でカレンダーバッファが出現する。
  デスクトップのそれと比べ、祝日を見るのに便利という利点がある。
  法律が変わるたびに calendar.l をメンテナンスする必要があるが。

第 13 章 拡張 Lisp の導入
==================================================
13.2 手動で導入する
--------------------------------------------------
パッケージによる導入方法の違いもあるが、基本的には以下の手順になる。

1. ``$XYZZY/site-lisp`` に Lisp ファイルを置く。
2. ``~/.xyzzy`` を編集して、その機能を有効にするようなコードを追加する。
3. xyzzy を再起動する。

第 14 章 機能のカスタマイズ
==================================================
14.1 キーバインド
--------------------------------------------------
* <特定のキーに対応した機能が知りたければ、
  ``describe-key`` を使い知りたいキーを入力することによりその説明が表示されます。>
  (p. 286)
* xyzzy **全体の** キーバインドを変更するには、初期設定ファイルに次のように記述する。
  ::

    (global-set-key キー入力 コマンド)

* 全体ではなく、メジャーモードのキーバインドを変更する場合は、このようになる。
  ::

    (require モジュール名)
    (define-key モードのキーマップ キー入力 コマンド)

14.3 各機能のカスタマイズ例
--------------------------------------------------
フックの概念を押さえるだけでよい。

14.4 初期設定ファイル
--------------------------------------------------
* .xyzzy と siteinit.l の違いを押さえる。

  * .xyzzy は各ユーザーがそれぞれ持っていると考える。
  * xyzzy は siteinit.l の評価後に .xyzzy を評価する。
  * siteinit.l の更新は Ctrl + Shift 押しの xyzzy 再起動で完遂となる。
  * .xyzzy はバイトコンパイルの対象にできない。

* 囲み記事。xyzzy は ``$XYZZYHOME`` を ``$HOME`` よりも優先する。
* .xyzzy を分割するテクニックがある。
  ::

    (load-file "~/myfoo.l")
    (load-file "~/mybar.l")

  ポイントは、各 Lisp ファイルはバイトコンパイルができるということ。

Aa xyzzy Lisp 導入編
==================================================
.xyzzy やスクラッチバッファに記述するだけで使える Lisp コードを挙げていくコーナー。

Aa.1 定型の文字列の挿入
--------------------------------------------------
* insert 関数でキャレット位置に指定文字列を挿入する。
* 関数定義の最初に ``(interactive "*")`` がある。
* global-set-key 関数で関数とキーバインドを関連付ける。

  * 文字列とキーバインドを関連付けることもできる。

Aa.2 日付の挿入
--------------------------------------------------
* format-date-string 関数で現在時刻の取得と書式整形を同時に行う。

Aa.3 タグの挿入
--------------------------------------------------
「キャレット位置を一時的に移動してから insert する」例を挙げている。
::

  (save-excursion
    (何かキャレット位置を変更する関数)
    ...)
  ; ここでキャレット位置が復帰する

Aa.4 一括置換
--------------------------------------------------
異なるパターンのテキスト置換を一度に行う例を挙げている。
::

  (save-excursion
    (beginning-of-buffer)
    (replace-string "《" "【" t)
    (beginning-of-buffer)
    (replace-string "》" "】" t))

Ab xyzzy Lisp 言語編
==================================================
Ab.1 実行例について
--------------------------------------------------
* <実行例は場面に応じて ``*scratch*`` バッファとミニバッファで評価します。> 
  (p. 305)
* <ミニバッファで式を評価するには、Esc キーを 2 度オスとミニバッファにカーソルが移動するので、
  式を入力してください。> (p. 306)
* 特殊な理由により、キャレットやバッファを移動するような式は、ミニバッファで評価する。

Ab.2 xyzzy の構成
--------------------------------------------------
* <xyzzy が機能性や拡張性に優れているのは、
  標準 Lisp ファイルが使用しているさらに低レベルに位置する関数を、
  ユーザも同じように使うことができるからです。> (p. 306)

Ab.4 xyzzy Lisp の言語仕様
--------------------------------------------------
すべてを習得する必要はないので（いざとなったら外部アプリ呼び出しができる）、
テキトーにノートをとる。

コメント
~~~~~~~~
* <慣習的に、行頭ならば ``;;;`` 、
  行頭でない場合には ``;;`` 、
  コメントに先立って何か入力があれば ``;`` 、と使い分けられているようです。>
  (p. 309)

データ型
~~~~~~~~
* シンボルがちょっとわかりにくい。
  <他のプログラミング言語でいうところの関数名、変数名に相当します。>
  (p. 311) とある。C/C++ でいうところの識別子という解釈でよろしいか。
* <シンボルを式中に記述する場合には、 ``'シンボル`` という形式で記述します。>
  (p. 311)

キーワード引数の指定
~~~~~~~~~~~~~~~~~~~~
::

  ;;; 文字列の比較 (p. 316)
  (string= "other" "other") => t
  (string= "other" "mother") => nil
  (string= "other" "mother" :start2 1) => t

文字列のマッチ・置換
~~~~~~~~~~~~~~~~~~~~
foo とか bar とかいう変な名前を多用するのは勘弁して。

* string-match と match-string をペアで利用する。

制御構造
~~~~~~~~
::

  ;;; 複数の式を評価する。if で頻繁に使うらしい。
  (progn 式1 ... 式N)

  ;;; let のスコープで有効な変数を扱える
  (let (変数名1 ... 変数名N) 式1 ... 式M)

  ;;; if
  (if 条件式 式1 [式2])

  ;;; when - if と似ている
  ;;; unless - if not の意
  (when 条件式 式1 ... 式N)
  (unless 条件式 式1 ... 式N)

  ;;; cond - C 言語の switch に相当する
  (cond (条件式1 式11 ... 式1N1)
        (条件式2 式21 ... 式2N2)
        ...
        (条件式M 式M1 ... 式MNM))

  ;;; dolist - リストの走査
  (dolist (変数 リスト) 式1 ... 式N)

  ;;; dotimes - カウンターを使ったループ
  (dotimes (変数 回数) 式1 ... 式N)

  ;;; while
  (while 条件式 式1 ... 式N)

  ;;; loop - endless loop
  (loop 式1 ... 式N)

  ;;; return - ループを break する
  (return [式])

関数の定義
~~~~~~~~~~
::

  (defun 関数名 (引数1 ... 引数N)
     式1 ... 式M)

* デフォルト引数は ``&optional``
* キーワード引数は ``&key``

  * 値の指定方法は ``:仮引数名 値`` と書く。

* 可変個引数は ``&rest``

マクロの定義
~~~~~~~~~~~~
Lisp はマクロが強力だと聞いたことがある。

* <xyzzy Lisp では実行時の情報を参照しつつマクロ展開を動的に行うことができる>
  (p. 333)

Ac xyzzy Lisp 基本編
==================================================
大雑把にノートをとるので、後で確かめるときには既存の Lisp ファイルに当たること。

Ac.1 テキスト
--------------------------------------------------
* ``M-x`` から入力して実行できる関数は ``(interactive)`` なモノに限る。
* 各行について処理を行うコードは次のようになる。
  ::

    ;;; 各行について処理を行うコード
    (loop 処理 (unless (next-line) (return)))

* スキップ系の関数を使い分ける。
  ``skip-chars-forward``, ``skip-white-forward``, skip-syntax-spec-forward`` 等がある。

* テキストの挿入は ``insert`` が基本。キャレット位置に文字列をねじ込む。
* テキストの取得は ``buffer-substring`` を使う。
  ::

    ;;; カーソルのある行を取得 (p. 342)
    (buffer-substring (progn (goto-bol) (point))
                      (progn (goto-eol) (point)))

* テキストの削除は ``delete-region`` を使う。
* テキストの検索は <``scan-buffer`` を使うことをおすすめします。> (p. 342)

  * しばしば ``match-string``, ``match-beginning``, ``match-end`` を併用する。
  * ``scan-buffer`` のキーワード引数を使いこなせるように。

* テキストの置換は ``replace-buffer`` を使う。
  こちらもキーワード引数がある。

* ``save-excursion`` と ``save-restriction`` を同時に利用するならば、
  この順序で入れ子にするべし。さもないと、キャレット位置が元に戻らない場合がある。

* 正規表現のコンパイルは ``compile-regexp`` を用いる。

  * 正規表現はバックスラッシュが面倒。

Ac.3 ファイル
--------------------------------------------------
* 意味のあるフォルダ各種を取得する関数がいくつか存在する。
  ::

    (default-directory) ; バッファに関係する作業フォルダを返す

    (si:system-root) ; $XYZZY を返す
    (etc-path) ; $XYZZY/etc を返す
    (user-homedir-pathname) ; ホームディレクトリ ~ を返す

    (get-special-folder-location :start-menu) ; スタートメニューのパスを返す

* パス名を表す文字列を操作するための関数がある。

  * パスを連結するには ``merge-pathnames`` を用いる。Python での sys.path.join に相当する？
  * フォルダセパレーターは ``/`` でも ``\`` でも構わない。

* パス名を表す文字列を与えて、それが実在するか、
  属性はどうなっているのか、といったことをテストする関数が存在する。

* ファイルのコピーや削除といった、シェル的な操作をする関数も提供する。

* 関数 ``directory`` を使うと、UNIX の ls みたいなことができる。
  本関数はリストを返すので、これを ``dolist`` で走査するのが基本的な利用法。

Ac.4 バッファ
--------------------------------------------------
バッファは、ファイルに関連付けられた「オブジェクト」だと解釈すればよさそうだ。

* xyzzy では、常にバッファが一つだけ選択されている（カレントバッファ）。
  ``selected-buffer`` で得られる。
* ファイル名、パス名からバッファを得ることが可能
  (``find-buffer``, ``get-file-buffer``)
* ``buffer-list`` 関数で、その名前が示すものが得られる。
* すべてのバッファを対象とする処理は、次のように書くことになる。
  ::

    (save-excursion
      (dolist (buf (buffer-list))
         (set-buffer buf)
         (バッファを対象とする処理)))

* エンコーディング

  * ``buffer-fileio-encoding``, ``set-buffer-fileio-encoding``
  * <文字エンコーディングに使用する定数は ``$XYZZY/lisp/encoding.l`` で定義されています。> (p. 357)

* 改行コードを ``buffer-eol-code``, ``set-buffer-eol-code`` でアクセスできる。
* メジャーモードを変数 ``buffer-mode`` で参照できる。
* ``need-not-save`` 変数で、バッファの内容を保存する必要性を操作できる。
  変数名に not が入っているので、意味を逆に取り違えそうで怖い。

Ac.6 キーマップ
--------------------------------------------------
キーバインドと、それに関連付けられたコマンドの対応をまとめた表をキーマップと呼ぶ。

キーマップは 3 つに分類して理解するとよさそうだ。

1. グローバルキーマップ。優先度が最も低い。
   変数 ``*global-keymap*`` で管理されている。
2. ローカルキーマップ。メジャーモードのキーマップ。
   例えばテキストモード (text-mode) のキーマップは *text-mode-map* で管理されている。
3. マイナーモードマップ。マイナーモードのキーマップであり、優先度が最も高い。

* 既存のキーマップに、キーバインドを追加することと、
  キーマップに指定するキーバインドがあるか否かをテストする方法だけ押さえておけばよさそうだ。

  * ``(define-key キーマップ キー コマンド)`` で追加。
  * ``(lookup-keymap キーマップ キー)`` でコマンドまたは ``nil`` が返る。

Ad xyzzy Lisp 応用編
==================================================
Ad.1 メニューを作成する
--------------------------------------------------
* メニューは Lisp で定義されている。ユーザーがカスタマイズすることが可能。
* メニューには、メニューバー (``*app-menu*``) とポップアップ (``*app-popup-menu*``) の二種類がある。
* メニューは、xyzzy の起動時に作成されている。

メニューの静的な作成
~~~~~~~~~~~~~~~~~~~~
::

  (define-menu 項目1 ... 項目N)
  (define-popup-menu 項目1 ... 項目N)

* 項目は次のどれかの式になる。
  ::

    :sep
    :separator
    (:sep タグ)
    (:separator タグ)
    (:item タグ 項目名)
    (:item タグ 項目名 コマンド)
    (:item タグ 項目名 コマンド 表示形式)
    (:popup タグ 項目名 項目1 ... 項目N)

  * タグがよくわからない。
    ``nil`` でよいようだ。
  * 項目名は文字列。
  * コマンドは選択時の処理を記述するわけだが、
    <対話的な関数を指定しないと、メニュー項目を選択した時点でエラーが発生する> (p. 373)
  * 表示形式はメニュー項目のグレーアウトの条件を決める。
    ``:modified``, ``:undo``, ``:clipboard`` 等がある。
  * ``$XYZZY/lisp/app-menu.l`` が参考になる。

メニューの動的な作成
~~~~~~~~~~~~~~~~~~~~
::

  ;;; メニューをゼロから作成する
  (create-pop-menu) => メニューを作る
  (create-popup-menu) => ポップアップメニューを作る

  ;;; メニューにセパレーターを入れるには次のいずれかを用いる
  (add-menu-separator メニュー)
  (add-menu-separator メニュー タグ)

  ;;; メニューアイテムの追加は次のいずれか
  (add-menu-item メニュー タグ 項目名)
  (add-menu-item メニュー タグ 項目名 コマンド)
  (add-menu-item メニュー タグ 項目名 コマンド 表示形式)

  ;;; ポップアップメニューの追加はこれ
  (add-popup-menu メニュー ポップアップメニュー 項目名)

メニューの挿入
~~~~~~~~~~~~~~
* ``pipe-command`` と ``filter-buffer`` を呼び出す例は、いいヒントになりそう。

::

  (insert-popup-menu *app-menu* 6 自作メニュー "外部コマンド(&O)")

* <このように位置を直接指定してもよいのですが、
  タグを指定したほうが他の拡張 Lisp との兼ね合い上安全です。> (p. 377)

::

  ;;; 修正後
  (insert-popup-menu *app-menu* 
    (get-menu-position *app-menu* 'ed::help)
    自作メニュー "外部コマンド(&O)")

* <``use-local-menu`` を使うとバッファだけに有効なメニューバーを設定できます。> (p. 378)

* 初期設定ファイルで、``*app-menu*`` を直接変更してはならない。
  <初期設定ファイルでメニューのカスタマイズを行う際には必ず次のように記述してください。
  （略）メニューバーが画面から消えてしまう場合があります。> (p. 379)
  ::

    (add-hook '*init-app-menus-hook* メニューのカスタマイズを記述)

Ad.2 ツールバーを作成する
--------------------------------------------------
普通の意味でのツールバーと、タブバーをまとめて説明している。

Ad.3 メジャーモードを作成する
--------------------------------------------------
* <基本的にファイル名から拡張子をとったものをモジュール名とします。
  モジュールを宣言すると、ロード済みモジュールを管理しているリスト
  ``*modules*`` にモジュール名が追加されます。> (p. 391)
* <``*scratch*`` などのバッファで評価する場合には ``user`` パッケージが選択されています> (p. 391)
* <キーワードファイルは ``*keyword-load-path*`` から検索されます。> (p. 393)
* シンタックステーブルとは、<文字の構文上の扱いの違いを表現する> (p. 394) もの。
  構文クラスという考え方があり、空白文字、シンボル構成文字、コメント開始・終了文字などがある。

  * <正規表現で検索する場合には、単語の開始位置、
    シンボルの開始位置はシンタックステーブルを参照して判断されます。> (p. 395)

* ``mode-specific-なんとか`` 変数群は面白そうだ。

B その他の情報
==================================================
B.1 FAQ
--------------------------------------------------
* ``C-q TAB`` (``M-x quote-char``) で、どんなときでもタブ文字をキャレット位置に挿入できる。
* フック関数にて、仕込んであるキーバインドを ``undefine-key`` 関数で削除できる。
* USB メモリ上で使用するやり方。今ならもうちょっといい方法がありそう。

Emacs 風設定
~~~~~~~~~~~~
個人的に必須だと判断したものを抜書きしておく。
::

  ;;; pp. 410-412

  ;;; インクリメンタルサーチ
  ;;; C-s でダイアログが出なくなる
  (require "isearch")

  ;;; M-% を確認アリ置換にする
  (define-key esc-map #\% 'query-replace)
  (define-key esc-map #\C-% 'query-replace-regexp)

  ;;; C 言語系編集時にはこれがないと話にならない
  (define-key esc-map #\C-\\ 'indent-region)

  ;;; 矩形処理各種のうち、次の三つはキーバインド必須
  (define-key ctl-x-map '(#\r #\k) 'kill-rectangle)
  (define-key ctl-x-map '(#\r #\t) 'string-rectangle)
  (define-key ctl-x-map '(#\r #\y) 'yank-rectangle)

  ;;; M-/ で動的補完
  (require "dabbrev")
  (define-key esc-map #\/ 'dabbrev-expand)

B.4 共通設定ダイアログ
--------------------------------------------------
確認したい項目だけノート。

* フォントタブ

  * フォント (Terminal)
  * サイズ (10)
  * \ をバックスラッシュに変換 (ON)

* 表示タブ

  * 表示する？

    * 改行 (ON)
    * TAB (ON)
    * 全角スペース (ON)
    * 行番号 (ON)
    * EOF (ON)
    * ルーラ (ON)

  * テキストの折り返し (OFF)
  * タブの幅 (4)
  * キャレットを点滅 (OFF)
  * タブバーを横書きにする (ON)

* バックアップファイルタブ

  * バックアップファイルをつくる (OFF)

* 自動セーブタブ

  * 自動セーブする (OFF)

* さまざま

  * 音を鳴らす系のオプションを無効にする。
  * ウィンドウの位置・サイズに関するオプションを有効にする。

B.5 ローカル設定ダイアログ
--------------------------------------------------
* <ローカル設定は共通設定よりも優先され、現在のバッファのみに適用されます。>
  (p. 436)

B.6 正規表現
--------------------------------------------------
* 日本語が扱える
* ``()|{}`` は通常の文字として扱われる。エスケープが必要。
* 文字クラスや等価クラスといったものには対応していない。
* メタキャラクター

  * ``\s``, ``\S`` は構文クラス文字マッチ。

B.8 標準キーバインド一覧
--------------------------------------------------
* 「標準のまま利用するもの」「別のキーバインドに置き換えるもの」「無効化するもの」に分類して整理したい。

  * Emacs と同じ意味を持つキーバインドは「標準のまま利用」する。
  * Emacs と違う意味を持つものは、Emacs 風にキーバインドを定義しなおす。
  * 自分が絶対に利用しないコマンドのキーバインドは、すべて ``undefine-key`` する。

あとがき
==================================================
著者の皆様、お疲れ様でした。
読者も疲れました。
