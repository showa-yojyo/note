======================================================================
オブジェクト指向における再利用のためのデザインパターン改訂版 読書ノート 1/3
======================================================================

:著者: Eric Gamma/Richard Helm/Ralph Johnson/John Vlissides
:監訳者: 本位田真一 吉田和樹
:出版社: ソフトバンク クリエイティブ株式会社
:ISBN: ISBN4-7973-1112-6

.. contents:: ノート目次

ローマ数字ページ
======================================================================
* 監訳者曰く <現在、確固たる地位を築いているのは UML と、
  本書に掲載されている GoF パターンだけであると言っても過言ではない> (p. iii)

* <実際は、すべて一人の人物によって書かれた章はほとんどない> (p. iv)

* 本書の対象読者の想定レベルが <我々が型やポリモルフィズムについて（略）
  論じたからと言って、ただしに近くの解説書に手を伸ばすようなことではだめである>
  (p. v) と厳しい。

* デザインパターンは <標準的なオブジェクト指向言語を用いて実装できるものばかりである> (p. v)

* <実のところ我々も、最初に書いたときにすべてを理解していたわけではない。
  本書は、一回読んでその後本棚にしまっておくような本ではない> (p. v)

* あるメールアドレスにあるメッセージを送ると、本書の「サンプルコード」
  のコードを入手できる。

* <もっともシンプルで、かつ、もっとも使われている以下のパターンから読み始めるとよいだろう>
  (p. viii) とあるので、素直に従ってみる。

  * Abstract Factory パターン
  * Factory Method パターン
  * Adapter パターン
  * Composite パターン
  * Decorator パターン
  * Observer パターン
  * Strategy パターン
  * Template Method パターン

第 1 章 概論
======================================================================

* <初心者が「良いオブジェクト指向設計とは何か」を学ぶには多大な時間がかかる> (p. 13)
* <良い解法を見つけたときには、それを何回も何回も用いる> (p. 13)
* <小説家や脚本家が構想をゼロから創作することはめったにない> (p. 13)

* <本書の目的は、オブジェクト指向ソフトウェアを設計する際の経験を
  **デザインパターン** として記録することである> (p. 14)

1.1 デザインパターンとは
----------------------------------------------------------------------

* パターンは次の 4 つの基本的な要素を有している

  * パターン名称
  * 問題：<どのような場合にパターンを適用すべきか> (p. 15)
  * 解法：<パターンはさまざまな状況に適用できるテンプレートのようなもの> (p. 15)
  * 結果：結果と共に、適用時のトレードオフも記述する。

* <何がパターンで何がパターンでないかの解釈は、人それぞれである> (p. 15)
  セオリーは人によるのさ by 安永五段か。

* 本書で扱うデザインパターンを <設計上の一般的な問題の解決に適用できるよう、
  オブジェクトやクラス間の通信を記述したもの> (p. 15) と宣言している。

* これらのパターンの中には <あまり一般的でない言語によって直接サポートされている> (p. 16)
  ものがあるらしい。

1.2 Smalltalk MVC
----------------------------------------------------------------------
Smalltalk とはなんぞや。後で調べる気になったら調べればいいか。

* M: Model, V: View, C: Controller

* MVC におけるデザインパターンを見れば、パターンの意味するところを理解できる (p. 16)
* MVC では柔軟性と再利用性を向上させるべく、これらを独立して扱う (p. 16)

* View オブジェクトは Model オブジェクトの状態を反映することを保証 (p. 16)

  * View と Model を分離するという設計例を、より一般的な問題にも適用できる。
    これは Observer パターンの特殊な場合とみなせる。

* View オブジェクトをネストできる。
  View のサブクラスとして CompositeView クラスを定義し、そこにネストする (p. 17)

  * この設計例もより一般的な問題に適用できる。
    オブジェクトのグループ化だ (p. 17) → Composite パターンの例だろう。

* <Controller オブジェクトにはクラス階層が存在し、
  これを利用することにより、既存の Controller クラスの派生として簡単に新しい
  Controller クラスを生成することができる> (p. 17) → Strategy パターンの一例。

1.3 デザインパターンの記述
----------------------------------------------------------------------
<設計を再利用するためには、設計プロセスの途中でのさまざまな決定事項や代替案、
トレードオフも記録しておかねばならない。（略）具体的な例も必要である> (p. 18)

パターンの記述法をパターン化することで、カタログたり得るということか。

1.5 カタログの構成
----------------------------------------------------------------------
要注意だと思ったのは、デザインパターンを「クラスパターン」と
「オブジェクトパターン」に分けていること。
パターン数は前者が圧倒的に少ない。

* クラスパターンはクラスとサブクラス間の関連を扱い、静的なもの。
* オブジェクトパターンはオブジェクト間の関連を扱い、動的なもの。

* パターンの中にはしばしば他のパターンと一緒に用いるものがある。
  Composite パターンは Iterator パターンや Visitor パターンと共に用いる (p. 24)

1.6 デザインパターンで設計問題を解く
----------------------------------------------------------------------
このセクションは妙に長い。

* <設計過程に置いて生じる抽象的な考え方は、設計を柔軟にしてくれる> (p. 25)
* <インタフェースはオブジェクト指向システムの基本である> (p. 26)
* <デザインパターンはインタフェースとして記述してはいけない事項も教えてくれる> (p. 26)
  として、Memento パターンがその例であることを説明している。

* <たいていのプログラミング言語ではインタフェースの継承と実装の継承の間を区別していないが、
  実際にはプログラマはこれらを区別して扱っている> (p. 29)

* サブクラス化による再利用はホワイトボックス再利用 (p. 30)
* オブジェクトコンポジションによる形式の再利用はブラックボックス再利用 (p. 31)
* <継承にもコンポジションにも、それぞれ利点と欠点がある> (p. 31)

* <理想的には、再利用を実現するために、
  新たに部品を作り出す必要がないようにしておくべきである> (p. 31)

* <委譲の主な利点は、実行時に動作を合成することが容易であること、
  合成する方法の変更が容易であることである> (p. 32)
* <委譲にも欠点がある。（略）静的なソフトウェアよりも理解しにくい> (p. 32)

* 集約関係の説明：
  <集約オブジェクトがその保有者とは同一のライフタイムを有することを意味する> (p. 34)

* 集約関係 (aggregation) と知り合い関係 (acquaintance) は、
  しばしば同じ方法で実装されるので混同しやすい (p. 34)

* <再設計を余儀なくされるいくつかの原因> (p. 35) と回避策のリスト (p. 36) がためになる。

  * 特定の実装に委ねるのを避け、間接的にオブジェクトを生成する。
  * プラットフォームへの依存度をできるだけ小さくするように設計する
  * クライアントに対して、実装の詳細を隠す。
  * 変更する可能性のあるアルゴリズムは局所化する
  * 結合度の低いシステムの実現を支援するために、
    抽象化あるいは階層化技法を用いる。
  * オブジェクトコンポジションを多用すると、理解しにくくなるのも事実 (p. 37)

1.8 どのようにデザインパターンを使うか
----------------------------------------------------------------------
<デザインパターンを無秩序に適用すべきではない。
（略）そのデザインパターンの与える柔軟性が真に必要な場合にのみ適用すべきである> (p. 42)

第 2 章 事例：ドキュメントエディタの設計
======================================================================

----

:doc:`gamma95-note2` へ。
