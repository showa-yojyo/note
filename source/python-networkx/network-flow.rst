======================================================================
ネットワークフロー
======================================================================
本稿では NetworkX_ の提供する機能を利用して、各種ネットワークフロー問題を解決する方法について記す。

.. contents::

最大フロー
======================================================================
上下水道路、ガス管網、電線網、通信網、等々、ある種の「流れ」を表現するグラフが与えられているときに、
その源流始点から終点までに流すことのできる水量なり電流なりの最大値、
ここでは最大フローと呼ぶことにするが、この値を求める問題を解くための機能について記す。

各種ネットワークの水道管なり電線なりをグラフの辺として解釈するわけだが、
その各辺に付随する容量を属性として定義するのが肝要だ。

お手軽な手法
----------------------------------------------------------------------
NetworkX_ では最大フローを求める関数はズバリ ``nx.maximum_flow`` だ。
まずはキーワード引数を全く指定せずに利用する例を示す。
すなわち、グラフと始点と終点だけを指定するだけで最大フローを求める。

Wikipedia_ の説明文の図を拝借して、実行してみる。
図の各辺のキャプションの ``/`` の右側の値が容量だから、グラフの構築コードは次のようになる。

.. literalinclude:: ../../sample/networkx/maxflow.py
   :language: python3

実行結果は次のようになる。最大フローが得られており、
各辺の流量が Wikipedia_ の図の各辺のキャプションの ``/`` の左側の値と一致した。

.. code-block:: console

   $ python maxflow.py
   maximum flow: 5
   (s, o): 3/3
   (s, p): 2/3
   (o, p): 0/2
   (o, q): 3/3
   (q, r): 1/4
   (q, t): 2/2
   (p, r): 2/2
   (r, t): 3/3

残余ネットワーク計算アルゴリズムを指定する手法
----------------------------------------------------------------------
ここでは関数 ``nx.maximum_flow`` のキーワード引数 ``flow_func`` を明示的に指示する方法を記す。
出来合いのアルゴリズムでは、以下の表に示すものが利用できる。
グラフや容量の特性に合わせてアルゴリズムを選択するのだ？

============================ =================================== ========================================
関数                         計算量                              コメント
============================ =================================== ========================================
``preflow_push``             :math:`O(n^2 \sqrt{m})`             デフォルトのアルゴリズム。
``ford_fulkerson``           :math:`O(nm^2)`                     レガシーな実装とのこと。
``edmonds_karp``             :math:`O(n m^2)`                    ``ford_fulkerson`` の「特殊版」の実装。
``shortest_augmenting_path`` :math:`O(\min(n^{2/3}, m^{1/2}) m)` 最短増大路。
============================ =================================== ========================================

関数 ``nx.maximum_flow`` の実装を調べると、どうもこれらの関数のラッパーなのではないかという気がする。

インポートについては、例えば ``shortest_augmenting_path`` ならば次のように書けばよい。

.. code-block:: python3

   from networkx.algorithms.flow import shortest_augmenting_path

最大フロー最小カット
======================================================================
先程の例と同じグラフを用いて、最小カットを求める手順を以下に示す。
関数 ``nx.minimum_cut`` を利用するだけでよいのだが、
最小カットが複数存在する場合でも、そのうちの一つを求めるようだ。

.. literalinclude:: ../../sample/networkx/mincut.py
   :language: python3
   :lines: 26-39

実行結果を次に示す。カットセットの構成本数が点 s, t に関する辺連結度 2 と一致している。

.. code-block:: text

   cut value: 5
   (S, T): ({'o', 'q', 'p', 's', 'r'}, {'t'})
   cut set: {('r', 't'), ('q', 't')}

.. image:: /_static/networkx-mincut.png
   :alt: Licensed under CC-BY-SA 3.0
   :target: http://commons.wikimedia.org/wiki/File:Max_flow.svg

当然ながら関数 ``nx.minimum_cut`` もキーワード引数 ``flow_func`` をサポートしているので、
グラフの特性に適したアルゴリズムを指示するとよいだろう。

最小コストフロー
======================================================================
.. todo::

   ノートを書く。

.. todo::

   〆に参考書籍を列挙する。

.. _NetworkX: https://networkx.github.io/
.. _Wikipedia: http://en.wikipedia.org/wiki/Maximum_flow_problem
