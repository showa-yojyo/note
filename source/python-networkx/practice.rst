======================================================================
NetworkX を利用する
======================================================================
.. contents::

基本的なコードの書き方を習得する
======================================================================

以降、次のインポートを断りなしに用いる。

.. code-block:: python3

  import networkx as nx
  import matplotlib.pyplot as plt

小さいグラフを定義して、単純な計算をさせてみることで NetworkX でのプログラミングの感触を確かめてみよう。

Dijkstra 法による最短経路
----------------------------------------------------------------------
以前行った、別のグラフライブラリーの試験に用いた問題設定を再利用する。
問題は「すべてのノードペアに対して、その最短経路の長さを得る」というものだ。

.. image:: /_static/apgl-findall.png
   :scale: 100%

NetworkX のリファレンスを当たると、関数 ``all_pairs_dijkstra_path_length``
を利用できることがわかる。
イラストのグラフの定義および最短経路の長さを計算するコードは次のようなものになる。

.. literalinclude:: ../../sample/networkx/dijkstra.py
   :language: python3

この他にも NetworkX は Dijkstra の名を冠したアルゴリズムを複数実装しており、
「特定の始点終点の組み合わせの最短距離だけ求めたい」、
「経路のノードの順序も求めたい」等の細かい要求の違いにも応えられる。

実行結果は次のようなものになる。出力の見やすさにこだわりがなければ、
単に ``print(all_edges)`` でも各経路の最短距離を目視できる。

.. code-block:: none

   (0,1): 10.0
   (0,2): 14.0
   (0,3): 12.0
   (0,4): 29.0
   (0,5): 33.0
   (1,2):  8.0
   (1,3): 15.0
   (1,4): 19.0
   (1,5): 30.0
   (2,3):  7.0
   (2,5): 22.0
   (3,5): 21.0
   (4,5): 11.0

グラフィックを描画する
----------------------------------------------------------------------
先程のグラフを Matplotlib_ の表示機能を利用してウィンドウに出力する方法を示す。
試行錯誤の結果、次のコードが最も見やすいイメージを描画してくれた。

.. literalinclude:: ../../sample/networkx/networkx-draw.py
   :language: python3

スクリプトをコンソールから実行すると、次のイメージを含む Matplotlib ウィンドウが開いたことがある。
毎回このイメージが描画されれば話は終わるのだが、困った点が見つかった。
NetworkX のグラフ描画ルーチンの特性上、クライアントが十分な描画用のパラメーターを与えないと、
ノードの位置をランダムに決定するようだ。
例えばこのコードを二度三度と実行してみるとよい。イメージがその度に異なっているのがわかるハズだ。
これでは作業の要件によっては支障をきたすかもしれない。

.. image:: /_static/networkx-draw.png
   :scale: 100%

Graphviz 形式に出力する
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NetworkX のグラフレイアウトを採用しないで、イメージを生成する方法があるらしい。

PyGraphviz_ が利用できる（これは Graphviz の利用可能性も含む）か、
もしくは pydot_ が利用できる（同様）環境であれば、
NetworkX の提供する次の関数を利用することができるようだ。

.. code-block:: python3

   nx.draw_graphviz(G)
   nx.write_dot(G,'file.dot')

残念ながら、現在どちらのパッケージとも Python 3 には公式に対応していないので、
上記コードを実行することができない。
出力の dot ファイルを Graphviz のエンジンに入力すれば、
先程のものよりはマシなイメージを得ることができるかもしれないだけに惜しい。

入門レベルの応用例
======================================================================
.. todo::

   Dijkstra 法だけではグラフライブラリーのノートとしては物足りない。
   本格的なアルゴリズムの応用例を紹介したい。

.. _Matplotlib: http://matplotlib.sourceforge.net/
.. _PyGraphviz: http://pygraphviz.github.io/
.. _pydot: https://code.google.com/p/pydot/
