======================================================================
Python Matplotlib 利用ノート
======================================================================

.. contents:: ノート目次

目的
==================================================
Matplotlib パッケージはとても奥が深い。
手足のように使いこなせるようになるには、相当時間を要すると見た。
Python では遊びたいことが他にもたくさんあるので
Matplotlib で目的を拡大し過ぎないように、ここまでできればいいという目的を決めておく。

個人的には次の 2 点で十分だ。

* 数学の教科書にありがちな曲線グラフを描画する。
  特に xy 平面上に n 次多項式やスプライン曲線が描画できればいい。

* 数学の教科書にありがちな数式を描画する。
  つまり TeX 環境の簡易版として利用したい。

* それらを PNG 画像または PDF ファイルとして出力したい。
  できれば SVG ファイルをも得たい。

環境構築
==================================================
.. note::

   ここでの Python 環境は次の通り。その他は後述。

   * Windows XP Home SP3
   * Python 2.6.6

     * Setuptools 0.6c11
     * NumPy 1.5.0
     * PIL 1.1.6

Matplotlib の依存パッケージをインストール
--------------------------------------------------
Matplotlib は NumPy を多用しているので、当然これを先にインストールしておく。
→ :doc:`/python-numpy`

あとは特に必要ない。本体のインストールへ進もう。

Matplotlib 本体をインストール
--------------------------------------------------
インターネット接続環境ではいつもの ``easy_install`` で問題ない。はず。
::

  $ easy_install -U matplotlib

そうでない場合は、接続環境で egg なりインストーラーなりを自分でビルドする。
それを USB メモリか何かを経由してコピーする。

インストーラーが公式サイトにあるかもしれないので、先に確認を済ませておく。

オフラインでも勉強できるようにドキュメントを確保
--------------------------------------------------
公式サイトから PDF をダウンロードして、ローカルディスクに保存する。
最初のページに "Matplotlib Release 1.0.0" というタイトルと、著者の連名
"Darren Dale, Michael Droettboom, Eric Firing, John Hunter" が書かれてある。
PDF ファイル全体は 900 ページに及ぶ大著だ。

なお、ソースコード一式を入手して、そこにある Sphinx によるドキュメントビルドを試みたが、
同じ処理をぐるぐるループして結局モノができなかったことがある。

動作確認
--------------------------------------------------
次のようなコードを実行してみて、それらしいイメージを目視で確認できたら OK でいい。

>>> import matplotlib.pyplot as plt
>>> plt.plot([1,2,3,4])
>>> plt.show()

最後の行の ``plt.show()`` の呼び出し開始直後に、
PIL の ``Image.show()`` のようにビューワーが出現する。これがなかなか面白い。

コード
==================================================
覚えておきたいコードをノートに取る。

ここから先の文中の ``plt`` は
``import matplotlib.pyplot as plt`` と別名定義したものとする。

基本的な関数・メソッドを押さえる
--------------------------------------------------
下の表を見てからヘルプを当たる。

===============        ==============================================
関数                   仕事
===============        ==============================================
``plt.plot()``         グラフを描く
``plt.hist()``         ヒストグラムを描く

``plt.show()``         イメージを一気に表示
``plt.setp()``         プロット線の属性等、描画パラメーターの取得・指定

``plt.axis()``         ビューポート範囲指定
``plt.grid()``         グリッド描画をするかしないか指定
===============        ==============================================

Figures and Axes
~~~~~~~~~~~~~~~~~~~~
Matplotlib には current figure と current axes という概念がある。
これを利用して、複数個のグラフをワンシーンに定義できるようだ。

=================        ==============================================
関数                     仕事
=================        ==============================================
``plt.figure()``         指定の figure をカレントにする
``plt.subplot()``        指定の axes をカレントにする
=================        ==============================================

* Figure という語を、文書中に出てくる図（のインスタンス）と解釈したい。

* 普通は一つの図にグラフ一つを載せるわけだが、
  同じようなグラフを並べたものを一つの図としたい場合もある。
  Axes という語が意味するのが、そのグラフだと解釈すればよいか。

* ``plt.figure(n)`` で current figure を指定する。
* ``plt.subplot(n0n1n2)`` で current axes を指定する。
  ``n0``, ``n1``, ``n2`` がそれぞれ縦方向の区画数、横方向の区画数、
  「どの区画か」を意味する。

  ``n2`` は 1 以上 ``n1 * n2`` 以下の値でなければならない。

  TODO: ここにサンプルコードと図を入れる。

* ``plt`` のプロットコマンドはすべて current axes に作用する。

Matplotlib は figure/axes を扱うスタイルを二つ提供している。

* 古典的なステートマシンを操作するイメージのやり方。

  ユーザーコードがカレントな figure/axes が何であるかを常に意識して、プロットコマンドを呼び出す。
  コマンドはカレントな figure/axes に対して適用されることになる。

* 状態とオブジェクトとを結びつけて取り扱う典型的なオブジェクト指向プログラミングのやり方。

  figure/axes がオブジェクトになっていて、メソッドでプロットコマンドを呼び出す。
  コマンドは対象となるオブジェクトの管理する figure/axes に対して適用されることになる。

テキスト
~~~~~~~~~~~~~~~~~~~~
最終目的としてはプロットによるグラフを描きたいわけだが、その前にテキストを学習する。

=================        ==============================================
関数                     仕事
=================        ==============================================
``plt.text()``           ビューポート内にテキストを描く
``plt.xlabel()``         X 軸用キャプション
``plt.ylabel()``         Y 軸用キャプション
``plt.title()``          グラフ全体のキャプション
=================        ==============================================

* ``plt.text()`` は指定位置にテキストを描画するコマンドと考える。
* ありがたいことに TeX の数式を受け付けてくれる。
  文字列はバックスラッシュの嵐になることが予想できるので、raw string 形式で指定するのが吉。
  ::

    plt.text(60, .025, r'$\mu=100,\ \sigma=15$')

続・環境構築
==================================================
Matplotlib を利用するための環境をもっと細かく整備してみよう。

:file:`$HOME/.matplotlib/matplotlibrc`
--------------------------------------------------
ファイル名からわかるように、Matplotlib 環境のユーザー設定ファイルだ。
ドキュメントのセクション 5.1 "The matplotlibrc file" に詳しく記述がある。

* Windows 環境でもユーザーがわざわざ環境変数 ``HOME`` を設定している場合は、
  Matplotlib はきちんとそのパスを参照してくれる。

* 一度でも Matplotlib を利用すると、
  ``$HOME`` にフォルダー :file:`.matplotlib` ができている。
  そこにテキストファイル :file:`matplotlibrc` を作成する。

* テンプレは :file:`$PYTHONHOME/lib/site-packages/matplotlib/mpl-data/matplotlibrc` を使う。

  テンプレは基本的に設定コマンド？のコメントアウトで埋め尽くされている。
  ここを眺めていればカスタマイズの方法は直感できる仕組みになっている。

* :file:`matplotlibrc` は python-mode で編集するのが吉。

* ``pyplot.plot()`` に ``lines.color`` が効かない？

