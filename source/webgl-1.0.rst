======================================================================
WebGL Specification 1.0 読書ノート
======================================================================

`WebGL Specification <https://www.khronos.org/registry/webgl/specs/latest/1.0/>`__
を読んでいく。

Abstract
======================================================================

* 本仕様は HTML 5 要素 ``canvas`` に対する追加的なレンダリングコンテキストおよび
  サポートオブジェクトについて記述するものだ。
* このコンテキストは OpenGL ES 2.0 API に忠実に準拠した API を使用してレンダリングをすることができる。

Status of this document
======================================================================

* 本文書は編集者の草稿だ。この文書を work in progress 以外の目的で引用してはならない。

本ノートもそういうつもりで記していく。

Feedback
======================================================================

* 本仕様についての一般的な議論はメーリングリストで歓迎される。
* 本仕様やその適合試験に関するバグは GitHub のアカウントに報告する。
  プルリクエストもウェルカム。

各 URL は本仕様書のオリジナルを参照して欲しい。当ノートには明記しない。

.. contents:: ノート目次

Introduction
======================================================================

次のようなことが non-normative コラムとして記されている：

* WebGL はウェブ用に設計された即時モードの 3D レンダリング API だ。
* OpenGL ES 2.0 から派生したもので、同様のレンダリング機能を HTML のコンテキストで提供している。
* WebGL は HTML Canvas 要素のレンダリングコンテキストとして設計されている。
* この文書では ``WebGLRenderingContext`` について説明する。
* OpenGL ES 2.0 の伝統を受け継いでいるため、最新のデスクトップ OpenGL や
  OpenGL ES 2.0 の開発に慣れている開発者であれば、WebGL の開発に移行するのは簡単なはずだ。

Conventions
----------------------------------------------------------------------

* OpenGL ES 2.0 の仕様と合致するように努力しているが、誤りを含む場合がある。
  矛盾が生じた場合は、OpenGL ES 2.0 仕様を正とする。
* 本文書は OpenGL ES 2.0 仕様と併読することを意図している。
  特に指定のない限り、各メソッドの動作は OpenGL ES 2.0 で定義されている。
  この仕様は、相互運用性やセキュリティーを担保するために、OpenGL ES 2.0から分岐している場合がある。

Context Creation and Drawing Buffer Presentation
======================================================================

WebGL API を使用する前に、プログラム作者は以下に示すように、指定された
``HTMLCanvasElement`` または ``OffscreenCanvas`` の ``WebGLRenderingContext``
オブジェクトを取得する必要がある。
このオブジェクトは OpenGL の状態を管理し、描画バッファーへのレンダリングを行うためのもので、
コンテキスト作成時に作成する必要がある。

Context Creation
----------------------------------------------------------------------

本節で述べられている仕様を ``canvas.getContext("webgl")`` の戻り値オブジェクトが
満たすものと思われる。

* ``WebGLRenderingContext`` には作成時に設定されるキャンバスが関連付けられている。
* ``WebGLRenderingContext`` は ``WebGLContextAttributes`` オブジェクトの中に、
  作成時に設定されるコンテキスト作成パラメーターを持つ。
* ``WebGLRenderingContext`` は描画バッファーが作成されるたびに設定される
  実際のコンテキストパラメーターを ``WebGLContextAttributes`` オブジェクトに持つ。
* ``WebGLRenderingContext`` は最初は設定されていない webgl context lost フラグを持つ。

``getContext('webgl')`` の呼び出しに対してブラウザーが処理するべき内容を順序だって述べている：

+ 新しい ``WebGLRenderingContext`` オブジェクトであるコンテキストを作成する。
+ そのコンテキストのキャンバスをメソッド ``getContext()`` が関連付けられているキャンバスとする。
+ 新しい WebGLContextAttributes オブジェクト ``contextAttributes`` を作成する。
+ ``getContext()`` に第二引数として ``options`` を指定していた場合、指定した属性を ``contextAttributes`` に設定する。
+ ``contextAttributes`` で指定された設定を使用して描画バッファーを作成し、その描画バッファーとコンテキストを関連付ける。
+ 描画バッファの作成に失敗した場合は、以下の手順を実行する：

  + キャンバスで WebGL コンテキスト作成エラーを発生させる。
  + ``null`` を返してこれらの手順を終了する。

+ 新しい ``WebGLContextAttributes`` オブジェクトである ``actualAttributes`` を作成する。
+ 新しく作成した描画バッファーのプロパティに基づいて ``actualAttributes`` の属性を設定する。
+ 「コンテキストの作成パラメーター」を ``contextAttributes`` に設定する。
+ コンテキストの「実際のコンテキストのパラメーター」を ``actualAttributes`` に設定する。
+ コンテキストを返す。

``experimental-webgl`` に関する記述は軽視する。

The Drawing Buffer
----------------------------------------------------------------------

* API コールが効く描画バッファーは ``WebGLRenderingContext`` オブジェクトの生成時に定義される。
  以下、描画バッファーの作成方法を定義する。

* この表は、描画バッファーを構成するすべてのバッファーごとに、その最小サイズと、デフォルトで定義されているかどうかを示している。

  * この描画バッファーのサイズは、キャンバスの ``width`` および ``height`` によって決定される。
  * 下の表は、最初に作成されたとき、サイズが変更されたとき、
    または ``preserveDrawingBuffer`` コンテキスト作成属性が ``false`` のときの表現後に、
    各バッファーがクリアされるべき値も示している。

.. csv-table::
   :delim: @
   :header: バッファー, クリア値, 最小サイズ, 既定値が存在するか

   色 @ ``(0, 0, 0, 0)`` @ 8 ビット @ 存在する
   深度 @ ``1.0`` @ 16 ビット整数 @ 存在する
   ステンシル @ ``0`` @ 8 ビット @ 存在しない

* 寸法が 0x0 のキャンバスでは 1x1 の ``drawingBufferWidth``, ``drawingBufferHeight`` になる。
* 要求された幅や高さを満たすことができない場合、描画バッファーが最初に作成されたとき、
  またはキャンバスの幅や高さの属性が変更されたときに、より小さな寸法の描画バッファーが作成される。
  実際に使用される寸法は実装に依存し、同じアスペクト比のバッファーが作成されることは保証されない。

  * 実際の描画バッファーのサイズは属性 ``drawingBufferWidth`` と ``drawingBufferHeight`` から得ることができる。

* WebGL の実装では、高解像度のディスプレイで描画バッファーのサイズを自動的に拡縮してはならない。
  コンテキストの ``drawingBufferWidth`` および ``drawingBufferHeight`` は、実装依存の制約を除いて、
  キャンバスの属性 ``width`` および ``height`` に可能なかぎり一致しなければならない。

----

* 上記の制約は、高精細ディスプレイであっても、キャンバス要素がウェブページ上で消費する空間の大きさを変えるものではない。
  キャンバスの固有寸法はその座標空間のサイズに等しく、数値は CSS ピクセルで解釈されるのであって、解像度に依存しない。
* WebGL アプリケーションは、プロパティー ``window.devicePixelRatio`` などを確認し、
  キャンバスの幅と高さをその係数で乗じて、CSS の幅と高さを元の幅と高さに設定することで、
  高解像度のディスプレイ上で、描画バッファーのピクセルと画面上のそれの比率を 1:1 にすることができる。

----

* オプションの ``WebGLContextAttributes`` オブジェクトを使って、バッファーを定義するかどうかを変更することができる。
  また、カラーバッファにアルファチャンネルを含めるかどうかを定義するのにも使用できる。

  * 定義された場合、アルファーチャンネルは、HTML 合成器 がカラーバッファーを
    ページの残りの部分と結合するために使用される。
  * ``WebGLContextAttributes`` オブジェクトは、``getContext`` の最初の呼び出し時にのみ使用される。
    描画バッファーの作成後にその属性を変更する機能はない。

* 深度、ステンシル、アンチエイリアスの属性は、``true`` に設定されている場合、
  要求であって要件ではありません。WebGL の実装では、これらの属性を考慮するように努力をする必要がある。
  ただし、これらの属性が ``false`` に設定されている場合、WebGL の実装は関連する機能を提供しない。

  * WebGL の実装やグラフィックスハードウェアでサポートされていない属性を組み合わせても、
    ``WebGLRenderingContext`` の作成に失敗することはない。
  * 実際のコンテキストパラメーターには、作成された描画バッファーの属性が設定される。
  * 属性 ``alpha``, ``premultipliedAlpha``, ``preserveDrawingBuffer`` は、WebGL の実装に従わなければならない。

* WebGL は、合成操作の直前にその描画バッファーを HTML ページの合成器に提示するが、
  それは前回の合成操作以降に以下の少なくとも一つが発生している場合に限る：

  * コンテキストの作成
  * キャンバスのサイズ変更
  * 描画バッファーが現在束縛されているフレームバッファーである間に、
    ``clear``, ``drawArrays`` または ``drawElements`` が呼び出された。

* 描画バッファーが合成のために提示される前に、実装はすべてのレンダリング操作が描画バッファーにフラッシュされていることを確認する。
  デフォルトでは、合成後、描画バッファーの内容は、上の表に示されているように、
  それらの既定値に消去されなければならない。

* この既定の動作を、``WebGLContextAttributes`` オブジェクトの属性 ``preserveDrawingBuffer`` を設定することで変更できる。

  * このフラグが ``true`` の場合、描画バッファーの内容は、作者が消去するか上書きするまで保存される。
  * このフラグが ``false`` の場合、レンダリング関数が戻ってきた後に、
    このコンテキストをソース画像として使用した操作を実行しようとすると、
    未定義の動作を引き起こす可能性がある。これには、

    * ``readPixels`` や ``toDataURL`` の呼び出し、
    * 他のコンテキストの ``texImage2D`` や ``drawImage`` の呼び出しのソース画像としてのこのコンテキストの使用、
    * このコンテキストのキャンバスからの ``ImageBitmap`` の作成

    などがある。

----

* 描画バッファーを保持することが望ましい場合もあるが、プラットフォームによっては
  パフォーマンスが著しく低下する可能性がある。可能な限り、このフラグは ``false`` のままにして、
  他の手法を使うべきだ。

  描画バッファーの内容を取得するには、同期的な描画バッファーアクセス、
  例えば、描画バッファーへのレンダリングを行うのと同じ関数内で ``readPixels`` や
  ``toDataURL`` を呼び出す、などの手法を使用できる。

  一連の呼び出しで同じ描画バッファーにレンダリングする必要がある場合は、
  ``Framebuffer`` オブジェクトを使用することができる。

* バッファー作者が他のプロセスからバッファの内容にアクセスできないことを保証する限り、
  実装は、必要な描画バッファーの暗黙の消去操作を最適化することができる。
  例えば、バッファー作者が明示的な消去を行った場合、暗黙の消去は必要ない。

The WebGL Viewport
----------------------------------------------------------------------

* OpenGL は、描画バッファー内のレンダリング結果の配置を定義する状態の一部として、
  長方形のビューポートをやりくりする。WebGL コンテキストの作成時に、ビューポートを、

  * 原点が ``(0, 0)`` で、
  * 幅と高さが ``(gl.drawingBufferWidth, gl.drawingBufferHeight)`` に等しい長方形に初期化する。

* WebGL の実装では、キャンバス要素のサイズ変更に応じて OpenGL ビューポートの状態に影響を与えてはならない。

----

WebGL プログラムにビューポートを設定するロジックが含まれていないと、
キャンバスのサイズが変更された場合に適切に対処できないことに注意。
次の例は、WebGL プログラムがプログラムによってキャンバスのサイズを変更する方法を示す（引用者注：一部改変）。

.. code:: javascript

   const canvas = document.getElementById('canvas1');
   const gl = canvas.getContext('webgl');
   canvas.width = newWidth;
   canvas.height = newHeight;
   gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

なぜなら、ビューポートを自動的に設定すると、それを手動で設定するアプリケーションと干渉するからだ。
アプリケーションは ``onresize`` イベントハンドラーを使用して、キャンバスのサイズの変更に応答し、
OpenGL ビューポートを設定することが期待される。

Premultiplied Alpha, Canvas APIs and ``texImage2D``
----------------------------------------------------------------------

* OpenGL API では、アプリケーションがレンダリング時に使用するブレンドモードを変更することができる。
  そのため、描画バッファー内のアルファー値の解釈様式を制御することができる。

* HTML キャンバス API の ``toDataURL`` および ``drawImage`` は、
  ``premultipliedAlpha`` コンテキスト生成パラメーターを考慮する必要がある。
  WebGL がレンダリングされているキャンバスに対して ``toDataURL`` が呼び出されたとき、

  * 要求された画像フォーマットが ``premultipliedAlpha`` を指定しておらず、
  * WebGL コンテキストの ``premultipliedAlpha`` パラメーターが ``true`` に設定されている場合は、

  ピクセル値を逆乗算、すなわち色チャンネルをアルファーチャンネルで除算する必要がある。
  この操作は非可逆的だ。

* WebGL でレンダリングされたキャンバスを

  * ``CanvasRenderingContext2D`` の ``drawImage`` メソッドに渡す場合、
    ``CanvasRenderingContext2D`` の実装の乗算の必要性に応じて、
    描画操作中にレンダリングされた WebGL 内容を変更する必要がある場合とない場合がある。
  * ``texImage2D`` に渡す場合、
    渡されたキャンバスの ``premultipliedAlpha`` コンテキスト作成パラメーターと、
    送信先の WebGL コンテキストの ``UNPACK_PREMULTIPLY_ALPHA_WEBGL`` ピクセル格納パラメーターの設定に応じて、
    ピクセルデータを事前に乗算された形式に変更したり、
    乗算された形式から変更したりする必要がある。

WebGL Resources
======================================================================


Security
======================================================================

Resource Restrictions
----------------------------------------------------------------------

Origin Restrictions
----------------------------------------------------------------------

Supported GLSL Constructs
----------------------------------------------------------------------

Defense Against Denial of Service
----------------------------------------------------------------------

Out-of-Range Array Accesses
----------------------------------------------------------------------

DOM Interfaces
======================================================================

Types
----------------------------------------------------------------------

WebGLContextAttributes
----------------------------------------------------------------------


WebGLObject
----------------------------------------------------------------------


WebGLBuffer
----------------------------------------------------------------------


WebGLFramebuffer
----------------------------------------------------------------------


WebGLProgram
----------------------------------------------------------------------


WebGLRenderbuffer
----------------------------------------------------------------------


WebGLShader
----------------------------------------------------------------------


WebGLTexture
----------------------------------------------------------------------


WebGLUniformLocation
----------------------------------------------------------------------


WebGLActiveInfo
----------------------------------------------------------------------


WebGLShaderPrecisionFormat
----------------------------------------------------------------------

Differences Between WebGL and OpenGL ES 2.0
======================================================================


References
======================================================================


Conventions
----------------------------------------------------------------------


Context Creation
----------------------------------------------------------------------


The Drawing Buffer
----------------------------------------------------------------------


The WebGL Viewport
----------------------------------------------------------------------


Premultiplied Alpha, Canvas APIs and texImage2D
----------------------------------------------------------------------


Resource Restrictions
----------------------------------------------------------------------


Origin Restrictions
----------------------------------------------------------------------


Supported GLSL Constructs
----------------------------------------------------------------------


Defense Against Denial of Service
----------------------------------------------------------------------


Out-of-Range Array Accesses
----------------------------------------------------------------------


Types
----------------------------------------------------------------------


WebGLContextAttributes
----------------------------------------------------------------------


WebGLObject
----------------------------------------------------------------------


WebGLBuffer
----------------------------------------------------------------------


WebGLFramebuffer
----------------------------------------------------------------------


WebGLProgram
----------------------------------------------------------------------


WebGLRenderbuffer
----------------------------------------------------------------------


WebGLShader
----------------------------------------------------------------------


WebGLTexture
----------------------------------------------------------------------


WebGLUniformLocation
----------------------------------------------------------------------


WebGLActiveInfo
----------------------------------------------------------------------


WebGLShaderPrecisionFormat
----------------------------------------------------------------------


ArrayBuffer and Typed Arrays
----------------------------------------------------------------------


The WebGL context
----------------------------------------------------------------------


WebGLContextEvent
----------------------------------------------------------------------


Buffer Object Binding
----------------------------------------------------------------------


No Client Side Arrays
----------------------------------------------------------------------


No Default Textures
----------------------------------------------------------------------


No Shader Binaries
----------------------------------------------------------------------


Buffer Offset and Stride Requirements
----------------------------------------------------------------------


Enabled Vertex Attributes and Range Checking
----------------------------------------------------------------------


Out-of-bounds fetches from the index buffer
----------------------------------------------------------------------


Framebuffer Object Attachments
----------------------------------------------------------------------


Texture Upload Width and Height
----------------------------------------------------------------------


Pixel Storage Parameters
----------------------------------------------------------------------


Reading Pixels Outside the Framebuffer
----------------------------------------------------------------------


Stencil Separate Mask and Reference Value
----------------------------------------------------------------------


Vertex Attribute Data Stride
----------------------------------------------------------------------


Viewport Depth Range
----------------------------------------------------------------------


Blending With Constant Color
----------------------------------------------------------------------


Fixed point support
----------------------------------------------------------------------


GLSL Constructs
----------------------------------------------------------------------


Extension Queries
----------------------------------------------------------------------


Compressed Texture Support
----------------------------------------------------------------------


Maximum GLSL Token Size
----------------------------------------------------------------------


Characters Outside the GLSL Source Character Set
----------------------------------------------------------------------


Maximum Nesting of Structures in GLSL Shaders
----------------------------------------------------------------------


Maximum Uniform and Attribute Location Lengths
----------------------------------------------------------------------


String Length Queries
----------------------------------------------------------------------


Texture Type in TexSubImage2D Calls
----------------------------------------------------------------------


Packing Restrictions for Uniforms and Varyings
----------------------------------------------------------------------


Feedback Loops Between Textures and the Framebuffer
----------------------------------------------------------------------


Reading From a Missing Attachment
----------------------------------------------------------------------


Drawing To a Missing Attachment
----------------------------------------------------------------------


NaN Line Width
----------------------------------------------------------------------


Attribute Aliasing
----------------------------------------------------------------------


Initial value for gl_Position
----------------------------------------------------------------------


GLSL ES Global Variable Initialization
----------------------------------------------------------------------


GLSL ES Preprocessor "defined" Operator
----------------------------------------------------------------------


GLSL ES #extension directive location
----------------------------------------------------------------------


Completeness of Cube Map Framebuffer Attachments
----------------------------------------------------------------------


Transferring vertices when current program is null
----------------------------------------------------------------------


Fragment shader output
----------------------------------------------------------------------


Initial values for GLSL local and global variables
----------------------------------------------------------------------


Vertex attribute conversions from normalized signed integers to floating point
----------------------------------------------------------------------


Uniform and attribute name collisions
----------------------------------------------------------------------


Wide point primitive clipping
----------------------------------------------------------------------


Context creation parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Getting information about the context
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Setting and getting state
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Viewing and clipping
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Buffer objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Framebuffer objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Renderbuffer objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Texture objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Programs and Shaders
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Uniforms and attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Writing to the drawing buffer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Reading back pixels
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Detecting context lost events
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Detecting and enabling extensions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


The Context Lost Event
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


The Context Restored Event
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


The Context Creation Error Event
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

