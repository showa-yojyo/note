======================================================================
Modern C++ チャレンジ 読書ノート
======================================================================

〈C++17 プログラミング力を鍛える 100 問〉ということなので読み進める。

:著者: Marius Bancila
:訳者: 黒川利明
:技術監修: 島敏博
:出版社: オライリー・ジャパン
:発行年: 2019 年
:ISBN: 978-4-87311-869-7

.. contents:: ノート目次

まえがき
======================================================================

〈本書は、C++ 言語および標準ライブラリの機能だけでなく、多くのサードパーティの
クロスプラットフォームのライブラリを練習できるように設計された実世界の問題を
100 問集めたものです。しかし、これらの問題で C++ 特有なのはわずかで、他のプログラミング言語でも解けるものです〉
このことをよく覚えておくことだ。

〈本書の問題の回答のコードファイルは、GitHub と Packt のサポートページ（登録が必要）
から入手できます〉とあり、前者の URL は次のようになっている：

https://github.com/PacktPublishing/The-Modern-Cpp-Challenge

ここで、上記リポジトリーをローカルディスクに clone して、
ソースコードにコメントを付けていくスタイルで学習労力を省略化することにする。
こうすると、どういうわけか本書が手許にないときでも学習を止めずに済む。

さらに、これらの問題の答案コードごとにすべてビルドすることにする。
その過程で C++ 開発力のようなものも鍛えることを期待する。
事実、かなり勉強させられた。

〈本書の解答全てがクロスプラットフォームですので、どのプラットフォームでも動作します〉
とある。私は WSL 環境でビルドをしていく。

1 章 数学の問題
======================================================================

全体的に ``auto``, ``decltype``, ``constexpr``, ``noexcept`` を付加する余地がある関数が多い。
例えば解答 4 の関数 ``is_prime`` は ``constexpr`` の他に ``noexcept`` も付加できる。

* 大きな上限まで加算するために ``long long`` を使う (p. 3)
* 解答 1 の ``for`` ループのカウンター宣言に ``decltype(limit)`` としたい。
* C++17 には ``<numeric>`` に ``std::gcd()`` がある (p. 4)
* 解答 2 の自作関数は ``constexpr`` 宣言できる。
* C++17 には ``<numeric>`` に ``std::lcm()`` がある (p. 5)

.. code:: c++

   template<class InputIt>
   constexpr int lcmr(InputIt first, InputIt last) noexcept
   {
       // C++ 17 では <numeric> に std::lcm() がある (p. 5) が、
       // 次のようにテンプレート引数を明示しないと g++ 9.3.0 はエラーを出す。
       using IntType = typename InputIt::value_type;
       return std::accumulate(first, last, 1, std::lcm<IntType, IntType>);
   }

* C++17 ならば ``if`` 文の変数スコープも細かく直そうと思えば直せる。

  .. code:: c++

     if (auto sum1 = sum_proper_divisors(number); sum1 < limit)
     {
         // code
     }

* 解答 8 でラムダ式登場。
* 解答 8 のクラステンプレート ``perf_timer`` は難しい要素が多い。
  ``std::invoke()`` を使うには ``<functional>`` をインクルードする必要がある。
* 本書では修正されているところが多いが ``cbegin()``, ``cend()`` が使えるアルゴリズム呼び出しが多い。
* 解答 9 改変例

  .. code:: c++

     auto prime_factors(unsigned long long n) -> std::vector<decltype(n)>
     {
         // code
     }

* 解答 10 で範囲 ``for`` 文初登場。
* 解答 12 のコードを私が書き直すと ``decltype(limit)`` があちこちに出る。これは良くなるか？
* 解答 13 で乱数登場。
* 地味なので ``std::ref()`` は付け忘れそうだ。

2 章 言語機能
======================================================================

可能な限り ``begin()``, ``end()`` を ``cbegin()``, ``cend()`` にそれぞれ置き換える。

* クラステンプレート ``std::array`` を利用できないか意識する。

  * この配列型は要素次第の型次第でコンストラクターやコピー操作が ``noexcept`` に指定できる。

* コンストラクターに対しても ``constexpr`` をできないか意識する。
* コンストラクター呼び出しは中括弧のほうが利用頻度が高くなりそうだ。
* 問題 17 はいろいろと加筆できる。例えば ``cbegin()``, ``cend()`` を実装するとか。
  ``main()`` の最後で ``std::copy()`` を呼び出すところでこれらを利用したい。
* 問題 18 でパラメーターパックが出る。
  ちなみに ``std::min()`` が本問の要求の本質的に満たす：

  .. code:: c++

     std::cout << std::min({5, 4, 2, 3}) << std::endl;
     std::cout << std::min({3, 2, 1, 0}, std::less<>()) << std::endl;

* 問題 19 では畳み込みを習う。このコードは覚えにくい。

  * 実際には ``.insert()`` を使うといい？

* 問題 20 でも畳み込み。短絡評価が効くことを覚えておくこと。

  * パラメーターパックと組み合わさった``T&&`` に注意。
    特に ``constains_none()`` の実装で ``std::forward`` が出てくることを意識する。

* 問題 21 は Windows 専用のように見えるが WSL でも実行はできる。
  というか、ダミーの ``if`` 文によりドライバー関数が終了する。

  * ``std::runtime_error`` のために ``<stdexcept>`` をインクルードする。
  * RAII クラスではコンパイラーが生成するデフォルトコンストラクターとコピー代入演算子を禁止するのがよい。
  * メンバー関数 ``release()`` で ``std::exchange()`` が使えそうだ。
  * ``std::vector<char> buffer(1024)`` を ``std::array<char, 1024>`` に置き換えることもできる。

* 問題 22 でリテラル演算子の定義を学べる。
  このコードの関数群は特に ``noexcept`` を付けられるものが多い。

3 章 文字列と正規表現
======================================================================

4 章 ストリームとファイルシステム
======================================================================

5 章 日付と時間
======================================================================

6 章 アルゴリズムとデータ構造
======================================================================

7 章 並行処理
======================================================================

8 章 デザインパターン
======================================================================

9 章 データシリアライゼーション
======================================================================

10 章 アーカイブ、画像、データベース
======================================================================

11 章 暗号
======================================================================

12 章 ネットワークとサービス
======================================================================

付録 A 参考文献
======================================================================

すべての論文・ライブラリーについて URL が併記されている。

訳者あとがき
======================================================================

〈「モダン」な解法の難しいところは、外部のライブラリや API に依存するところです〉とある。
そのためかどうか知らないが、本書で印刷されているコードと GitHub のコードとで細かい差異が多数あった。
それを確認するのもいい勉強になった。

その外部のライブラリをビルドする手順は本書ではほとんど記されていないので、
著者が確認した環境以外で試そうとすると、ほんとうに challenge になる。
