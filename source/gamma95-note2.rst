======================================================================
オブジェクト指向における再利用のためのデザインパターン改訂版 読書ノート 2/3
======================================================================

:doc:`gamma95-note1` からの続き。

:著者: Eric Gamma/Richard Helm/Ralph Johnson/John Vlissides
:監訳者: 本位田真一 吉田和樹
:出版社: ソフトバンク クリエイティブ株式会社
:ISBN: ISBN4-7973-1112-6

.. contents:: ノート目次

第 3 章 生成に関するパターン
======================================================================
* <クラス継承よりもオブジェクトコンポジションに頼る形でシステムを発展させていく場合に、
  生成に関するパターンは重要になる> (p. 89)

* ``MazeGame::CreateMaze`` についての考察が数ページ続くが、
  高密度な記述ゆえに上手い形にノートにまとめられない。

  * 2 つの部屋からなる簡単な迷路を作っているだけなのに、コードが複雑 (p. 92)
  * 迷路構成を変更しようとすると、メンバ関数のオーバーライド（実質再定義）か、
    それと同等の仕事が必要となる (p. 92)

* <より柔軟な設計（必ずしも、コードを短くするわけではない）> (p. 93)
  このカッコ内がポイント。

* <インスタンス化されるクラスがコード中に直接書かれていることが最大の問題> (p. 93)

Abstract Factory
----------------------------------------------------------------------
* Motif とか Presentation Manager とかって何？
* <各種の基本ウィジェットを生成するためのインタフェースを宣言した抽象クラス
  WidgetFactory を定義する> (p. 95)
* 各種のウィジェットに対する抽象クラスを作成したら、
  <その具象クラスで特定の look-and-feel 規格のもとでの実装を与える> (p. 95)
* <たとえば Motif ではスクロールバーはボタンやテキストエディタとともに
  使わなければならないといった制約が、MotifWidgetFactory クラスを利用する結果として
  自動的に規定されることになる> (p. 96)

* このパターンでは Client は AbstractFactory と AbstractProduct で宣言された
  インタフェースのみを利用する (p. 97)
* <普通、ConcreteFactory クラスのインスタンスは実行時に生成される> (p. 97)
  とあるが、実行時に生成されないインスタンスなど考えられる？

* 新たな種類の部品への対応は AbstractFactory とそのすべてのサブクラスについて、
  インタフェースの修正が必要となる。これが面倒。

* 部品を実際に生成するのは ConcreteProduct クラスになるが、
  各部品について factory method を定義する方法がよく用いられる (p. 98)

* Prototype パターンを使って ConcreteFactory クラスを実装する方法がある。
  部品の集合が多数存在する場合にそうすることができる (p. 98)

* <クラスをオブジェクトとして扱うことのできる言語では、
  prototype を用いたアプローチに変化をつけることが可能になる> (p. 99)

* 生成する部品の種類を表すパラメータを取る AbstractFactory の手法は、
  <C++ を使うときには、すべてのオブジェクトが同じ抽象基底クラスを持つ場合か、
  要求を出すクライアントにより部品オブジェクトが正しい型に変換できる場合にのみ、
  適用することができる> (p. 100)

  この条件はそんなにきつくない。
  <サブクラスに特有のオペレーション> (p. 100) をする必要がない場合は、
  この手法の採用の検討に値する。

サンプルコードで ``MazeGame::CreateMaze`` を Abstract Factory パターンで実装している。

* <``MazeFactory`` クラスは、単に factory method を集めたものになっているが、
  これは Abstract Factory パターンを実装するときにもっとも一般的な方法である> (p. 102)
* AbstractFactory が ConcreteFactory を兼ねるのも一般的な実装方法 (p. 102)

Builder
----------------------------------------------------------------------
後回し。

Factory Method
----------------------------------------------------------------------

Prototype
----------------------------------------------------------------------
後回し。

Singleton
----------------------------------------------------------------------
ここは読まなくていいや。

まとめ
----------------------------------------------------------------------



第 4 章 構造に関するパターン
======================================================================

Adapter
----------------------------------------------------------------------

Bridge
----------------------------------------------------------------------

Composite
----------------------------------------------------------------------

Decorator
----------------------------------------------------------------------

Facade
----------------------------------------------------------------------

Flyweight
----------------------------------------------------------------------

Proxy
----------------------------------------------------------------------

まとめ
----------------------------------------------------------------------

----

:doc:`gamma95-note3` へ。
