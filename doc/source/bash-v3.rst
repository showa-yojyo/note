======================================================================
What's New In Bash 3 ノート
======================================================================

Bash バージョン 3.x で追加された新機能のメモ。

.. contents:: ノート目次

概要
======================================================================

パイプのデバッグ用機能を除いてすべて重要。

* 一般化された中括弧展開演算子。:command:`echo` で試すのがもっとも簡単だと思われ
  る。例をいくつか挙げる：

  * :samp:`{1..10}`, :samp:`{10..1}` などで数列を展開する。空白文字区切り
    （以下同様）。
  * :samp:`{a..z}`, :samp:`{z..a}`, :samp:`{e..m}`, etc. で文字列を展開す
    る。
  * :samp:`"Number #"{1..4}`, etc. で分配法則が働いて展開する。
  * :samp:`{1..3}{x..z}" +"` で直積を展開する。だからこの例では末端に要らない
    ``+`` が残る。
  * :samp:`{{a..c},{1..3}}` とすると、まず ``{a..c}`` を展開してその次に
    ``{1..3}`` を展開する。中央にある ``,`` に注意すること。

* 配列の添字を展開する演算子 ``${!array[@]}``

  * 何に利用できるか考えてみよう。

* 正規表現マッチング演算子 ``=~``

  * 二重角括弧の内部で用いる。
  * :samp:`if [[ "This is a fine mess." =~ T.........fin*es* ]];`
  * こういう状況における正規表現に対して引用符で囲むのは望ましくないとある。正規
    表現を展開するのに失敗するかもしれないそうだ。

* オプション :command:`set -o pipefail`

  * これは使わないと思われるので割愛。

* 演算子 ``+=`` が使いやすくなった。代入演算子 ``=`` しか使えなかった状況で
  ``+=`` も使えるようになる。

  * とりわけ ``PATH`` の追加に使える。

* その他バグ修正。割愛。

参考資料
======================================================================

* `Advanced Bash-Scripting Guide <https://tldp.org/LDP/abs/html/>`_
