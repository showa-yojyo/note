======================================================================
作業中
======================================================================

.. include:: ./docker-inc.txt

名言集
======================================================================

VM はハードウェアを抽象化したもので、ホストから物理的な CPU と RAM を受け取り、
それを複数の小さな仮想マシンに分割して共有する。

コンテナーはアプリケーションの抽象化であり、OS とアプリケーションに焦点が当てら
れており、ハードウェアの抽象化はそれほど重要ではない。

``docker run`` を使いこなすには、ある程度の時間をかけることが必要だ。

各 ``docker container run`` コマンドが同じイメージを使用していたとしても、各実行
は分離された個別のコンテナーだ。コンテナーのそれぞれが別々のファイルシステムを持
ち、別々の名前空間で実行される。

イメージはローカルにしか保存されない。

イメージを共有するには、どこかのレジストリーに押す必要がある。Docker ID を取得し、
Docker を使って自分のシステムから |DockerHub| に押すことができる。

|Dockerfile| はイメージがどのようにビルドされたかを管理することができるため、強
力だ。ソースコードを管理するのと同じ方法で管理することができる：単なるテキスト
ファイルなので、バージョン管理システムを使って |Dockerfile| を長期的に管理するこ
とができる。

整理中
======================================================================

* Minikube_


あとがき
======================================================================

* 最初の話題はインストールを差し置いてのアンインストールだが、言われてみると理に
  適っている。これは次回からパッケージ等利用ノート構成の標準にしたい。
* Docker Engine 単品をインストールして学習してきたが、素直に Docker Desktop を採
  用すれば次の事項が学習できた：

  * コマンド ``docker init``
  * Kubernetes 関係

* 学習時間の大半をダウンロード待ちに費やした印象がある。
* SSD に換装してから Docker 学習を始めた判断は正解だったようだ。ストレージをとに
  かく食う。

* コマンド編

  * ``docker run``, ``docker start``, ``docker exec`` の区別をまずつけられるよう
    にする。本来は ``docker container`` ナニナニというコマンドだ。
  * ``docker image`` をいろいろ覚える。
  * 削除コマンド各種を覚える。コマンド内に ``prune`` を含むものだ。
  * ``docker swarm`` は Play With Docker で試す。

* カスタムイメージ編

  * |Dockerfile| を知るまでは既存イメージにファイルを追加して ``docker commit``
    する方法しかない。

* Minikube_ というより Kubernetes を個別に学習する。
