======================================================================
XDG Base Directory 利用ノート
======================================================================

このページは他のツール系ノートからの参照されることを想定して執筆するものだ。

.. contents:: 見出し一覧
   :local:

目的
======================================================================

.. |HOME| replace:: :file:`$HOME`

Linux, :doc:`WSL</wsl>`, :doc:`Cygwin</cygwin>`, MSYS2, MinGW 等のホームディレク
トリー |HOME| に散らかる各種アプリケーションのドットファイルを単一のリポジトリー
に集約して :doc:`Git</git/index>` などでバージョン管理したい。|HOME| 直下をリポ
ジトリーにするわけには一般的にはいかないが、[XDGSpec]_ に準拠しているアプリケー
ションのドットファイルに限定すれば、実現可能だ。

本稿の目標は、|HOME| にあるドットファイル群を可能な限り専用ディレクトリーに再配
置し、バージョン管理対象にすることだ。理想的には、|HOME| 直下からドットファイル
が一掃されるようになりたい。

概要
======================================================================

UNIX またはそれを祖先に持つ計算機では、ユーザー固有のアプリケーション構成はファ
イル名が ``.`` で始まるテキストファイルに定義され保存される伝統がある。この手の
テキストファイルを :dfn:`ドットファイル` と呼ぶ。アプリケーションによってはファ
イルではなくディレクトリーであることもある（そこに構成ファイルが複数収まる）。

昔はドットファイルを収めるサブディレクトリーを一つ作成し、|HOME| 直下にそれらを
参照するシンボリックリンクを作成して管理するふりをしていた。[XDGSpec]_ はその不
便を解消する仕様とも考えられる。そのサブディレクトリーのほうを標準化すればいいと
いう着想だ。

[XDGSpec]_ ではサブディレクトリーの直下にアプリケーションごとに専用のサブディレ
クトリーを置くことを許し、そこに関係ドットファイルを集約させる方針だ。ありがちな
のは、環境変数 ``XDG_CONFIG_HOME`` に対して、ディレクトリー
:samp:`$XDG_CONFIG_HOME/{appname}` 以下にアプリケーション `appname` に関するユー
ザー固有のドットファイル置かれるという状況だ。ここで、`appname` はアプリケーショ
ンが独自に定義する文字列であり、環境変数 ``XDG_CONFIG_HOME`` ユーザーがアクセス
を許されるような絶対パスとする。

再配置作業
======================================================================

XDG 環境変数を定義する
----------------------------------------------------------------------

上述の環境変数を対話シェルの初期化時に定義する。Bash ならファイル
:file:`.bashrc` のなるべく先頭に近い行に次のように記す：

.. code:: bash

   export XDG_DATA_HOME=$HOME/.local/share
   export XDG_CONFIG_HOME=$HOME/.config
   export XDG_STATE_HOME=$HOME/.local/state
   export XDG_CACHE_HOME=$HOME/.cache

上記のサブディレクトリー群が存在しなければ、それを ``mkdir -p`` する。

.. note::

   簡単のため、本稿では ``XDG_CONFIG_HOME`` を中心に記し、他の XDG 変数について
   はほとんど触れないことにする。詳しくは [XDGWiki]_ の関連記述を参照しろ。

既存のドットファイルを再配置する
----------------------------------------------------------------------

.. |XDG_CONFIG_HOME| replace:: :file:`$XDG_CONFIG_HOME`

[XDGWiki]_ の 2.2 節を眺めながら [XDGSpec]_ に対応しているアプリケーションのドッ
トファイルを |HOME| から |XDG_CONFIG_HOME| のサブディレクトリーに順次再配置す
る。例えば Git のドットファイル :file:`$HOME/.gitconfig` に対する手順は次のよう
なものだ：

.. code:: console

   $ cd
   $ mkdir -p ./.config/git
   $ mv .gitignore ./.config/git/config

上述資料の表にあるアプリケーションすべてに対応したとしても |HOME| 直下にドット
ファイルがいくつか残る。[XDGWiki]_ 2.3 節にある項目については少々手間をかけて
|XDG_CONFIG_HOME| に順次移す。アプリケーション固有の環境変数を XDG 変数で定義す
るパターンが多い。その :command:`export` は上述のシェル初期化ファイルで実行す
る。例えば Readline については：

.. code:: bash

   export INPUTRC="$XDG_CONFIG_HOME"/readline/inputrc

を :file:`.bashrc` に記述しておき、ドットファイル :file:`.inputrc` をサブディレ
クトリーに名前を変えたうえで再配置する：

.. code:: console

   $ cd
   $ mkdir readline
   $ mv .inputrc readline/inputrc

[XDGWiki]_ 2.4 節にあるアプリケーションは直接対応はしていないので、工夫できるも
のはそうするという態度だ。まったくお手上げのアプリケーションもあるが、オープン
ソースプロジェクトで開発しているものならば、XDG 対応を開発陣に依頼するという手も
ある。

バージョン管理を始める
----------------------------------------------------------------------

:file:`$XDG_CONFIG_HOME` 以下をまるごとバージョン管理する。バージョン管理という
よりバックアップと復旧に対応するという意味が強い。Git を用いるならば
:doc:`GitHub</github/index>` などのリポジトリーホストにリモートリポジトリーを構
築して同期させればよい。

上級者は計算機を複数使用するので、ドットファイルの集合をそれらで共有する目的でも
使うようだ。

.. seealso::

   :doc:`/git/index`

余談：自作プログラム
======================================================================

自分でプログラムを設計するときには、設定ファイルの仕様を [XDGSpec]_ に準拠するこ
とを誓う。ドットファイルを |HOME| に直接置かせようものなら、プログラム使用者に不
便をかける時代だ。

資料
======================================================================

.. [XDGSpec] `XDG Base Directory Specification
   <https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html>`__
.. [XDGWiki] `XDG Base Directory - ArchWiki
   <https://wiki.archlinux.org/title/XDG_Base_Directory>`__

当初は [XDGSpec]_ の読書ノートを執筆するつもりでいたが、[XDGWiki]_ で十分要約さ
れているのでその必要がなくなった。本稿では具体的な作業内容に絞ることができた。
