======================================================================
Writer Guide Chapter 17, Fields ノート
======================================================================

.. include:: ./writer-inc.txt

.. contents:: 章見出し
   :depth: 3
   :local:

Introduction
======================================================================

フィールドは様々な目的で使用される：

* 変化するデータ：現在の日付や総ページ数など
* 変更するおそれがあるデータ：開発中の製品や書籍の名前など
* 使用者定義の番号順、自動相互参照、条件式中身（ある条件では表示または印刷され
  るが、他の条件では表示または印刷されない単語や段落）など
* 索引項目

この章ではフィールドの一般的な使い方を説明する。フィールドとその使用法についての
完全な議論は本書の範囲を超えている。上級者であればアプリケーションの |Help| にあ
る詳細を見つけられる。

.. tip::

   |MenuBar| |ViewFieldShadingsM| をオフにするか、|OptionsDlg|
   |ApplicationColors| で陰影色を変更していない限り、フィールド背景は画面表示時
   に灰色になる。この灰色はファイルを印刷したり |PDF| ファイルにエクスポートした
   りするときには表示されない。

Keyboard shortcuts for fields
----------------------------------------------------------------------

フィールドを操作するときに便利なキーバインド：


.. list-table:: title
   :align: left
   :header-rows: 1
   :stub-columns: 0
   :widths: auto

   * - キーバインド
     - 動作
   * - |Ctrl| + |F2|
     - |FieldsDlg| を開く
   * - |Ctrl| + |F8|
     - フィールド陰影表示を切り替える
   * - |Ctrl| + |F9|
     - フィールド名表示を切り替える
   * - |F9|
     - フィールドを更新する

.. admonition:: 読者ノート

   |Ctrl| + |F9| は日常的に使う DeepL の「読みながら翻訳」コマンドのキーバインド
   と衝突しているので要注意。

Quick and easy field entry
======================================================================

.. |InsertFieldMenu| replace:: :menuselection:`&Insert-->Fiel&d-->`
.. |MoreFieldsM| replace:: :menuselection:`&Insert-->Fiel&d-->&More Fields...`

一般的なフィールドを文書にすばやく入れるには |MenuBar| で次のいずれかを行う：

* |InsertPageNumberM| を選択
* |InsertFieldMenu| サブメニューで必要なフィールドを選択

.. _writer17-anchor-hold:

Using document properties to hold metadata and information that changes
======================================================================

文書の |PropertiesDlg| にはタブが六つある。|GeneralTab| と :guilabel:`Statistics`
タブの情報はプログラムが生成する。一部の情報[#writer17-footnote1]_ は
|OptionsDlg| |UserDataPage| から取得される。|FontTab| と |SecurityTab| の選択肢
については本書の他の箇所に説明がある。

|DescriptionTab| と |CustomPropertiesTab| は次の目的のために使う：

* 文書の分類、並べ替え、保存、検索を支援するメタデータ。このメタデータの一部は
  |HTML| や |PDF| で最も近い等価物にエクスポートされる。一部のフィールドには同等
  のものがなく、エクスポートされない。
* 変更される情報。たとえば、文書の表題、プロジェクト参加者の連絡先、製品名など
  は、プロジェクトの過程で変更される可能性がある。

このダイアログボックスは雛形で使用することができ、フィールド名は書き手に含めるべ
き情報を思い出させる役割を果たす。

.. todo::

   プレースホルダーはテキスト内でも同様の役割を果たすことができる。
   :ref:`writer17-anchor-placeholder` 参照。

このダイアログボックスに戻り、入力した情報を変更することがいつでもできる。そうす
ると、その情報への参照すべてが文書内のどこに表示されていても変更される。例えば、
|DescriptionTab| で :guilabel:`&Title` 欄の内容を草稿表題から製品表題に変更する
必要が出るかもしれない。

|CustomPropertiesTab| は、このダイアログボックスの他のタブが設けるフィールドに収
まらない情報を保存するために使用する。

新しい文書で |CustomPropertiesTab| を最初に開いたとき、空白の場合がある。新しい
文書が雛形に基づいている場合、このタブにはフィールドが含まれることがある。

タブの右下にある :guilabel:`Add &Property` ボタンを押すと、独自性質入力欄の列が
はめ込まれる。

* :guilabel:`Name` には、典型的な選択肢のドロップダウンリストがある。スクロール
  ダウンすると、すべての選択肢を見ることができる。
* :guilabel:`Type` では `Text`, `DateTime`, `Date`, `Duration`, `Number`, `Yes`,
  `No` から選択できる。新しい型を定義することはできない。
* :guilabel:`Value` ではこのフィールドが使用される文書に表示させたい内容を指定す
  る。例えば、:guilabel:`Type` の選択が `Date` の場合、その性質の
  :guilabel:`Value` は日付に限定される。

独自性質を削除するには行の右端にあるバツボタンを押す。

.. tip::

   日付の値の形式を変更するには、|OptionsDlg| |LanguagesPage| :guilabel:`Locale
   setting` を変更する。

Using other fields to hold information that changes
======================================================================

フィールドの用途の一つとしては、プロジェクトの過程で変更される可能性のある情報を
保持することがある。例えば、責任者、製品、会社全体の名前が変更される可能性があ
る。変更可能な情報をフィールドとして文書内に入れておけば、ある場所で情報を変更す
れば、そのフィールドが出現するすべての場所で自動的に変更される。

.. admonition:: 読者ノート

   フィールドはプログラミングにおける変数の役割を果たすものだと考えてよさそうだ。

Writer にはフィールドが参照する情報を格納できる場所がいくつか用意されている。

次の文書特性は |InsertFieldMenu| にある。これらのフィールドを入れるには、対応す
るメニュー項目をクリックする：

* `Page Number`
* `Page Count`
* `Date`
* `Time`
* `Title`
* `First Author`
* `Subject`

これらのフィールドのいくつかは |DocPropsDlg| から情報を取得する。

その他の文書性質は |FieldsDlg| の |DocInformationTab| と |DocumentTab| にあり、
次のいずれかで届く：

* |MenuBar| |MoreFieldsM|
* キーバインド |Ctrl| + |F2|

.. |TypeList| replace:: :guilabel:`&Type` 一覧

|DocInformationTab| の |TypeList| にある `Custom` 項目は |DocPropsDlg|
|CustomPropertiesTab| から派生したものだ。独自性質が定義されていない場合は一覧に
現れない。

フィールド値には |OptionsDlg| |UserDataPage| から拾われるものがある。そのページ
の情報が正しいことを確認しろ。

これらのフィールドをはめ込むには |TypeList| でフィールドを選択し、物が現れれば
:guilabel:`Select` および :guilabel:`Format` 一覧で値を選択する。最後に |Insert|
を押す。

.. tip::

   内容を固定するには、フィールドをはめ込むときに :guilabel:`Fi&xed content` を
   オンにする。必要であれば、後でこのダイアログボックスに戻って、フィールドを再
   び可変にするためにこのオプションの選択をオフにしろ。例えば、文書の作成日を入
   れるフィールドを使用する場合、その日付を変更させたくないとする。

.. _writer17-anchor-autotext:

Using AutoText to insert often-used fields
======================================================================

同じフィールドを頻繁に使用する場合は、AutoText を使用するとすばやく簡単にフィー
ルドをはめ込める。

.. |NameBox| replace:: :guilabel:`Na&me`

フィールドに AutoText 項目を定義するには：

#. フィールドを文書に普通に入れる。
#. 入れたフィールドを選択し、:menuselection:`&Tools-->AutoText` を選択する
   か、キーバインド |Ctrl| + |F3| を使う。
#. |AutoTextDlg| でこの新しい項目を登録するグループ (e.g. `My AutoText`) を選択
   し、|NameBox| に登録項目の名前を打ち込み、必要に応じて :guilabel:`&Shortcut`
   を変更する。
#. :menuselection:`AutoTe&xt-->&New` を選択して項目をフィールドとして入れる。
   AutoText の項目がプレーンテキストになるので :menuselection:`New (text only)`
   は選択するな。
#. |Close| を押して |AutoTextDlg| を閉じる。

このフィールドをキャレット位置に入れるには、ショートカットを入力し、|F3| を押
す。

.. admonition:: 読者ノート

   ここで言うショートカットとは、Visual Studio Code の user snippets 機能におけ
   る prefix に対応する。

Defining your own numbering sequences
======================================================================

段落の先頭に番号を常に付けたいわけではない場合や、組み込みの番号付けの選択肢より
も制御したい場合、一覧スタイルでは思いどおりにならない場合などに、独自の連番を定
義して使用したい場合がある。

番号範囲変数フィールドを使用して、連番を作成する方法を見ていく。

アラビア数字を使って数値範囲変数を作成するには：

.. |SelectList| replace:: :guilabel:`&Select` 一覧
.. |FormatList| replace:: :guilabel:`&Format` 一覧

#. キャレットを文書内の空白の段落に置く。
#. |MoreFieldsM| を選択するか、|Ctrl| + |F2| を押して |VariablesTab| を選択する。
#. |TypeList| で `Number range` を選択する。|FormatList| で `Arabic (1 2 3)` を
   選択する。|NameBox| に `Step` などの名前を入力する。
#. |Insert| を押す。変数名 `Step` が |SelectList| に表示され、数値フィールドが文
   書の挿入点に表示される。|FieldsDlg| は開いたままだ。
#. |FieldsDlg| の |Insert| をさらに何回か押すと、2, 3, 4, ... と数字が文書に表示
   される。
#. 挿入したフィールドは削除することができる。|FieldsDlg| |SelectList| には
   `Step` 連番が（この文書のみ）残る。このフィールドは文書内の任意の場所に入れる
   ことが可能。

.. tip::

   `Step` 番号を入力するたびにこのような作業をするのを避ける方法がある。`Step`
   AutoText 登録項目を作成するのだ。そうすれば、他の AutoText を入力するのと同じ
   方法でフィールドを入れられる。:ref:`writer17-anchor-autotext` を見ろ。

.. |ValueBox| replace:: :guilabel:`&Value` 欄

.. tip::

   使用者定義変数が文書で使用されていない場合、|ValueBox| の隣にあるバツボタンが
   活動開始する。これを押すと変数を削除することができる。使用されている変数を削
   除するには、まずその変数を使用しているフィールドをすべて文書から削除し、それ
   から一覧から変数を削除する。

.. admonition:: 読者ノート

   この節で述べられた連番の番号は、挿入順序ではなく、文書内の出現順序によって決
   まるようだ。

Using automatic cross-references
======================================================================

文書の他の部分への相互参照を入力した場合、見出しの文言を変更したり、図版を追加ま
たは削除したり、トピックを再編成したりすると、それらの参照は簡単に古くなってしま
いる。入力した相互参照を自動参照に置き換えると、すべての参照は自動的に更新され、
現在の文言またはページ・図表・表組番号が表示される。

.. |CrossRefTab| replace:: :guilabel:`Cross-references` タブ

|FieldsDlg| |CrossRefTab| には、見出し、段落番号、しおりなど、項目がいくつか表示
される。図版の説明、表組の説明、使用者定義の数値範囲変数、その他いくつかの項目が
文書で定義されている場合、その型も一覧に表示される。

必要な項目に表示される単語や語句を知っている場合、|SelectList| に表示される項目
の一覧を短くすることができる。

.. tip::

   相互参照に Writer のハイパーリンク機能を使う人がいるが、リンク先項目のテキス
   トを変更してもハイパーリンクの表示テキストは変更されない。ほとんどの場面で相
   互参照を使用するのが望ましい。相互参照は |HTML| 文書ではハイパーリンクになら
   ないので、Writer 文書ではハイパーリンクを使用する必要がある。

Inserting cross-references
----------------------------------------------------------------------

|CrossRefTab| に表示されている見出し、図版、その他の項目に相互参照を入れる方法：

.. |InsertCrossRefM| replace:: :menuselection:`&Insert-->Cross-&reference...`
.. |ReferUsingList| replace:: :guilabel:`&Refer using` 一覧

#. キャレットを文書内の相互参照を表示したい場所に置く。
#. |FieldsDlg| が開いていない場合は |InsertCrossRefM| を選択するか、|Ctrl| +
   |F2| を押す。|CrossRefTab| の |TypeList| で参照する項目の型 (e.g.
   `Headings`, `Figures`) をクリックする。
#. |SelectList| で必要な項目をクリックする。この一覧には、自動的に作成された項目
   と使用者定義の参照の両方が表示される。
#. |ReferUsingList| で、必要な参照の型を選択する。選択肢は参照する項目によって異
   なる（すぐ次の節を参照しろ）。
#. |Insert| を押す。

Formats for cross-references
----------------------------------------------------------------------

相互参照はその型によらず、次の形式から選択することができる：

`Page number (unstyled)`
   対象のページ番号。ページスタイルで指定された書式を使用しない。
`Chapter`
   参照された対象がある章の番号。
`Referenced Text`
   参照またはしおりとして設定された全文集合。
`"Above"/"Below"`
   参照される対象に対するフィールドの相対的な位置に応じて、上または下の単語。
`Page number (styled)`
   対象のページ番号。ページスタイルで指定された書式を使用。ローマ数字が使用され
   る front matter でページへの参照を置くときにたいへん便利だ。

見出しや段落番号にはさらに三つある：

`Number`
   見出しまたは番号付き段落の番号を、文脈に応じて上位レベルも含めて入れる。
`Number (no context)`
   見出しまたは番号付き段落の番号のみを入れる。例えば項目 2.4 を参照する場
   合、単に ``4`` が入る。
`Number (full context)`
   上位の階層水準を含む完全な番号を入れる。例えば項目 2.4 を参照する場合、完全な
   番号である ``2.4`` が入る。

図表や図版など、説明とともにはめ込まれるものに対しては、次のように選択することも
できる：

`Category and Number`
   参照される物の区分と番号の両方 (e.g. ``Figure 6``) を入れる。図版や図表で最も
   使用される形式だ。
`Caption Text`
   参照物の説明全文 (e.g. ``Figure 6: This is an example figure``) を入れる。
`Numbering`
   参照される物の連番を区分を除いて入れる。例えば、``Table 2`` を参照する場合、
   フィールドには番号 ``2`` のみが含まれる。

Example of cross-referencing to numbered headings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

第一章第二節第五項では見出しに 1.2.5 と番号を付けることができる。直前の 1.2.4 の
テキストに含まれる参照は `Number` 形式を使うと ``4`` と表示される。もし番号がよ
り多くの下位階を表示するように設定されていれば、同じ参照は設定により ``2.4`` ま
たは ``1.2.4`` と表示される。`Number (full context)` 形式を使用すると、番号がど
のように形式化されていても、つねに ``1.2.4`` と表示される。

.. _writer17-anchor-preparing:

Preparing items as targets for cross-referencing
----------------------------------------------------------------------

|CrossRefTab| に自動的に表示されないもの、例えば説明のない図版や箇条書き一覧の項
目などに相互参照を挿入したい場合は、まず参照先となる項目を用意する必要がある。こ
れを行うには、しおりを使用するか、参照を設定する。対象が定義されたら、
:ref:`writer17-anchor-inserting` の説明に従って相互参照することができる。

Using bookmarks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

しおりは Navigator に一覧表示され、そこから直接アクセスできる。|HTML| 文書ではし
おりはハイパーリンクを使って飛ぶことができる錨に変換される。

しおりの詳細については :ref:`writer17-anchor-bookmarks` を見ろ。

#. しおりにしたいテキストを選択するか、テキスト内の必要な場所をクリックする。メ
   ニューから :menuselection:`&Insert-->Bookmar&k...` を選択する。
#. :guilabel:`Bookmark` ダイアログボックスで以前に定義したしおりが一覧表示され
   る。:guilabel:`&Name` 欄に新しいしおりの名前を入力するか、既定の名前を受け入
   れ、:guilabel:`In&sert` ボタンを押す。
#. さらにしおりを入れる間、ダイアログボックスを開いたままにしておくことができ
   る。終わったら |Close| を押す。

.. admonition:: 読者ノート

   「しおりにしたいテキスト」と記したが、文書中の選択自体としおりが対応すると考
   えろ。

Setting references
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

集合参照は |FieldsDlg| |CrossRefTab| で登録、管理する。

#. しおりのテキストを選択するか、テキスト内の必要な場所をクリックする。
#. |MenuBar| で |InsertCrossRefM| を選択する。
#. |FieldsDlg| |CrossRefTab| で |TypeList| から :guilabel:`Set Reference` を選択
   する。|SelectList| には定義済みの参照が表示される。複数の項目を参照に設定する
   間、このダイアログボックスは開いたままにできる。
#. 右下の |ValueBox| に項目のテキストが表示される。この項目を識別できるテキスト
   を |NameBox| に入力する。フィールド名は大文字と小文字を区別する。
#. |Insert| を押す。|NameBox| に入力したテキストが |SelectList| に表示される。
#. 以上を必要なだけ繰り返す。
#. |Close| を押す。

Cross-referencing between subdocuments
======================================================================

宗主文書の従属文書間の相互参照を自動的に更新したい場合がある。この題目では集合参
照を使用する方法について説明する。しおりを使用する場合も手順は同様だ。

Preparing the references
----------------------------------------------------------------------

相互参照の対象となる項目すべてについて :ref:`writer17-anchor-preparing` で説明し
た手順をとれ。この場合、見出し、図版の説明、その他の項目を含める必要がある。一つ
の文書内の項目のように自動的に一覧されないからだ。

.. tip::

   参照フィールドの名前を一覧し、一つの文書内だけでなく、関連する文書すべてでそ
   れぞれの名前が一意であることを確認しろ。この情報を管理する方法の一つは、別の
   ファイルやスプレッドシートに保存することだ。

   フィールド名は大文字と小文字を区別する。参照する項目にマウスポインターを合わ
   せるとフィールド名を確認できる。

.. _writer17-anchor-inserting:

Inserting the cross-references
----------------------------------------------------------------------

.. admonition:: 読者ノート

   手順をまだ試していない。

#. 相互参照を表示したい文書内のどこかにキャレットを置く。
#. |InsertCrossRefM| を選択。
#. |FieldsDlg| |CrossRefTab| で |TypeList| から `Insert Reference` を選択する。
#. |ReferUsingList| で `Referenced text` を選択する。
#. |SelectList| には使用している従属文書の参照フィールド名（もしあれば）しか表示
   されていないので、その一覧は無視して、前節で手動作成した一覧を確認しろ。
#. |NameBox| に参照する従属文書に設定した参照の名前を入力する。この例では、参照
   名は `word count` だ。
#. |Insert| を押し、参照とページ番号の間に表示したいテキスト (e.g. `on page`) を
   入力し、|ReferUsingList| にある `Page number (unstyled)` を使って別の参照を入
   れる。相互参照はエラーを表示する。これらのフィールドの上にマウスポインターを
   置くとフィールド名が表示される。[#writer17-footnote2]_
#. 従属文書に必要な相互参照をすべて挿入したら |Close| を押して保存し、宗主文書の
   ウィンドウに戻る。
#. |MenuBar| の |UpdateLinksM| を選択するか、Navigator の |UpdateLinksC| を選択
   する。宗主文書の編集内容がすべて表示される。宗主文書内で、相互参照フィールド
   を挿入した従属文書のページに移動する。

これで、挿入した場所に相互参照のテキストが表示されるはずだ。うまくいかない場合
は、宗主文書を保存して閉じ、リンクを更新しながらもう一度開いてください。編集のた
めに従属文書を開くと、エラーメッセージが表示される。

この技法は手順中で従属文書を直接開いて（宗主文書内からではなく）相互参照フィール
ドを入れる場合にも有効だ。

Using fields in headers and footers
======================================================================

ヘッダーやフッターにフィールドを挿入することができる：

* ページ番号、文書表題、作成者、作成日時、現在日時、または総ページ数フィールドを
  入れるには、|DocPropsDlg| を使用するか、|MenuBar| で
  |InsertFieldMenu| から対応項目を選択する。
* しおり、見出し、その他の項目への相互参照を入れるには、次のいずれかを行う：

  * |InsertCrossRefM| を選択
  * |MoreFieldsM| で |FieldsDlg| を開いて |CrossRefTab| を使う
* `Heading 1` が章表題に使われている場合、`Document` フィールドを使って現在の章
  表題を挿入し、ヘッダーやフッターの内容が章ごとに変わるようにする。
  |MoreFieldsM| で |FieldsDlg| |DocumentTab| をクリックする。
* 他の見出しレベルとの相互参照を入れるには、|FieldsDlg| |DocumentTab| 右下の
  :guilabel:`&Up to level` で値を指定する。

.. note::

   ページのヘッダー内の相互参照フィールドは、そのページのそのレベルの最初の見出
   しを拾い上げる。フッターのフィールドは、そのページのそのレベルの最後の見出し
   を拾う。

フッターに `Page 9 of 12` のような表記を追加できる。

#. `Page` フィールドの前に単語 Page と空白を入力する。
#. `Page` フィールドの後に空白、単語 of, 空白を入力する。
#. :menuselection:`&Insert-->Fiel&d-->Page &Count` を選択する。

章番号をページ番号に含めるには：

#. 挿入した `Page` フィールドの直前にキャレットを置く。
#. |FieldsDlg| |DocumentTab| で |TypeList| で `Chapter` を選択し、|FormatList|
   で `Chapter number without separator` を選択する。|Insert| を押す。
#. このフィールドを挿入したヘッダーまたはフッターに移動し、章番号とページ番号の
   間に表示したい文字を入力する。
#. 目次はこれらの章番号を自動的に拾い出さないので、|Writer15| で説明するように
   |TOCDlg| |EntriesTab| で変更する必要がある。

.. _writer17-anchor-bookmarks:

Managing bookmarks
======================================================================

しおりは位置参照にもテキスト参照にも使える。

.. |BookmarkDlg| replace:: :guilabel:`Bookmark` ダイアログボックス

しおりで囲まれたテキストは、文書自体だけでなく |BookmarkDlg| でも編集できる。ダ
イアログボックスでテキストを編集すると、文書でも編集される。変更追跡をオンにして
いる場合、しおりの変更は文書内で追跡される。

|BookmarkDlg| を使ったしおりのテキストを編集する手順：

#. Navigator の Bookmarks 一覧を開き、しおり名を右クリックし、コンテキストメ
   ニューから |EditC| を選択する。|BookmarkDlg| がそのしおりを選択した状態で開
   く。ダイアログボックスが開いている間は、一覧内のどのしおりでも選択できる。
#. 必要なしおりを選択した状態で :guilabel:`&Edit Text` ボタンを押す。選択したし
   おりのテキストがテキスト欄で強調表示される。
#. ダイアログボックスで強調表示されたテキストをクリックして編集する。終わった
   ら |Close| を押す。

しおりの名前を編集するには、 Navigator でしおりを右クリックし、コンテキストメ
ニューから :menuselection:`&Rename...` を選択するか、|BookmarkDlg| でしおりを選
択し、:guilabel:`&Rename` ボタンを押す。小さなダイアログボックスが開く。新しい名
前を入力するか、既存の名前を編集し、|OK| を押して保存する。

文書内のしおりを探すには、Navigator でしおりを右クリックし、コンテキストメニュー
から :menuselection:`&Go to` を選択するか、|BookmarkDlg| でしおりを選択し、
:guilabel:`&Go to` ボタンを押す。キャレットがしおりの場所に飛び、しおりが強調表
示される。

Developing conditional content
======================================================================

条件式中身とは、指定した条件によって文書に含まれたり含まれなかったりするテキスト
や画像のことだ。

簡単な例としては、延滞した口座の督促状がある。最初と二度目の督促状には Reminder
Notice という件名かもしれないが、三度目には Final Notice という件名になり、さら
に最終段落が異なるかもしれない。

もっと複雑な例としては、Pro 版と Lite 版の二種類がある製品のソフトウェア手順書が
ある。両者には多くの共通点があるが、Pro 版には Lite 版にはない機能がある。条件式
中身を使用すれば、両方の版の情報を含む一つのファイルを管理し、それぞれのためにカ
スタマイズした印刷（またはオンラインヘルプの作成）を行うことができる。同じ情報を
二つ管理する必要がないので、何か変更があったときにどちらかを更新し忘れることがな
くなる。

.. tip::

   場合によっては、段落や文字のスタイルを隠すことで同じ効果を得ることができる。
   |Writer09| を見ろ。

Choose the types of conditional content to use
----------------------------------------------------------------------

条件式中身の設計と維持に役立つ Writer 機能について。文書一つで一つでも任意の組み
合わせでも使用できる。

Conditional text
   条件式テキストでは代替テキスト（単語、句、文）を二つ指定できる。一方のテキス
   トは指定条件を満たした場合に表示・印刷され、もう一方は満たさなかった場合に表
   示・印刷される。|FieldsDlg| 以外では画像を入れたり、テキストを編集したりする
   ことはできない（文書本文ではできない）。また、テキストの一部を書式設定するこ
   とはできないが（例えば、ある単語を太字にし、他の単語を太字にしないなど）、
   フィールドの内容すべてに影響を与える書式設定をすることはできる（例えば、すべ
   ての単語を太字や斜体にするなど）。テキストに相互参照や他のフィールドを含める
   ことはできない。
Hidden text
   隠しテキスト（単語、句、文）では、見せるか隠すかの二択しかない。指定条件を満
   たせばテキストが隠れ、満たさなければ現れる。欠点は条件式テキストと同じで、画
   像を含められないこと、本文のテキストを編集できないこと、テキストの一部を書式
   整形できないこと、フィールドを含められないことだ。
Hidden paragraphs
   どのような条件で段落を表示または印刷しないかを指定できる段落だ。画像を含めた
   り、本文のテキストを編集したり、テキストの任意の部分を整形したり、フィールド
   を含めたりすることが可能だ。

   例えば、データベースフィールドに現在の登録項目の内容がない場合、空白の段落を
   隠すこともできる。これは、住所を手紙に差し込むときに便利だ。住所に二行を許可
   していて、データベースレコードが一行しか使用していない場合、空白行が文書に表
   示されるのを防ぐことができる。
Hidden sections
   隠し区画は隠し段落のようなものだが、見出しと一つ以上の段落など、複数の段落を
   含むことができる。ただし、区画に段落未満の内容を含めることはできないので、単
   語や句にこの方法を使用することはできない。隠れ区画の内容は文書の他の部分の内
   容と同じように動作するが、区画を表示または印刷しない条件を指定することができ
   る。さらに、区画をパスワードで保護することもできる。

Plan your conditional content
----------------------------------------------------------------------

条件とは、プログラマーが論理式と呼ぶものだ。条件は常に真か偽のどちらかであるた
め、条件ごとに論理式を作成する必要がある。文書内のさまざまな場所で、さまざまな型
の条件式中身に同じ条件を使用することができる。

条件式中身を動作させるには、変数を選択または定義し、選択した変数に関係する論理式
（条件）を定義する必要がある。

.. _writer17-anchor-var:

Choose or define a variable
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

条件では次の変数を使用できる：

* 使用者定義変数
* 文書性質の統計値を使用する定義済みの LibreOffice 変数
* 使用者データ
* データベースフィールドの内容（住所録など）

条件中では内部変数（ページ番号や章名など）を使用できない。

Define a logical expression (condition) involving the variable
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

条件は、指定された固定値と変数またはデータベースフィールドの中身を比較する。

条件を作成するには、数式を作成するのと同じ要素を使用する。演算子、数学関数、統計
関数、数値書式、変数、定数などだ。使用可能な演算子や多くの使用例は |Help| に記載
されている。複雑な式を定義することもできるが、ほとんどの場合は単純な条件で十分
だ。

Create the variable
----------------------------------------------------------------------

.. |DatabaseTab| replace:: :guilabel:`Database` タブ

変数を作成するには、|FieldsDlg| の |DocInformationTab|、|VariablesTab|、
|DatabaseTab| にある選択肢を使用する。

DocInformation fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:ref:`writer17-anchor-hold` では、文書独自性質を設定する方法を説明した。その文書
性質を条件文の変数として使用することができる。

User-defined variable field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

変数または使用者フィールドを設定するには：

.. |InvisibleOpt| replace:: :guilabel:`Invisi&ble`

#. フィールドを挿入したい場所にキャレットを置く。
#. |FieldsDlg| で |VariablesTab| を選択する。
#. |TypeList| で `Set variable` を選択し、|FormatList| で `Text` を選択す
   る。|NameBox| に変数の名前を、|ValueBox| に値をそれぞれ入力する。

   この例では（この変数が二つの製品版に関連していることを思い出させるため）、名
   前に `ProLite` が選ばれ、値には「Lite 版であれば、このテキストは隠す」ことを
   忘れないために `Lite` が設定されている。
#. 文書にフィールドが表示されないように |InvisibleOpt| をオンにする。 |Insert|
   を押し、|Close| を押す。フィールドを入れた場所に小さな灰色の目印が表示され
   る。

.. |EditFieldsC| replace:: :menuselection:`Edit F&ields...`
.. |EditFieldsM| replace:: |EditFieldsC|
.. |EditFieldsDlg| replace:: :guilabel:`Edit Fields` ダイアログボックス

.. tip::

   灰色の目印はとても小さいので、特に文書内に他のフィールドがある場合、再度見つ
   けるのに苦労することがある。作業中は変数フィールドを表示したままにしておき、
   最終的なコピーを作成する直前に隠すように変更するといい。

   挿入点をフィールドの直前に置き、|EditFieldsM| を選択するか、フィールドを右ク
   リックしてコンテキストメニューから |EditFieldsC| を選択することがいつでもでき
   る。|EditFieldsDlg| で |InvisibleOpt| を切り替えろ。

Apply the condition to the content
----------------------------------------------------------------------

変数を定義したら、それを条件文の中で使うことができる。

.. |FunctionsTab| replace:: :guilabel:`Functions` タブ
.. |ConditionBox| replace:: :guilabel:`&Condition` 欄

Conditional text
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

まず、手引書の Lite 版には `Great Product Lite` を、Pro 版には `Great Product
Pro` という言葉を入れる条件テキストを設定しよう。製品名を記載したいときにいつで
もこのフィールドを使用する。

.. |ProLiteEQLite| replace:: ``ProLite EQ "Lite"``

#. キャレットをこれらの語句のいずれかを表示させたい場所に置く（キャレットは後で
   移動または削除することができる）。
#. |FieldsDlg| |FunctionsTab| で |TypeList| から `Conditional text` を選択する。
#. |ConditionBox|、:guilabel:`The&n`, :guilabel:`Else` 各欄に次をそれぞ
   れ入力する：

   * |ProLiteEQLite|
   * ``Great Product Lite``
   * ``Great Product Pro``

   .. note::

      これらのフィールドでは大文字と小文字が区別され、`Lite` のようなテキスト値
      の周りには引用符が必要だ。

#. |Insert| を押してフィールドを入れ、|Close| を押す。テキストに `Great Product
   Lite` が表示されるはずだ。

.. tip::

   このフィールドをテキストに入れる場所が多い場合、:ref:`AutoText
   <writer17-anchor-autotext>` 項目を作成しろ。

Hidden text
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

隠しテキストは、Lite 版にはない Great Product Pro の機能を説明する単語や短い句に
使用できる。コピーして貼り付けるなどして、文書内の複数の場所で同じフィールドを再
利用できる。隠しテキストフィールドを作成するには：

#. |FieldsDlg| |FunctionsTab| で |TypeList| から `Hidden text` を選択する。
#. |ConditionBox| に |ProLiteEQLite| と入力し、:guilabel:`Hidden t&ext` 欄に必要
   なテキストを入力する。これは条件が真の場合に隠れるテキストだ。
#. |Insert| を押してフィールドを作成し、文書中に入れる。

隠しテキストをすべて見せて編集できるようにするには、次のいずれかを実行する：

* |OptionsDlg| |WriterViewPage| で :guilabel:`Hidden te&xt` をオンにする。
* テキストを隠す条件を定義するために使用した変数の前をダブルクリックし、変数に別
  の値を入力する。

Hidden paragraphs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

条件式段落は、その条件が真の場合に隠れる。段落を隠すには：

#. 隠す段落をクリック
#. |FieldsDlg| |FunctionsTab| |TypeList| で `Hidden Paragraph` を選択
#. この例では、|ConditionBox| に |ProLiteEQLite| と入力する
#. |Insert| を押してフィールドを作成

隠し段落をすべて表示して編集できるようにするには、次のいずれかを実行する：

* |MenuBar| :menuselection:`&View-->Field &Hidden Paragraphs` を選択
* |OptionsDlg| |WriterViewPage| で :guilabel:`Hidden p&aragraphs` をオン
* 段落を非表示にする条件を定義するために使用した変数の前をダブルクリックし、変数
  に別の値を入力する。

Hidden sections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

条件式区画条件が真の場合に隠れる。条件式区画を作成するには：

.. |HideOpt| replace:: :guilabel:`H&ide`

#. 条件式区画に含めたいテキストを選択する（他のテキストと同じように後で編集でき
   る)。
#. :menuselection:`&Insert-->Se&ction...` を選択する。|InsertSectionDlg| で
   :guilabel:`Section` タブを開き、|HideOpt| をオンにして、 :guilabel:`&Width
   Condition` に条件を入力する。区画に名前を付けることもできる。文書に区画が複数
   ある場合に、簡単に見つけることができるようになる。
#. |Insert| を押して区画を文書に入れる。

隠し区画を見せて編集できるようにするには

.. |EditSectionsM| replace:: :menuselection:`F&ormat-->&Sections...`

#. |MenuBar| から |EditSectionsM| を選択する。
#. |EditSectionsDlg| で一覧から区画を選択する。
#. |HideOpt| をオフにし、|OK| を押す。これで区画内容を編集できるようになる。その
   後、|EditSectionsM| を選択し、|HideOpt| をオンにすると、区画を再び隠すことが
   できる。

隠し区画を文書の通常の一部にする（つまり、区画目印は削除するが、内容は削除しな
い）手順：

#. 上記のようにして隠し区画を見せる。
#. |EditSectionsDlg| で一覧から区画を選択する。
#. |RemoveButton| を押す。区画内容は文書の通常の部分となる。

Change the value of the variable
----------------------------------------------------------------------

`Lite` と `Pro` の間で変数の値を変更するには：

#. :ref:`writer17-anchor-var` で作成した変数フィールドを見つける。
#. このフィールドのすぐ前を一度クリックし、右クリックしてコンテキストメニューの
   |EditFieldsC| を選択。
#. |EditFieldsDlg| で変数の値を `Pro` に変更する。
#. フィールドを自動的に更新するように設定している場合は、この変数を条件として使
   用している条件式テキストと隠しテキストがすべて変更される。

.. note::

   条件式テキストと隠しテキストは |EditFieldsDlg| でのみ編集可能。

.. tip::

   フィールドの自動更新を有効にするには、|OptionsDlg| |WriterGeneralPage| で
   :guilabel:`&Fields` をオンにする。

.. _writer17-anchor-placeholder:

Using placeholder fields
======================================================================

仮入力欄とは、テキスト、表組、枠、画像、物などの何かの入力を促すものだ。

仮入力欄を文書に入れるには：

.. |PlaceholderBox| replace:: :guilabel:`Placeholder` 欄

#. |FieldsDlg| |FunctionsTab| |TypeList| で `Placeholder` を選択し、|FormatList|
   で用途を選択する。
#. フィールドに表示したいテキストを |PlaceholderBox| に入力する。
#. マウスポインターをフィールド上に置いたときにツールチップとして表示させたいテ
   キストを :guilabel:`Reference` 欄に入力する。

`Image` 仮入力欄をクリックすると、|InsertImageDlg| が開き、画像
を選択するよう促される。画像を選択して |Open| を押すと、その画像が文書内のフィー
ルドに置き換わる。

同様に、`Table` 仮入力欄をクリックすると |InsertTableDlg| が開き、`Frame` 仮入力
欄をクリックすると |FrameDlg| が開き、`Object`仮入力欄をクリックすると
|InsertOLEDlg| が開く。`Text` 仮入力欄は、単にそれをクリックし、|PlaceholderBox|
にテキストを入力するだけで、フィールドが置き換わる。

Using other fields
======================================================================

データベースフィールド、フォームフィールド、中身コントロールなど、フィールドのそ
の他の使用方法については、この文書のさまざまな章で説明する。

LibreOffice には他にも便利なフィールドが多数用意されているが、専門的であり過ぎて
紹介し切れない。詳細、説明、例については |Help| を参照しろ。

Classifying document contents
======================================================================

.. admonition:: 読者ノート

   読み飛ばしていい。

文書の分類と機密保全は企業や政府にとって重要だ。使用者や組織の間で機密情報が交換
される場合、そのような情報がどのように識別され、取り扱われるかについて、当事者間
で合意する必要がある。LibreOffice は機密情報を保持するための一連の標準フィールド
を使用して、機密情報を識別および保護するための標準化手段を備えている。

LibreOffice には :abbr:`TSCP (Transglobal Secure Collaboration Participation)`
が作成したオープン標準が実装されている。これには三つの :abbr:`BAF (Business
Authentication Framework)` 区分が含まれている：

* 知的財産
* 国家安全機密保全
* 輸出管理

だ。各区分には :abbr:`BAILS (Business Authorization Identification and Labeling
Scheme)` 水準が四段階ある：

* 非業務
* 一般業務
* 機密
* 内部のみ

文書の分類を有効にするには、:guilabel:`TSCP` バーを開く。このツールバーには、文
書の機密保全の選択に役立つリストボックスが含まれている。次に、LibreOffice は文書
性質に独自フィールドを追加し、分類方策を文書のメタデータとして保存する。

機密保全策の侵害を防ぐため、高分類水準の内容を低水準の文書に貼り付けることは不可
能だ。

----

.. rubric:: 章末注

.. [#writer17-footnote1] |GeneralTab| の :guilabel:`&Created` と
   :guilabel:`&Modified` の行の人名。
.. [#writer17-footnote2] :menuselection:`&View-->&Field Names` を選択して、
   フィールドコードの表示をオンにすることができる。
