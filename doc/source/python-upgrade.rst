======================================================================
Python 移行ノート [obsolete]
======================================================================

.. caution::

   2022 年現在は Miniconda_ を利用している。:doc:`/python-miniconda` 参照。

私の Windows マシンでの Python のアップグレード作業に必要な手順について記す。ま
ずは長期に亘り安定して利用してきた 2.6 から、2.x 台最終版である 2.7 への移行作業
を記す。

そして 2014 年夏、Windows 7 の 64 ビット機に Python 3.4 環境を構築する機会が訪れ
た。

さらに 2015 年秋、Windows 10 に無料アップグレードしてしばらくしてから Python 3.5
へ移行した。

.. contents:: ノート目次

.. note::

   * OS

     * Windows XP Home Edition SP3
     * Windows 7 Home Premium x64 SP1
     * Windows 10 Home x64

   * Python upgrading

     * from 2.6.6 to 2.7.3
     * from 2.7.3 to 3.4.1
     * from 3.4.1 to 3.5.0

2.6 から 2.7 への移行計画
======================================================================

実際のところ、手間をかけて 2.6 から 2.7 へ移行する利点は今のところなさそうに思え
る。それは 2.7 での新機能を勉強してから判断すればよい。とにかく、アップグレード
手順を残しておく。

Python 2.6 site-packages の状態を保存
----------------------------------------------------------------------

私の環境では pip_ がインストールされているハズなので、2.6 環境にインストールした
サードパーティー製パッケージを書き出しておく。

ただし、バージョンは不要なので :command:`cut` にて削っておく。

.. code:: console

   bash$ cd D:/Python26/lib/site-packages
   bash$ pip freeze | cut -d= -f 1 > mypkgs.txt

後ほど :file:`mypkgs.txt` をテキストエディターで編集する。

Python 2.7 本体をインストール
----------------------------------------------------------------------

* Python_ の公式サイトから :file:`python-2.7.3.msi` をダウンロードする。
* 普通に Explorer 上から実行して、Python 2.6 のインストール場所の隣にインストー
  ルする。

Python 2.6 フォルダーから一部のファイルをコピーする
----------------------------------------------------------------------

正直、この作業が必要なのかどうかわかっていない。

* :file:`sitecustomize.py` を 2.6 フォルダーの :file:`site-packages` フォルダー
  から 2.7 フォルダーの対応する位置にコピーする。

最初に手動で準備するもの
----------------------------------------------------------------------

* setuptools_: インストーラーを利用する。
  :file:`setuptools-0.6c11.win32-py2.7.exe` のようなファイル名のものをダウンロー
  ドページから取得する。

* pip_: :file:`pip.1.1-tar.gz` を入手して、解凍後 :file:`setup.py` を利用する。

  .. code:: console

     bash$ python27 setup.py install

Windows インストーラーを利用するもの
----------------------------------------------------------------------

:program:`pip` ではインストールできないものを先にインストールしておく。

と言うより、:program:`pip` でインストールしたいパッケージ X がパッケージ Y に依
存しているとして、Y は Windows インストーラーでインストールするべきものであると
する。先に Y をインストールしておかないと、:program:`pip` で X をインストールす
る段になって、Y の扱いが怖いことになりそうだから、ここで述べる手順がある。

私の場合のパッケージ群は次の通り。インストーラーの拡張子は exe だったり msi だっ
たりするが、気にしないで構わないだろう。

* PIL_: 公式サイトに 2.7 用のものがある。
* NumPy_: 2.7 OK
* SciPy_: 2.7 OK
* Matplotlib_: 2.7 OK
* Pygame_: 2.7 OK
* Py2exe_: 2.7 OK
* PyQt4_: 2.7 OK
* pysparse: `Python Extension Packages for Windows - Christoph Gohlke`_ を利用さ
  せてもらう。

旧環境での :command:`pip freeze` の出力を利用するもの
----------------------------------------------------------------------

2.6 環境で :command:`pip freeze` することで、利用中の :file:`site-packages` パッ
ケージが得られる。これを 2.7 環境の :program:`pip` に食わせて様子見とする。

先ほど得た :file:`mypkgs.txt` をテキストエディターで編集する。 PIL, NumPy などの
インストーラーモノの行を削除して、このテキストファイルを上書きする。編集後、おも
むろに下記コマンドラインを実行する。かなり時間がかかることを覚悟することだ。

.. code:: console

   bash$ cd D:/Python27/Scripts
   bash$ ./pip install -r mypkgs.txt

* 何度か失敗するかもしれないが、成功したものを :file:`mypkgs.txt` から順次削除し
  ていき、再度 :program:`pip` 呼び出しをすればよい。
* ログを取るのもよいだろう。

特殊なもの
----------------------------------------------------------------------

Subversion の Python binding を利用しているため、これをセットアップする。

* <http://sourceforge.net/projects/win32svn/files/1.7.6/>
* :file:`svn-win32-1.7.6-ap24_py27.zip` をダウンロード。
  解凍してフォルダーを潜る。下記フォルダーを :file:`site-packages` にコピー。

  * :file:`libsvn`
  * :file:`svn_python`

2.6 のクリーンナップ
----------------------------------------------------------------------

* Windows のコントロールパネル :guilabel:`プログラムの追加と削除` を利用して、
  Python 2.6 関連のパッケージを全部アンインストールする。
* 念のため、残骸を確認するべし。自分で作った設定ファイルやらがある場合、適宜修正
  を加え 2.7 に引っ越す。
* Python 2.6.6 をアンインストールするのはパッケージを全部片付けてからの最後。

ツールや環境変数の修正
----------------------------------------------------------------------

移行、完全に個人的なメモ。他の人には通用しない作業だ。

:file:`.bashrc`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

この設定をする理由は、私が Cygwin で ``bash`` をインタラクティブシェルとして利用
しており、そこから Windows 用の Python を呼び出すことが多いことによる。

エイリアス ``python27`` を追加。

.. code:: bash

   alias a='alias'
   a python26='D:/Python26/python.exe'
   a python27='D:/Python27/python.exe'

:file:`.bash_profile`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``$PATH`` に Python 関連の記述がある場合は修正する。設定理由は上述と同じ。

:file:`SendToCygwin.ini`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

「Cygwin に送る」というユーティリティがあり、私はこれを偏愛している。その設定
ファイルを更新しておく。

.. code:: ini

   *.py =python27 %F ||
   *.pyw =python27 %F ||

環境変数 ``PATH``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:file:`D:\\Python26` を :file:`D:\\Python27` に置換。

2.7 から 3.4 への移行
======================================================================

Python 自身のメジャーバージョンアップもさることながら、OS も 64 ビット対応のもの
である。

Python 3.4 本体をインストールする
----------------------------------------------------------------------

次の 2 ステップで十分だ。

* Python_ の公式サイトから :file:`python-3.4.1.amd64.msi` をダウンロードする。
* インストーラーを実行する。インストールオプションで :program:`pip` が含まれるよ
  うにすること。

サードパーティー製パッケージのインストール
----------------------------------------------------------------------

インストーラーからインストールするものと、:program:`pip` でインストールするもの
に大別して作業することにした。

Windows インストーラーを利用するもの
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

筆者環境では、次のパッケージ群は
`Python Extension Packages for Windows - Christoph Gohlke`_ のビルドを利用した。
わかりやすさのため、インストーラーのファイル名そのものをここに記す。

* :file:`matplotlib-1.3.1.win-amd64-py3.4.exe`
* :file:`numpy-MKL-1.8.2.win-amd64-py3.4.exe`
* :file:`Pillow-2.5.1.win-amd64-py3.4.exe`
* :file:`pygame-1.9.2a0.win-amd64-py3.4.exe`
* :file:`PyOpenGL-3.1.0.win-amd64-py3.4.exe`
* :file:`PyOpenGL-accelerate-3.1.0.win-amd64-py3.4.exe`
* :file:`pyparsing-2.0.2.win-amd64-py3.4.exe`
* :file:`scipy-0.14.0.win-amd64-py3.4.exe`

PyQt5 など、それ以外のパッケージについては、それぞれの公式サイト提供のビルドを利
用した。

旧環境での pip freeze の出力を利用するもの
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. 旧環境 (2.7) の :command:`pip freeze` の出力結果をテキストファイルに保存
   (:file:`mypkgs.txt`) する。
#. :file:`mypkgs.txt` を編集し、Windows インストーラーでインストールしたパッケー
   ジの行を削除する。
#. 前回移行時と同様の手順に従う。

.. code:: console

   bash$ cd D:/Python34/Scripts
   bash$ ./pip install -r mypkgs.txt

2.7 のクリーンナップ
----------------------------------------------------------------------

前述の 2.6 のクリーンナップと同様。

ツールや環境変数の修正
----------------------------------------------------------------------

SendToCygwin の Windows 7 版が存在しないことを除いて、前述と同様。

環境変数
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

以前は :file:`sitecustomize.py` で行っていたエンコーディング関連の指定を環境変数
設定で実現する。 Windows のユーザー環境変数に次のものを指定しておくのが具合がよ
い。

.. csv-table::
   :delim: |
   :header: 環境変数,設定値

   ``PYTHONIOENCODING`` | UTF-8
   ``PYTHONPATH``       | 自作モジュールのパス


ドットファイル
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* :file:`.bashrc` の Python 関連のコードを修正。
* :file:`.bash_profile` の Python 関連のコードを修正。

:file:`2to3.py` 関連
----------------------------------------------------------------------

もっとも面倒な作業は、これまで自分が書いたすべての Python コードを Python 3 仕様
に書き改めることだ。しかし :file:`$PYTHONDIR/Tools/Scripts/2to3.py` で機械的に処
理すれば一応は動きそう。

3.4 から 3.5 への移行
======================================================================

OS を Windows 10 にアップグレードしたときには 3.4 環境はビクともしなかった。なの
で、今回は OS を変えてから初めての Python のアップグレードになる。

Python 3.5 本体をインストールする
----------------------------------------------------------------------

次の手順を踏む。

#. Python_ の公式サイトから :file:`python-3.5.0-amd64.exe` をダウンロードする。
#. インストーラーを実行する。その際は次のような点に気を配りたい。

   * :guilabel:`Customize installation` を選択する。
   * :guilabel:`pip` は当然必要だ。
   * :guilabel:`Install for all users` をオンにして、インストールパスをそれらし
     い所に設定する。

Visual Studio 2015 の Visual C++ ランタイムをインストールする
----------------------------------------------------------------------

Python 3.5 は VC++ 2015 でビルドされている。 Python 自身は上述のインストーラーを
実施したら即動作するとはいえ、一部のサードパーティー製パッケージがこれを動作環境
にあることを必要とする。そのため、Visual Studio 2015 がない環境では別途ランタイ
ムをインストールしておくのが事実上必要な作業になっている。

#. Google でよいので ``visual studio 2015 runtime`` などのキーワードで検索をす
   る。
#. Microsoft の提供するダウンロードページがヒットするはずなので、そこで 64 ビッ
   ト版を入手する。
#. インストーラーを実行する。オプションなし。

なお、Visual Studio 2015 をインストールする予定があれば Python のアップグレード
よりもそれを優先するのがよい。

サードパーティー製パッケージをインストールする
----------------------------------------------------------------------

むしろこちらがメインの作業だ。

Windows インストーラーを利用するもの
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

言い換えれば諸事情により :program:`pip` に頼れないパッケージ群のことだ。各パッ
ケージの公式サイトおよび
`Python Extension Packages for Windows - Christoph Gohlke`_ が配布するインストー
ラーに頼る。

* 拡張子が ``exe`` や ``msi`` のファイルは、よくあるインストーラー。
  インストールの順序は任意でよいハズ。
* 拡張子が ``whl`` のファイルについては、これらをダウンロードしておき
  :program:`pip` に処理させるもの。依存パッケージがあるならば、先にインストール
  を済ませる必要がある。

コツとしては NumPy_ が一番最初にインストールを済ませるべきものであろう。

* :file:`lxml-3.4.4-cp35-none-win_amd64.whl` (Christoph)
* :file:`matplotlib-1.4.3-cp35-none-win_amd64.whl` (Christoph)
* :file:`numpy-1.10.0+mkl-cp35-none-win_amd64.whl` (Christoph)
* :file:`pygame-1.9.2a0-cp35-none-win_amd64.whl` (Christoph)
* :file:`PyOpenGL-3.1.1a1-cp35-none-win_amd64.whl` (Christoph)
* :file:`PyOpenGL_accelerate-3.1.1a1-cp35-none-win_amd64.whl` (Christoph)
* :file:`reportlab-3.2.0-cp35-none-win_amd64.whl` (Christoph)
* :file:`scipy-0.16.0-cp35-none-win_amd64.whl` (Christoph)

旧環境での :command:`pip freeze` の出力を利用するもの
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

インストーラーによる作業がすべて終わってようやく :program:`pip` が使える。

今回試したらインストーラーではなく :program:`pip` で済むようになっていたパッケー
ジは次のとおり。

* Pillow (:file:`Pillow-3.0.0-cp35-none-win_amd64.whl`)
* PyOpenGL (:file:`PyOpenGL-3.1.0.tar.gz`): ただしバージョンの関係で上述のインス
  トーラーを採用する。

旧環境のクリーンナップ
----------------------------------------------------------------------

#. Windows のコントロールパネル :menuselection:`プログラムと機能` から 3.4 の
   パッケージとPython 本体をアンインストールする。
#. :file:`D:\\Python34` フォルダーを削除する。中に入っている残骸がサードパー
   ティー製パッケージの関連ファイルだけであることを確認できれば、そうする。

ツールや環境変数の修正
----------------------------------------------------------------------

3.4 から 3.5 への移行に伴う変更は軽微な修正作業になる。

ドットファイル
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Cygwin :program:`bash` で作業をするため、主にエイリアスとパスに関わる項目の設定
を更新する。

* :file:`.bashrc` の Python 関連のコードを修正。
* :file:`.bash_profile` の Python 関連のコードを修正。

:program:`ConEmu`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:program:`ConEmu` の :menuselection:`Settings... --> Startup --> Tasks` の
:guilabel:`Predefined tasks` を更新する。一例を示す。

.. csv-table::
   :delim: |
   :header: Task,Command
   :widths: 12, 88

   {Python} | :command:`D:\\Python35\\python.exe -i`
   {IPython}| :command:`D:\\Python35\\Scripts\\ipython3.exe`
   {isympy} | :command:`D:\\Python35\\python.exe "D:\\home\\yojyo\\devel\\sympy\\bin\\isympy" -- --profile=sympy`

* IPython の各 profile は別途仕込んでおく。

3.5 から 3.6 への移行
======================================================================

3.5 運用の途中から Miniconda_ 環境に移行したので :doc:`/python-miniconda` に記す。

.. include:: /_include/python-refs-core.txt
.. include:: /_include/python-refs-sci.txt
.. include:: /_include/python-refs-vision.txt
.. _PyQt4: http://www.riverbankcomputing.com/software/pyqt/intro
.. _Py2exe: http://www.py2exe.org/
.. _Pygame: http://www.pygame.org/
