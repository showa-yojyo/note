======================================================================
Cygwin 利用ノート [obsolete]
======================================================================

本稿は自分専用の `Cygwin <http://www.cygwin.com/>`__ 手引書だ。
記憶喪失になったときのために。

.. warning::

   本稿を記した当時は Windows で UNIX のコマンドラインツールを使えると便利だから
   Cygwin を利用していた。現在は Windows Subsystem for Linux, 通称 WSL が
   Microsoft から提供されているのでそれを利用するのがそういう需要のある人々の間
   で主流であるようなので、私も乗り換えた：

   :doc:`/wsl`

.. note::

   * OS: Windows 10 Home (Version 1709)
   * Cygwin Net Release Setup Program: 2.891 (64 bit)

.. contents::

なぜ Cygwin なのか
======================================================================

Windows で UNIX のコマンドラインツールが使えると便利だから。

* 各種単純作業自動化、
* テキスト検索および置換処理、
* ファイルのバージョン管理、
* データのバックアップ

といった作業には UNIX 由来の CUI ベースのツールが絶大な威力を発揮する。

そういうことを Windows 上に実現する環境は Cygwin だけではない。 MinGW や MSYS と
いったものが存在し、さらには Git の Windows 版パッケージもコマンドラインツールを
同梱している。 Cygwin の代わりにそちらを使っても構わないだろう。とにかく UNIX の
コマンドラインツールが利用可能な状態を維持することが大事なのだ。

事前条件
======================================================================

* インターネットに接続されているノート PC で作業を行なうものとする。
* Windows のユーザーアカウントに管理者権限が付与されているものとする。
* Cygwin のインストーラーは最新のものであるとする。

インストールとアップグレード
======================================================================

Cygwin 自体を新規にインストールする手順と、構成パッケージ各種を更新する手順の両
方を説明する。どちらも前述のインストーラーを利用する。

特に選択肢のないダイアログボックスについては :guilabel:`Next` ボタンを押して先に
進めばいい。

アップグレード時に「新しいバージョンがある」という文言が現れたら、Cygwin のサイ
トにアクセスして :file:`setup-x86_64.exe` をダウンロードしてそれを用いる。

Choose Installation Type
----------------------------------------------------------------------

選択肢が三つあるが、いちばん上の

  :guilabel:`Install from Internet (downloaded files will be kept for future re-use)`

を選択して :guilabel:`Next` ボタンを押す。

昔はパッケージのダウンロードとインストールを二段階に分けて作業をしていたが、最初
のラベルの文言にあるように直接インストール時にもダウンロードしたファイルが保存さ
れることがわかったので、その必要はなくなった。

Choose Installation Directory
----------------------------------------------------------------------

ここでの項目は初回インストール時にのみ明示的に指定する。二回目以降のインストー
ラー操作時には、これらの項目に設定済みの値が入力済みになっている。

:guilabel:`Root Directory`
  ドライブ直下に配置したいので、例えば :file:`D:\\cygwin64` のように指定する。

:guilabel:`Install for`
  たとえ自分一人しかユーザーがいなくても :guilabel:`All users (RECOMMENDED)` を
  チェックする。

Select Local Package Directory
----------------------------------------------------------------------

このダイアログボックスでは、インストーラーがインターネットからダウンロードした
ファイルを保存しておくためのフォルダーを指定する。

:guilabel:`Local Package Directory`
  これはインストーラー :file:`setup-x86_64.exe` を保存してあるフォルダーに一致さ
  せておきたい。私の場合はこういう感じのパスだ：

    :file:`D:\\tools\\development\\cygwin`

この後の処理では、サーバー名にちなんだフォルダーをここに作成し、そのサーバーから
得た多数のファイルをここに保存しておくことになる。

Select Connection Type
----------------------------------------------------------------------

インストーラーがインターネットにどのように接続するのかを指定するらしい。私が不案
内で詳細を語れない。

:guilabel:`Select Your Internet Connection`
  選択肢が三つあるが :guilabel:`Direct Connection` をチェックする。

Choose Download Site(s)
----------------------------------------------------------------------

ファイルをどのサーバーからダウンロードさせるのかを指定する。

:guilabel:`Choose A Download Site`
  リストから選択するしかない。
  作業場所に最も近いサーバーがわかれば、それを指定するのが自然だ。例えば

    ``ftp://ftp.jaist.ac.jp``

  などが良いだろう。

Select Pakages
----------------------------------------------------------------------

このダイアログボックスでは欲しいパッケージをまとめて選択する。

初回インストール時にはデフォルト設定のまま :guilabel:`Next` ボタンを押す。

二回目以降は

* 既にインストールしたパッケージの最新版へのアップグレードを確認したり、
* まだインストールしていないパッケージを追加したり、
* 要らなくなったパッケージを削除したりできる。

この画面は入力が思いの外難しい。

* ドロップダウンボックス :guilabel:`View` では :guilabel:`Up to Date` を主に使
  う。 :guilabel:`Picked` を選ぶと、自分が明示的にインストールしたパッケージを一
  覧できる。
* エディットボックス :guilabel:`Search` はパッケージ名を入力することでインクリメ
  ンタルサーチする。利用してみることで、この手の UI でインクリメンタルサーチを提
  供してはいけないことが理解できる。
* ラジオボタン群は :guilabel:`Best` をチェックしておくのが自然だ。

日常作業や当プロジェクトを含む私個人のプロジェクトのあらゆる作業に役立つツールを
提供するパッケージ群を次に示す。クリーンインストールの際に参照したい：

* binutils: 実行形式解析用の :program:`objdump`, :program:`strings`,
  :program:`strip` がある。
* curl: 連番のファイルをダウンロードするときに重宝する。
* cygutils-extra: クリップボードを標準入出力とパイプする :program:`getclip`,
* :program:`putclip` がある。
  これがないとテキスト処理が満足にできないだろう。
* docbook-xml45: DocBook XML パッケージ。ドラクエ命のドキュメントをビルドするの
  に必要だ。
* docbook-xsl: DocBook XSL パッケージ。同上。
* dos2unix: テキストの改行文字を CRLF から LF にするためだけに
  :program:`dos2unix` が欲しい。実際には :program:`d2u` という短い名前が使える。
* libxslt: XML ファイルを別形式に変換するための :program:`xsltproc` がある。ドラ
  クエ命のドキュメントをビルドするのに必要だ。
* make: 作業の自動化の柱である :program:`make` がある。
* optipng: PNG 画像ファイルサイズを最適化する :program:`optipng` がある。
  DropBox や GitHub のストレージ管理下の PNG ファイルにはこれを適用したい。
* patch: Cygwin は :program:`diff` を標準でインストールするが、なぜか
  :program:`patch` はオプショナルだ。
* rsync: ファイルのバックアップに :program:`rsync` を使う。
* shutdown: コンソールから Windows を休止状態にできるように :program:`shutdown`
  が欲しい。これにより :program:`hibernate` を実行すると Windows セッションが一
  気に休止状態になる。
* wget: ネットカフェ時代にたいへんお世話になった :program:`wget` がある。最近は
  決まったアドレスにあるファイルを一括でダウンロードする機会も激減したが、いざと
  いうときに使えるようにしておく。
* zip: パスワードをかけるだけの粗末な暗号化で済ませられるような
  ちょっとした非公開データを DropBox フォルダーにバックアップするスクリプトが
  :program:`zip` を使う。

よその人がどのパッケージを必須と考えているのかを調べてみるのも面白い。テキストエ
ディター (e.g. emacs, vim) を入れるのが普通のようだが、私は要らない。

逆に Cygwin インストーラーにあるパッケージを採用せず、それぞれの公式サイトなどか
ら入手するものを次に示す：

* ImageMagick を利用したい場合には、公式サイトのバイナリーを採用する。
* gimp: 公式サイトから Windows 用 GIMP2 を入手してそれを採用する。
* git: :doc:`/git/index` 参照。
* graphviz
* inkscape: :doc:`/inkscape/index` 参照。
* python3: :doc:`/python-miniconda` 参照。
* subversion: これもそうだが、VCS ツールは各公式バイナリーを採用すること。
* texlive

コマンドラインツールに対しては、実行ファイルのあるフォルダーのフルパスを環境変数
``PATH`` の適当な位置に追加しておく。

環境構成
======================================================================

基本的にはインストール直後に一度だけ行えばよい作業を記す。

環境変数 ``HOME``
----------------------------------------------------------------------

Windows のユーザー環境変数として ``HOME`` を定義する。値は自分が実質的にホームと
して使っているフォルダーのフルパスとする。もっと言うとファイル
:file:`.bash_profile` へのシンボリックリンクが置いてあるフォルダーがよい。そんな
リンクを作った覚えがない場合は、そのものが置いてあるフィルダーでよい。

環境変数 ``PATH``
----------------------------------------------------------------------

Windows のそれをそのまま使うのではなく :file:`.bash_profile` で完全に上書きする
のがよい。

ファイル :file:`/etc/fstab`
----------------------------------------------------------------------

いわゆる cygdrive 対応をする。つまりファイル :file:`/etc/fstab` の内容を次に示す
ようにするか、あるいはファイル :file:`/etc/fstab.d/$USER` を作成して次の内容にす
る：

.. code:: text

   none / cygdrive binary,posix=0,noacl,user 0 0

これを設定することで、ドライブ直下に :command:`cd` する際には例えば

.. code:: console

   bash$ cd /cygdrive/d

ではなく

.. code:: console

   bash$ cd /d

のようにできる。詳細は別途調査して欲しい。

インストールのテスト
======================================================================

自分の使うツールが全て正常にインストールされているのかをテストするためのスクリプ
トを作成するといいだろう。各ツールごとにバージョン表記をして正常終了することを確
認したり、:command:`cygcheck` の出力結果を解析したりすることが考えられる。

トラブル対応
======================================================================

パッケージのアップグレードが部分的に失敗して、依存 DLL が行方不明になることで特
定の実行形式が異常終了する現象が発生することがごくまれにある。その際の対応手順を
記す。

以前、パッケージを更新した直後に :command:`make` を実行したら次のようなエラーが
発生した：

.. code:: console

   bash$ make
   bash$ D:/cygwin64/bin/make.exe: error while loading shared libraries: ?:
   cannot open shared object file: No such file or directory

こういう場合、まずインストールの状態が異常になっているパッケージを特定することから始める。
:command:`cygcheck -p` に問題の実行形式指定して、報告を見る。このときは ``could
not find cyggc-1.dll`` と出た。

次にこの DLL に対して :command:`cygcheck -p` を実行して、所属するパッケージを特
定する。このときは ``libgc`` を文字列として含む複数のパッケージがリストされた。
このおかげで :command:`make` が必要とする DLL と環境下にあるそれとのバージョンが
一致していないらしいと推測できた。

あとは Cygwin インストーラーを使って、悪影響を与えている DLL を含むパッケージを
アンインストールすれば動作するようになる。

.. figure:: /_images/cygwin-trouble.png
   :align: center
   :alt: How to detect bad DLL
   :width: 559px
   :height: 693px
   :scale: 100%

関連ノート
======================================================================

:doc:`/newham05/index`
  ドットファイルの内容を検討するのに読み返したい。
:doc:`/wsl`
  Cygwin を廃止して、WSL に移行するのを強く推奨する。ただし、それなりのハード
  ウェアスペックを必要とする。
