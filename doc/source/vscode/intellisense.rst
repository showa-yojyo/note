======================================================================
IntelliSense
======================================================================

本家 Visual Studio での目玉機能 IntelliSense も VS Code に実装されている。正確に
は、エディターで有効になっている拡張機能が対応していれば利用可能だ。IntelliSense
は一般的にはコード編集時の支援機能であるコード補完、引数情報の提供、名前空間内メ
ンバーの一覧など、さまざまなコード編集支援機能の総称ということになっているが、本
稿では単純なテキスト補完は IntelliSense とはみなさない立場を取り、別項で扱う。

.. attention::

   :doc:`./index` 冒頭の前提条件に留意すること。

.. contents::

導入方法
======================================================================

前提として、IntelliSense 機能はプログラミング言語ごとに内容が異なる。
「外付け」の拡張機能が IntelliSense を実装しているのが普通で、VS Code 単体では
JavaScript/TypeScript, JSON, HTML, CSS/SCSS モードなどでしか期待できない。

普通はプログラミング言語単位で拡張機能をインストールし、やっと IntelliSense が活
用できるという状態になる（:doc:`./extensions` の章を参照）。

機能
======================================================================

IntelliSense の機能は :program:`Emacs` にある abbrev-expand テキスト補完コマンド
を洗練させたものだと解釈される。現在のプログラミング言語モードと、エディターに入
力済みのコードを解析して、動的にプログラマーが入力しそうな文字列を、候補の一覧を
ポップアップ表示して提案するというのが基本だ。この「解析」を言語モードに関する拡
張機能が用意する。例えば C++ コードの編集中で、名前空間、オブジェクト、オブジェ
クトへのポインターを表す識別子の末端にキャレットがある状態で ``::``, ``.``,
``->`` を入力すると、それぞれ IntelliSense が起動する。

関数呼び出しをタイプし始めると直ちに IntelliSense が発動し、戻り値や引数リストに
関する情報がポップアップされるはずだ。

なお、:kbd:`Ctrl` + :kbd:`Space` を押すと、IntelliSense を手動で起動する。

IntelliSense ポップアップで :guilabel:`i` アイコンが右端にある項目については、
これをクリックするとメソッドなどのクイック情報がポップアップで示される。
ここには当該項目に付随する情報が記されていて、プログラマーの選択判断を助ける。

訳あって IntelliSense を常時無効化したい場合は :file:`settings.json` で指定する。

補完候補
======================================================================

IntelliSense の補完候補一覧は、おおむね次の順序でグループ分けされてから配列され
るようだ：

1. キャレット位置での推論から生じる候補項目
2. 当該プロジェクトにおける大域的な識別子

シンボル型
----------------------------------------------------------------------

補完項目にはシンボル型という属性があり、IntelliSense ポップアップ一覧項目左端の
アイコンで表現される。例えば候補がメソッドならば、メソッドアイコンが示される。
この規則を理解しておくと、後述する IntelliSense のカスタマイズ時に役に立つ。

`公式文書の図表 <https://code.visualstudio.com/docs/editor/intellisense#_types-of-completions>`__
を一度はチェックしておくといい。

.. todo::

   この型の集合が拡張機能で拡張される場合があるかを調査したい。

カスタマイズ
======================================================================

VS Code の IntelliSense の挙動も他の機能と同様にユーザーが設定可能である設計だ。
他の機能のように、:file:`settings.json` の分類と上述の概念の分類が一致していない
ことも同様だ。

ユーザー設定ファイル :file:`settings.json` をエディターで開く場合には文字列
``suggest`` あるいは ``suggestion`` で検索する。UI の設定画面を併用するのも重要
になる。

タブ補完を有効にする
----------------------------------------------------------------------

設定項目： ``editor.tabCompletion``

エディターで編集中に :kbd:`Tab` を押すと、IntelliSense ポップアップの表示の有無
に依らず入力中の単語が自動補完されるように設定可能だ。補完される単語は
IntelliSense が定める最良の候補だ。

キャレット位置の局所性を利用する
----------------------------------------------------------------------

設定項目： ``editor.suggest.localityBonus``

補完候補の出現順序は、拡張機能と入力中の単語との合致度で決定される。この挙動に対
して、キャレット位置により近い補完候補を一覧のより上位に置かせるように設定するこ
ともできる。

補完結果を仮決定しておく
----------------------------------------------------------------------

設定項目： ``editor.suggestSelection``

IntelliSense の既定の挙動としては、補完候補一覧の最初の項目をあらかじめ選択され
たものとして扱う。これを異なるものに指定するオプションがある。この設定値として次
のいずれかを取り得る：

``first``
    いつでも通常の候補一覧の最初の項目をあらかじめ選択されたとする。これが既
    定値だ。

``recentlyUsed``
    直前に適用された補完項目をあらかじめ選択されたとする。

    ただし、これは現在のキャレットの左側の文字列を使って、候補を絞ったり並び替え
    たりしない場合に限る。そのような調整の結果が ``recentlyUsed`` のそれと異なる
    場合は調整版が優先される。

``recentlyUsedByPrefix``
    それらを補完した以前の接頭辞に基づいて補完項目（複数かもしれない）を採用する。

    これを使用すると、IntelliSense は特定の接頭辞に対してどの補完項目が採用され
    たかを記憶するようになる。例えば ``co`` と手動で入力してから補完項目
    ``console`` を補完候補一覧から選択したとする。このとき、次回 ``co`` を手入力
    したときには ``console`` が IntelliSense 補完文字列となる。

直近に採用された項目を選択することは、同じ補完を何度もすばやく挿入するような状況
で有用だ。

補完候補とコード片候補の表示の混在を制御する
----------------------------------------------------------------------

設定項目： ``editor.snippetSuggestions``

これまで言及しなかったが、カスタマイズしない限り IntelliSensee はコード片と補完
候補を同一のポップアップで表示する。その動作を制御するオプションがある。

コード片候補が不要であれば値を ``none`` とする。

コード片候補が必要であれば、補完候補群との相対的な順序を値とする：

.. csv-table::
   :delim: @
   :header-rows: 1
   :widths: auto

   値 @ 位置
   ``top`` @ 補完候補一覧よりも上に置く
   ``bottom`` @ 補完候補一覧よりも下に置く
   ``inline`` @ 両者の項目を混在させて配列する

:doc:`./snippets` も参照。

その他
======================================================================

.. todo::

   JavaScript などの動的型付け言語における型推論推進手法など。
