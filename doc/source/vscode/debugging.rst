======================================================================
デバッグ
======================================================================

VS Code はコードエディターを標榜しているので、デバッグ機能の対応が手厚い。もっと
も、VS Code に内蔵されているデバッグ対応言語はかなり限定されている。ユーザーがデ
バッガー拡張機能を検索してインストールすることで有効にするのが通例となっている。

VS Code は編集モードとデバッグモードを区別している。デバッグ中にはプログラムの状
態を監視・管理するための UI がツールバー、サイドバー、パネルに出現する。本稿では
その辺りの注目点を記す。

.. attention::

   :doc:`./index` 冒頭の前提条件に留意すること。

.. contents::

実行＆デバッグ
=======================================================================

対象プロセスを実行・デバッグするためのコマンドを次に示す：

.. csv-table::
   :delim: @
   :header: キーバインド,コマンド,操作

   :kbd:`F5` @ :guilabel:`Start Debugging` @ デバッグセッションを開始し、最初のブレイクポイントで停止する。
   :kbd:`Ctrl` + :kbd:`F5` @ :guilabel:`Run Without Debugging` @ デバッガーなしでプロセスを起動する。
   :kbd:`F11` @ :guilabel:`Start Debugging and Stop on Entry` @ デバッグセッションを開始し、エントリーポイントで停止する。

デバッグには最初のコマンドを用いるのが普通だ。

私はキーボード操作で作業したいのでキーバインドしか記さないが、いざとなれば

* メインウィンドウの :menuselection:`Run` からメニュー項目を選択したり、
* Side バー内 :guilabel:`RUN` ビューの :guilabel:`Run and Debug` ボタンを押したり、
* Side バー内 :guilabel:`RUN AND DEBUG` ツールバーの操作アイコンをクリックしたり

して同じコマンドを実行すればいい。

構成
=======================================================================

デバッグセッションの起動方法はプロジェクトにより異なるのが一般的であるので、
VS Code は構成ファイルにその指定を保存しておく仕組みを採っている。
Side バー内 :guilabel:`RUN` ビューの :guilabel:`create a launch.json file` をク
リックすると、その構成ファイルをワークスペース管理フォルダーに生成する。

リンクをクリックすると、初回デバッグ時に見たものと同じドロップダウンリストが画面
上部に表示される。そして、やはり初回に選択した項目を選択する。公式文書の画面イ
メージは Node を選択したものだ。

基本的なプロパティー
-----------------------------------------------------------------------

構成ファイル :file:`launch.json` の書式について簡単に記す。

.. code:: json

   {
       "version": "0.2.0",
       "configurations": [
           {
               "type": "node",
               "request": "launch",
               "name": "Launch Program",
               "skipFiles": [
                   "<node_internals>/**"
               ],
               "program": "${workspaceFolder}/app.js"
           }
       ]
   }

ファイル :file:`launch.json` をエディターで編集すると IntelliSense が働いて、オブ
ジェクト内で有効なプロパティー名が補完され、同時に解説がポップアップ表示される。
指定必須のプロパティーは次の三つ：

``type``
    デバッガーそのものを指定する。例えば、VS Code 内蔵の Node.js デバッガーを指
    定するには ``"node"`` と書く。PHP 拡張機能ならば ``"php"``, Go 拡張機能なら
    ば ``"go"`` と書く。

``request``
    現在のところ ``launch`` または ``attach`` を指定するしかない。
    デバッグ実行と既存プロセスへの取り憑きにそれぞれ対応する。

``name``
    ドロップダウン :guilabel:`Debug launch configuration` における表示名。

たいていのデバッガーが対応しているプロパティーで、重要なものを次に記す：

``program``
    デバッガー起動時に実行する実行ファイル名。

``args``
    デバッグするプログラムに引き渡すコマンドライン引数。

``env``
    環境変数。未指定を表現するのに ``null`` を値に取ることが許される。

``cwd``
    作業ディレクトリーパス。実行ファイルの依存関係を検出させる必要があるならば、
    この指定は重要だ。

``console``
    端末の種類をこの属性で指定できるようだ。次のような値を取るだろう：

    * ``"internalConsole"``
    * ``"integratedTerminal"``
    * ``"externalTerminal"``

デバッグコマンド
=======================================================================

デバッグセッションを開始すると、エディター上部に本家 Visual Studio でも見かけた
ようなデバッグツールバーが表示される。効率の観点から、デバッグコマンドを実行する
のはキーボード操作によるのが自然だ。

デバッグコマンド集合自体は、よそのデバッガーでも見かけるものだ：

.. csv-table::
   :delim: @
   :header: キーバインド,コマンド,操作

   :kbd:`F5` @ :guilabel:`Continue` @ 次のブレイクまでプログラムカウンターを進める
   :kbd:`F5` @ :guilabel:`Pause` @ 進行中のプログラムを一時停止する
   :kbd:`F10` @ :guilabel:`Step Over` @ プログラムカウンターをワンステップ進める
   :kbd:`F11` @ :guilabel:`Step Into` @ プログラムカウンターを関数呼び出しの内部に入る
   :kbd:`Ctrl` + :kbd:`F11` @ :guilabel:`Step Into Target` @ Step Into する対象を一覧する（後述）
   :kbd:`Shift` + :kbd:`F11` @ :guilabel:`Step Out` @ 関数呼び出し復帰直後までプログラムを進める
   :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`F5` @ :guilabel:`Restart Debugging` @ デバッグセッションを Stop して新しく Start する。
   :kbd:`Shift` + :kbd:`F5` @ :guilabel:`Stop Debugging` @ デバッグセッションを打ち切って終了する。

コマンド :guilabel:`Step Into Target` は説明を要すると思われるのでここに記す。あ
るステップでプログラムカウンターが停止しているとする。この時点で可能性のある
Step Into 対象（関数）すべての一覧がポップアップされる。何か項目を選択すると、プ
ログラムカウンターがその対象に Step Into するというコマンドだ。

ブレイクポイント
=======================================================================

ブレイクポイント一つの有効性を反転するにはコマンド :guilabel:`Toggle Breakpoint`
を実行する。コマンドの直接指定以外では、次のいずれかの操作により発動する：

* 対象行にキャレットがある状態で :kbd:`F9` を押す。
* 行番号の左マージンをクリックする。

切り替え以上の細かい制御は Side バー :guilabel:`RUN AND DEBUG` ビュー
:guilabel:`BREAKPOINTS` セクションで行う。次のコマンドなどを UI 操作で実現でき
る：

.. csv-table::
   :delim: @
   :header: コマンド,操作

   :guilabel:`Toggle Activate Breakpoints` @ ブレイクポイントすべてに対する :guilabel:`Toggle Breakpoint`
   :guilabel:`Edit Breakpoint` @ ブレイクポイントに停止条件を与える
   :guilabel:`Remove Breakpoint` @ ブレイクポイント一つを削除する
   :guilabel:`Remove All Breakpoints` @ ブレイクポイント全てを削除する

条件付きブレイクポイント
-----------------------------------------------------------------------

適用されているデバッガー拡張機能によっては、条件付きブレイクポイント機能も用意さ
れている。次のどれかを行って条件を与える：

* 対象行にキャレットを置いてからコマンド :guilabel:`Debug: Add Conditional Breakpoint`
  を直接実行する。
* メインメニューから
  :menuselection:`Run --> New Breakpoints --> Add Conditional Breakpoint`
  を選択する。
* エディター行左マージンからコンテキストメニューを表示して、項目
  :menuselection:`Add Conditional Breakpoint` を選択する
* 既存のブレイクポイントに対して :menuselection:`Edit Condition` を実行する。
  表示方法の例：

  * エディター行左マージンのブレイクポイントの丸印のコンテキストメニュー
  * :guilabel:`BREAKPOINTS` セクションの鉛筆アイコンクリック

上記の編集コマンドを実行すると、エディターを割り込むように入力 UI が出現する。
VS Code 以外のデバッガーと同様に、停止条件を評価式とヒットカウントのいずれか、も
しくは双方により指定する。

インラインブレイクポイント
-----------------------------------------------------------------------

文が一行に複数あるような場合、C/C++ で言うならばセミコロンが複数あるような行の途
中にブレイクポイントを設定したい。こういうときにインラインブレイクポイントを利用
する。対象文内にキャレットを置いてから、次のいずれかの方法でインラインブレイクポ
イントを追加する：

* コマンド :guilabel:`Debug: Inline Breakpoint` を直接実行する。
* :kbd:`Shift` + :kbd:`F9` を押す。
* メインメニューから :menuselection:`Run --> New Breakpoints --> Inline Breakpoint`
  を選択する。

前節で述べた :menuselection:`Edit Condition` を実行することで、定義済みインライ
ンブレークポイントに条件を設定することもできる。

関数ブレイクポイント
-----------------------------------------------------------------------

関数名を指定することでブレイクポイントを設定できる。作成方法：

* コマンド :guilabel:`Add Function Breakpoint` を直接実行する。
* :guilabel:`BREAKPOINTS` セクション右上のプラスアイコン押し、関数名を入力する。

関数ブレークポイントは :guilabel:`BREAKPOINTS` セクション一覧に赤三角形で示される。

ログポイント
-----------------------------------------------------------------------

VS Code 内蔵 JavaScript デバッガーを含むデバッガーのいくつかはコマンド
:guilabel:`Debugger: Add Logpoint` を実装している。

ログポイントとは、事前に定義しておいた書式の文字列をログ出力するようなブレイクポ
イントだ。この文字列は JavaScript の fstring の要領で中括弧内に評価式を含むこと
ができる。

デバッグ中にプログラムデータを検査する
=======================================================================

変数
-----------------------------------------------------------------------

デバッグ実行中に特定の変数の値をチェックするには、次の方法がある：

* :guilabel:`RUN AND DEBUG` ビュー :guilabel:`VARIABLES` セクションにある変数の
  表示をチェックする。
* エディターで変数にマウスをホバーすると現れるツールチップをチェックする。

:guilabel:`VARIABLES` ビューの変数に関するコンテキストメニューには、変数にアクセ
スする有用なコマンドがある。

.. csv-table::
   :delim: @
   :header: コマンド,操作

   :menuselection:`Set Value` @ 現時点での変数の値を任意に変更する
   :menuselection:`Copy Value` @ 値をクリップボードにコピーする
   :menuselection:`Copy as Expression` @ 識別子や評価式をクリップボードにコピーする

ウォッチ
-----------------------------------------------------------------------

変数というより、それを含む式の評価を動的にチェックしたいことがある。それには
:guilabel:`RUN AND DEBUG` ビュー :guilabel:`WATCH` セクションを利用する。次のい
ずれかの方法で項目を追加する：

* :guilabel:`WATCH` セクションの :guilabel:`Add Expression` アイコンをクリックし
  て式を直接追加する
* :guilabel:`VARIABLES` セクションの項目コンテキストメニューから
  :menuselection:`Add to Watch` を選択する

不要になった項目は Remove 系コマンド各種で削除すればいい。

デバッグ端末
=======================================================================

デバッグ中のシンボルを用いた式をデバッグ端末で評価することができる。

デバッグ端末の表示状態を切り替えるコマンドは :guilabel:`View: Toggle Debug Console`
だ。コマンドを実行するには次のいずれかでよい：

* 直接実行する
* メインメニューの :menuselection:`View --> Debug Console` を選択する
* :guilabel:`Debug` ペインで :guilabel:`DEBUG CONSOLE` タブの表示を切り替える
* :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`Y` を押す

式を最下部のテキストボックスに入力して :kbd:`Enter` を押すと、入力した式が評価さ
れる。Google Chrome 開発者ツールのそれと異なり、入力部と出力部が同一でない。

テキストボックスで改行文字を入力する場合は :kbd:`Shift` + :kbd:`Enter` を押す。

テキストボックスにはエディターの言語モードが適用され、キーワード着色などの固有機
能が有効だ。これが便利かというとそうでもなく、括弧の補完などが有効だと邪魔になる。

その他
=======================================================================

私がまだ必要としていない機能群を以下に記しておく。

構成ファイル :file:`launch.json` での高度な属性設定
    基本的な設定はもちろん必要だ。

複数対象デバッグ
    クライアントサーバーシステムなど、複数のプロセスを含む複雑な
    状況に対応している。使用方法は、デバッグセッションを順次起動すると、後続セッ
    ションが走り始めると同時に、VS Code の UI が複数対象モードに切り替わる。

複合起動構成
    複数対象デバッグを実現するさらなる方法だ。構成には並行して起動する複数の起動
    設定の名前を記載する。オプションで、デバッグセッションそれぞれが開始する前に
    実行される ``preLaunchTask`` を指定することができる。フラグ ``stopAll``
    は、セッション一つを手動で終了させたときに、複合セッションすべても停止させる
    かどうかを指定するものだ。
