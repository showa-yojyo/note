======================================================================
デバッグ
======================================================================

VS Code はコードエディターを標榜しているので、デバッグ機能の対応が手厚い。
もっとも、VS Code 組み込みのデバッグ対応言語はかなり限定されている。ユーザーがデバッガー拡
張機能を検索してインストールすることで有効にするのが通例となっている。

VS Code は編集モードとデバッグモードを区別している。デバッグ中にはプログラムの状
態を監視・管理するための UI がツールバー、サイドバー、パネルに出現する。本稿では
その辺りの注目点を記す。

.. attention::

   :doc:`./index` 冒頭の前提条件に留意すること。

.. contents::

実行＆デバッグ
=======================================================================

対象プロセスを実行・デバッグするためのコマンドを次に示す：

.. csv-table::
   :delim: @
   :header: キーバインド,コマンド,操作

   :kbd:`F5` @ Start Debugging @ デバッグセッションを開始し、最初のブレイクポイントで停止する。
   :kbd:`Ctrl` + :kbd:`F5` @ Run Without Debugging @ デバッガーなしでプロセスを起動する。
   :kbd:`F11` @ Start Debugging and Stop on Entry @ デバッグセッションを開始し、エントリーポイントで停止する。

デバッグには最初のコマンドを用いるのが普通だ。

私はキーボード操作で作業したいのでキーバインドしか記さないが、いざとなれば

* メインウィンドウの :menuselection:`Run` からメニュー項目を選択したり、
* Side Bar 内 RUN ビューの :guilabel:`Run and Debug` ボタンを押したり、
* Side Bar 内 RUN AND DEBUG ツールバーの操作アイコンをクリックしたり

して同じコマンドを実行すればいい。

構成
=======================================================================

デバッグセッションの起動方法はプロジェクトにより異なるのが一般的であるので、
VS Code は構成ファイルにその指定を保存しておく仕組みを採っている。
Side Bar 内 RUN ビューの :guilabel:`create a launch.json file` をクリックする
と、その構成ファイルをワークスペース管理フォルダーに生成する。

リンクをクリックすると、初回デバッグ時に見たものと同じドロップダウンリストが画面
上部に表示される。そして、やはり初回に選択した項目を選択する。公式文書の画面イ
メージは Node.js を選択したものだ。

.. todo::

   ファイル launch.json では実現できる面白いことがまだある。

デバッグコマンド
=======================================================================

デバッグセッションを開始すると、エディター上部に本家 Visual Studio でも見かけた
ようなデバッグツールバーが表示される。効率の観点から、デバッグコマンドを実行する
のはキーボード操作によるのが自然だ。

デバッグコマンド集合自体は、よそのデバッガーでも見かけるものだ：

.. csv-table::
   :delim: @
   :header: キーバインド,コマンド,操作

   :kbd:`F5` @ Continue @ 次のブレイクまでプログラムカウンターを進める
   :kbd:`F5` @ Pause @ 進行中のプログラムを一時停止する
   :kbd:`F10` @ Step Over @ プログラムカウンターをワンステップ進める
   :kbd:`F11` @ Step Into @ プログラムカウンターを関数呼び出しの内部に入る
   :kbd:`Ctrl` + :kbd:`F11` @ Step Into Target @ Step Into する対象を一覧する（後述）
   :kbd:`Shift` + :kbd:`F11` @ Step Out @ 関数呼び出し復帰直後までプログラムを進める
   :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`F5` @ Restart Debugging @ デバッグセッションを Stop して新しく Start する。
   :kbd:`Shift` + :kbd:`F5` @ Stop Debugging @ デバッグセッションを打ち切って終了する。

Step Into Target コマンドは説明を要すると思われるのでここに記す。あるステップで
プログラムカウンターが停止しているとする。この時点で可能性のある Step Into 対象
（関数）すべての一覧がポップアップされる。何か項目を選択すると、プログラムカウン
ターがその対象に Step Into するというコマンドだ。

ブレイクポイント
=======================================================================

ブレイクポイント一つの有効性を反転するには Toggle Breakpoint コマンドを実行する。
コマンドの直接指定以外では、次のいずれかの操作により発動する：

* 対象行にキャレットがある状態で :kbd:`F9` を押す。
* 行番号の左マージンをクリックする。

切り替え以上の細かい制御は Side バー RUN AND DEBUG ビュー BREAKPOINTS セクションで行う。
次のコマンドなどを UI 操作で実現できる：

* Toggle Activate Breakpoints: ブレイクポイントすべてに対する Toggle Breakpoint
* Edit Breakpoint: ブレイクポイントに停止条件を与える
* Remove Breakpoint: ブレイクポイント一つを削除する
* Remove All Breakpoints: ブレイクポイント全てを削除する

ログポイント
-----------------------------------------------------------------------

VS Code 組み込みの JavaScript デバッガーを含むデバッガーのいくつかは
:guilabel:`Debugger: Add Logpoint` コマンドを実装している。

ログポイントとは、事前に定義しておいた書式の文字列をログ出力するようなブレイクポイントだ。
この文字列は JavaScript の fstring の要領で中括弧内に評価式を含むことができる。

デバッグ中にプログラムデータを検査する
=======================================================================

変数
-----------------------------------------------------------------------

デバッグ実行中に特定の変数の値をチェックするには、次の方法がある：

* RUN AND DEBUG ビュー VARIABLES セクションにある変数の表示をチェックする。
* エディターで変数にマウスをホバーすると現れるツールチップをチェックする。

VARIABLES ビューの変数に関するコンテキストメニューには、変数にアクセスする有用な
コマンドがある。

.. csv-table::
   :delim: @
   :header: コマンド,操作

   Set Value @ 現時点での変数の値を任意に変更する
   Copy Value @ 値をクリップボードにコピーする
   Copy as Expression @ 識別子や評価式をクリップボードにコピーする

ウォッチ
-----------------------------------------------------------------------

変数というより、それを含む式の評価を動的にチェックしたいことがある。それには
RUN AND DEBUG ビュー WATCH セクションを利用する。次のいずれかの方法で項目を追加する：

* WATCH セクションの :guilabel:`Add Expression` アイコンをクリックして式を直接追加する
* VARIABLES セクションの項目コンテキストメニューから :menuselection:`Add to Watch` を選択する

不要になった項目は Remove 系コマンド各種で削除すればいい。

デバッグコンソール
=======================================================================

その他
=======================================================================

