======================================================================
組み込み端末
======================================================================

VS Code にはハイスペックなコンソールが組み込まれている。シェルの対話的操作だけで
なく、エラー各種を検出したり、エラー箇所にジャンプしたりするなどの便利な機能を用
意している。

.. attention::

   :doc:`./index` 冒頭の前提条件に留意すること。

.. contents::

端末を表示する
======================================================================

すでに端末が VS Code メインウィンドウに作成されているならば、次の方法のいずれか
で端末を所定の場所（通常はエディター床下）に出したり消したりする。ない場合には
VS Code が端末画面を新規に生成する。

* コマンド :guilabel:`View: Toggle Terminal` を実行する
* キーバインド :kbd:`Ctrl` + :kbd:`@` を押す

端末画面を新しく生成する必要があれば、次の方法のいずれかでそれを実現する：

* コマンド :guilabel:`Terminal: Create New Terminal` を実行する
* メニュー項目 :menuselection:`Terminal --> New Terminal` を選択する
* キーバインド :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`@` を押す

複数シェルに対応
======================================================================

本節の執筆を放棄する。WSL だとこの機能が調査しにくいことと、どうせ Bash しか利用
する気がない。

端末管理
======================================================================

.. タブ :guilabel:`TERMINAL` のずっと右側に関連 UI がある。
.. 端末それぞれに対して、名前、アイコン、色、およびグループ装飾（ある場合）のエントリーがあります。

端末インスタンスをさらに追加するには、次のいずれかを行う。この操作により、その端
末に関連するタブリストに別のエントリーが生成する：

* 先述の端末画面の新規作成方法のいずれかを実行する
* タブ :guilabel:`TERMINAL` のずっと右側にあるアイコン :guilabel:`+` をクリックする
* 端末のドロップダウンからプロファイルを何か選択する

逆に、端末インスタンスを削除するには、次のいずれかを行う：

* タブ :guilabel:`TERMINAL` のずっと右側にあるゴミ箱アイコンをクリックする
* タブをアクティブにして :kbd:`Delete` を押す
* コマンド :guilabel:`Terminal: Kill the Active Terminal Instance` を実行する
* タブのコンテキストメニューから :menuselection:`Kill Terminal` を選択する

.. admonition:: 利用者ノート

   端末のセッションを終了すると端末インスタンスが削除される。

端末グループ間の移動をショートカットキーで果たせる。キーボードから手を離したくない：

.. csv-table::
   :delim: @
   :header: キーバインド,コマンド

   :kbd:`Ctrl` + :kbd:`PageDown` @ :guilabel:`Terminal: Focus Next Terminal Group`
   :kbd:`Ctrl` + :kbd:`PageUp` @ :guilabel:`Terminal: Focus Previous Terminal Group`

端末がある種の状態になると、端末画面タブの右側にアイコンが表示される。
マウスホバーで状態情報を読める。

画面を分割
======================================================================

端末を横に並べることができるものを端末グループと呼んでいる。これを生成するには端
末を分割する：

* 端末分割アイコンをクリックする
* 端末画面タブのコンテキストメニューを表示して :menuselection:`Split` を選択する
* :kbd:`Alt` を押しながら次のいずれかをする：

  * 端末画面タブをクリックする
  * アイコン :guilabel:`+` をクリックする
  * 端末パネルにある唯一のタブをクリックする
* :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`5` を押す

分割して生じる端末の初期ディレクトリーは設定 `terminal.integrated.splitCwd` によ
る。

端末グループ内をショートカットキーでも移動できる。キーボードから手を離したくな
い：

.. csv-table::
   :delim: @
   :header: キーバインド,コマンド

   :kbd:`Alt` + :kbd:`→` @ :guilabel:`Terminal: Focus Next Terminal in Terminal Group`
   :kbd:`Alt` + :kbd:`←` @ :guilabel:`Terminal: Focus Previous Terminal in Terminal Group`

端末タブはドラッグ＆ドロップ可能だ。次の場合があり得る：

* 同一グループ内でタブを並び替える。
* グループをまたいで端末画面を移動させる。

端末をそれの独自グループに移動することもできる。それには次のいずれかを行う：

* コマンド :guilabel:`Terminal: Unsplit Terminal` を直接実行する
* 端末タブのコンテキストメニューを表示して :menuselection:`Unsplit Terminal` を
  選択する

エディター区域に端末画面を表示する
======================================================================

エディター区域にも端末画面を生成したり移動したりすることが可能だ。次のような方法
がある：

* コマンド :guilabel:`Terminal: Create New Terminal in Editor Area` を直接実行す
  る
* コマンド :guilabel:`Terminal: Create New Terminal in Editor Area to the Side`
  を直接実行する
* :guilabel:`TERMINAL` ビューにある端末タブをエディター区域にドラッグする

設定項目 ``terminal.integrated.defaultLocation`` を変えることで、
既定の端末画面位置をビューかエディター区域のいずれかに指定することが可能だ。

スクロール
======================================================================

端末画面内の内容をバッファーと呼ぶ、

スクロール表示において、底部から前にあるバッファー部分をスクロールバックと呼ぶ。
スクロールバックの保持量は設定項目 ``terminal.integrated.scrollback`` の値で指定する。
既定値は 1000 行だ。

スクロールのショートカットキーは次のとおり。Windows Terminal と同じとは限らない
ので注意を要する：

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Ctrl` + :kbd:`Alt` + :kbd:`PageUp` @ 上に一行だけスクロールする
   :kbd:`Ctrl` + :kbd:`Alt` + :kbd:`PageDown` @ 下に一行だけスクロールする
   :kbd:`Shift` + :kbd:`PageUp` @ 上に一ページだけスクロールする
   :kbd:`Shift` + :kbd:`PageDown` @ 下に一ページだけスクロールする
   :kbd:`Ctrl` + :kbd:`Home` @ バッファーの先頭にスクロールする
   :kbd:`Ctrl` + :kbd:`End` @ バッファーの末尾にスクロールする
   :kbd:`Ctrl` + :kbd:`↑` @ 前回のコマンドにスクロールする
   :kbd:`Ctrl` + :kbd:`↓` @ 前回のコマンドにスクロールする

設定項目 ``terminal.integrated.smoothScrolling`` の値により、スクロールをアニ
メーションするように描画させることが可能になる。

.. admonition:: 利用者ノート

   繰り返すが、Windows Terminal とキーバインドが異なる。混乱しないように注意す
   る。

コピー＆ペースト
======================================================================

WSL であってもシェルが Bash であっても、端末画面上のテキストと Windows クリップ
ボード間のやり取りでは、Windows 標準のショートカットキーと同じものを使う。

設定項目 ``terminal.integrated.copyOnSelection`` が有効な場合、テキスト選択時に
その内容がクリップボードに自動的にコピーされる。

複数行テキストを端末画面に貼り付けようとすると、既定では警告が発生する。
これを設定項目 ``terminal.integrated.enableMultiLinePasteWarning`` の値を変える
ことで無効化可能だ。これはシェルが `Bracketed-paste <https://en.wikipedia.org/wiki/Bracketed-paste>`__
モードを対応していない場合にしか行われない。

マウス操作
======================================================================

右クリック
----------------------------------------------------------------------

右クリックイベントの処理内容を設定項目 ``terminal.integrated.rightClickBehavior``
に明示的に指定するべきだ。次の選択肢が有効だ：

.. csv-table::
   :delim: @
   :header: 値,処理

   ``default`` @ 端末画面用コンテキストメニューを表示する。
   ``copyPaste`` @ 選択があればクリップボードにコピーし、なければクリップボードの中身を貼り付ける。
   ``paste`` @ クリップボードの中身を貼り付ける。
   ``selectWord`` @ キャレット位置の単語を選択してコンテキストメニューを表示する。
   ``nothing`` @ 何もせず、マウスイベントを端末に送る。

キャレットを移動する
----------------------------------------------------------------------

:kbd:`Alt` を押しながら左クリックすると、キャレットをマウス位置に移動する。これ
は、矢印キーストロークを模倣することで実現しているのだが、シェルやプログラムに
よっては動作しない可能性がある。設定項目
``terminal.integrated.altClickMovesCursor`` で無効にすることもできる。

.. admonition:: 利用者ノート

   この操作は現在のプロンプト範囲内でしか作用しないものの、複数行編集時に便利だ。

検索
======================================================================

端末画面にはエディターとよく似た検索機能がある。
コマンド :guilabel:`Terminal: Focus Find` を実行すると、見慣れた検索入力欄が端末
画面の隅にポップアップされる。

いったん検索すると、次のショートカットキーでフォーカスがマッチ間を移動する：

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Enter` @ 前のマッチへ移動
   :kbd:`Shift` + :kbd:`Enter` @ 次のマッチへ移動

.. admonition:: 利用者ノート

   既定のキーバインドは違和感がある。入れ替えるといいかもしれない。

エディターのテキストをコマンドとして実行する
======================================================================

コマンド :guilabel:`Terminal: Run Selected Text in Active Terminal` を実行する
と、エディター上の選択テキストがある場合はその内容全体を、ない場合はキャレットが
ある行全体をコマンドとして端末で実行する。

コマンド :guilabel:`Terminal: Run Active File Active Terminal` を実行すると、
現在エディターのバッファー全体をコマンドとして端末で実行する。

.. admonition:: 利用者ノート

   Emacs の ``shell-command`` のようなものだ。

最大化表示
======================================================================

エディター区域を一時的に非表示にすることにより、:guilabel:`Terminal` ビューとい
うよりも、それを擁する Panel 全体を最大化表示することができる。操作例：

* Panel 右上の :guilabel:`Maximize Panel Size` アイコン（ゴミ箱の右隣）をクリッ
  クする
* コマンド :guilabel:`View: Toggle Maximized Panel` を直接実行する

.. admonition:: 利用者ノート

   端末領域を縦長にしたいだけなら、前述のエディター区域にドラッグする選択肢も検
   討すること。

全選択
======================================================================

端末バッファー全体を選択するには、コマンド :guilabel:`Terminal: Select All` を直
接実行するのが最も無難だ。

作業ディレクトリー
======================================================================

端末を新規作成すると、通常はワークスペースを開いたディレクトリーを作業ディレクト
リーとする。この挙動を変えるには、設定項目 ``terminal.integrated.cwd`` の値をカ
スタマイズする。

分割操作により生じる子端末は、親端末が開始したディレクトリーで開始する。この挙動
は設定項目 ``terminal.integrated.splitCwd`` を使用して変更できる。

画面サイズ固定
======================================================================

コマンド :guilabel:`Terminal: Set Fixed Dimensions` を実行すると、列と行数を変更
することができる。

端末画面タブを右クリックしてコンテキストメニューから
:menuselection:`Toggle Size to Content Width` を選択することで、端末の桁数を最大
の折り返し行に変更することもできる。

基本的に固定表示モードはスクロールバーが目障りで推奨されていない。

プロファイル
======================================================================

設定項目 ``terminal.integrated.profiles.xxxx`` について記す（ここで ``xxxx`` は
実際には OS 名称が入る）。これは、実行パス、引数、およびその他のカスタマイズから
構成される OS 固有のシェル設定だ。既定ではVS Code が自動的に検出したいくつかの項
目で構成されている。これをユーザーがカスタマイズしたり、追加したりすることが可能
だ。

既定プロファイルを設定するにはコマンド :guilabel:`Terminal: Select Default Profile`
を実行する。VS Code の画面上部にドロップダウンリストが表示されるので、そこから項
目を選べばいい。

既定の端末ロファイルのシェルは、WSL では ``$SHELL``, Windows では PowerShell
となっている。VS Code はシステムにあるシェルのほとんどを自動的に検出し、ユーザー
が既定シェルとして設定可能であるように用意する。

プロファイルを構成する
----------------------------------------------------------------------

構成ファイル ``settings.json`` 内 ``terminal.integrated.profiles.xxxx`` を編集す
ることで端末プロファイルを定義する。

記法は VS Code 既定の ``settings.json`` の内容を表示して模倣すればよい。
まずコマンド :guilabel:`Preferences: Open Default Settings (JSON)` を実行する。

* WSL の場合は ``terminal.integrated.profiles.linux`` を、
* Windows の場合は ``terminal.integrated.profiles.windows`` を

それぞれ編集する。Defalut Settings で記されている設定項目プロファイルは、
User Settings に明記しなくてもマージされるのを利用して記述を省くといい。

プロファイルで使える引数は次のとおり：

``overrideName``
   これを ``true`` にすると、端末画面タブのタイトルを静的なプロファイル名で固定する。
``env``
   環境変数とその値を定義する写像。
   変数に ``null`` を設定すると環境変数は存在しないことになる。
   設定項目 ``terminal.integrated.env.xxxx`` を使用して、プロファイルすべ
   てに対して設定する方法もある。
``icon``
   アイコン ID を表す文字列。
``color``
   アイコンに対するテーマ色 ID を表す文字列。

プロパティー ``path``, ``args``, ``env`` では変数解決が利用できる。

先ほど既定の端末プロファイルを指定する方法を述べたが、``settings.json`` を手動で
編集してもよい。設定項目 ``terminal.integrated.defaultProfile.xxxx`` に既存プロ
ファイル名を割り当てる。

組み込みプロファイルを削除する
----------------------------------------------------------------------

VS Code の ``settings.json`` で値がオブジェクトである項目は、既定値にユーザー定
義値をマージしたものになる。このため、既定値を明示的に削除する方法が用意されてい
る。ユーザー版 ``settings.json`` で VS Code が用意している端末プロファイルの値を
``null`` にすればよい。

.. code:: json

   {
     "terminal.integrated.profiles.windows": {
       "Git Bash": null
     }
   }

タスク専用端末プロファイルを構成する
----------------------------------------------------------------------

既定ではタスク・デバッグ機能は当然ながら既定の端末プロファイルを用いる。このよう
な端末のシェルが重かったり、非標準的シェルであると不愉快だ。そういう場合、タス
ク・デバッグ機能専用端末プロファイルを設定する方法が用意されているので、それを利
用する。

設定項目は ``terminal.integrated.automationProfile.xxxx`` だ。

VS Code の文書では既定で :program:`fish` を使っている Mac ユーザーが
:program:`sh` シェルを設定する例が挙げられている。

Windows PowerShell
----------------------------------------------------------------------

VS Code はモダンな PowerShell を自動検出しない。これをプロファイルとして手動で定
義する。端末画面タブ用のアイコンはあるようだ。

.. code:: json

   {
       "terminal.integrated.profiles.windows": {
           "PowerShell": {
               "path": "${env:PROGRAMFILES}\\System32\\PowerShell\\7\\pwsh.exe",
               "args": [
                  "-noexit",
                  "-file",
                  "${env:USERPROFILE}\\Documents\\PowerShell\\profile.ps1"
               ],
               "icon": "terminal-powershell"
           },
       }
   }

WSL
----------------------------------------------------------------------

VS Code は WSL のシェルを自動的に検出するが、ディストリビューションが多数インス
トールされている場合、一覧に大量に項目が出現して傍迷惑になることがある。
WSL プロファイルをより細かく制御するには、設定項目
``terminal.integrated.useWslProfiles`` を ``false`` に指定して自動検出を無効化す
るといい。

見栄え
======================================================================

VS Code 端末画面の視覚的特徴を大きくカスタマイズすることが可能だ。
いつもと同じく、設定ファイル ``settings.json`` を編集すればよい。

フォント周り
----------------------------------------------------------------------

端末に日本語を出力することが普通にあるため、フォント設定はたいせつだ。

``terminal.integrated.fontFamily``
   CSS の font-family と同じ書式の文字列で端末画面のフォントファミリーを指定す
   る。フォールバックをかなり細かく指定するのがコツだ。

``terminal.integrated.fontSize``
   端末画面のテキストのフォントサイズを指定する。単位はポイントと思われる。

``terminal.integrated.letterSpacing``
   文字間の追加的な水平方向の間隔をピクセル単位で設定する。

``terminal.integrated.lineHeight``
   文字間の垂直方向の間隔を通常の行の高さの倍数で設定する。例えば 1.1 と指定する
   と、縦方向に 10% の間隔を追加する。

``terminal.integrated.fontWeight``
   通常テキストの太さを文字列 `normal`, `bold`, または、1..1000 の値を指定する。

``terminal.integrated.fontWeightBold``
   太字テキストの太さを上記項目と同様の方式で指定する。

Powerline symbols and Nerd Fonts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. パワーラインフォントとは、ターミナルで使用できる追加文字を含む特別なパッチを適用
.. したフォントのことです。VS Codeのターミナルは、フォントを設定しなくてもパワーラ
.. イン・シンボルの一部をレンダリングしますが、より多くのグリフが必要な場合は、フォ
.. ント・ファミリーの設定でパワーライン・フォントを設定します。Powerlineフォントは
.. 通常「for Powerline」で終わりますが、以下の設定はパッチを当てたDejaVu Sans Mono
.. を設定する例です。

キャレットをカスタマイズする
----------------------------------------------------------------------

端末上のキャレットをカスタマイズする設定項目がある。

``terminal.integrated.cursorBlinking``
   端末にフォーカスがあるときにキャレットを点滅させるかどうか

``terminal.integrated.cursorStyle``
   キャレットの形状を指定する。可能な値は次のいずれか：
   ``block``, ``line``, ``underline``.

``terminal.integrated.cursorWidth``
   上記 ``cursorStyle`` が ``line`` に設定されている場合のマーカーの幅をピクセル
   単位で指定する。

.. admonition:: 利用者ノート

   既定値がまともなのでこれらには触れなくていい。

端末画面タブをカスタマイズする
----------------------------------------------------------------------

端末画面タブは端末が複数ある場合に :guilabel:`TERMINAL` ビューの右側に表示される。
一つしかない場合はビューヘッダーにアクティブな端末が表示される。

VS Code の端末画面タブに関する初期設定は、横方向の空間を節約するとするものだ。

``terminal.integrated.tabs.enabled``
  端末画面タブを使うかどうか。無効にするとドロップダウンリストなど他の手段で複数
  ある端末を切り替えることになる。
``terminal.integrated.tabs.hideCondition``
  端末画面タブを常に表示したい場合に限り ``never`` を指定すればいい。
``terminal.integrated.tabs.location``
  端末画面タブを ``left`` または ``right`` のどちらに置くか。
``terminal.integrated.tabs.showActiveTerminal``
  :guilabel:`TERMINAL` ビューヘッダーにアクティブな端末をいつ表示するか。取り得
  る値はつぎのどれか：

  .. csv-table::
     :delim: @
     :header: 設定値,操作

     ``always`` @ 常時
     ``singleTerminal`` @ 端末が一つしかないとき
     ``singleTerminalOrNarrow`` @ 端末が一つしかないとき、またはビューが狭いとき
     ``never`` @ 表示しない

``terminal.integrated.tabs.showActions``
  アクティブな端末のアクションをビューヘッダーにいつ表示するか。取り得る値は上記
  のどれか。

端末画面タブのラベルをカスタマイズする
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

各タブのラベルを決定する設定項目は次のとおり：

``terminal.integrated.tabs.description``
  端末画面タブのラベル右側に現れるテキスト。変数 ``${process}`` などを組み込むの
  が普通だ。
``terminal.integrated.tabs.separator``
  ラベルとテキストの間を区切る文字列。
``terminal.integrated.tabs.title``
  端末画面タブのラベル。

Windows Terminal など他の端末では、シェルが送信したエスケープシーケンスをラベル
として表示することが多い。VS Code でも同じことが可能だ：

.. code:: json

   {
       "terminal.integrated.tabs.title": "${sequence}"
   }

端末画面アイコン
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

各端末には、端末プロファイルによって決定される関連アイコンがある。プロファイルで
定義されていない場合に使用される既定のアイコンと色を、次の設定項目で与えることが
できる：

* ``terminal.integrated.tabs.defaultIcon``
* ``terminal.integrated.tabs.defaultColor``

アイコンは選択肢が大量にあるものの、色の方は ``terminal.ansiBlue`` など、地味な
色しか指定できない。

端末の状態
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

端末の「状態」はタブの右側に表示されるアイコンで示されるものと考えていい。
いくつかの状態はアニメーションする。これが邪魔な場合は設定項目
``terminal.integrated.tabs.enableAnimation`` を ``false`` にする。

ブザー
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

端末のブザーが鳴ると、黄色のベルアイコンが短く表示される。これを
``terminal.integrated.enableBell`` で無効にすることができ、継続時間は
``terminal.integrated.bellDuration`` で設定することができる。

端末画面の色
----------------------------------------------------------------------

VS Code の端末は 24 ビット色を表示することができるが、プログラムは一般的に ANSI
色およびそれぞれの明るい変種を用いる。これらの ANSI 色はアクティブな色テーマが決
定するものだが、設定項目 ``workbench.colorCustomizations`` でテーマとは独立して
指定することも可能だ。

太字テキストが通常の ANSI 色を使用するか、明るい色の変種を使用するかは、設定
``terminal.integrated.drawBoldTextInBrightColors`` で指定できる。

.. admonition:: 利用者ノート

   後者が設定項目としては異色の特殊さで気になる。

最小コントラスト比
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

明暗テーマ、ANSI 色、シェルまたはプログラムの実行などの競合により、コントラスト
の問題がしばしば発生する。最小コントラスト比機能とは、4.5 : 1 のコントラスト比を
満足するまで、テキスト前景色の輝度を増加または減少させることで、この種の輝度の問
題を解決する機能をいう。

この機能の欠点は、テキスト色の彩度が低下することがあることだ。元の色を得るには、
次の設定項目を調整する：

.. code:: json

   {
       "terminal.integrated.minimumContrastRatio": 1
   }

GPU 高速化
----------------------------------------------------------------------

VS Code の端末にはレンダラーが三種類ある。それぞれ特性が異なる。

WebGL Renderer
  真の GPU 高速化。

Canvas Renderer
  CanvasRenderingContext2D Web API を使用した GPU 高速化。
  WebGL よりは遅く、DOM よりは速い。

DOM Renderer
  かなり低速ではあるものの、互換性に優れた代替レンダラー。

既定で有効化されているのは WebGL レンダラー GPU 高速化だ。これにより、CPU が各フ
レームを描画する時間が大幅に短縮されるため、端末の動作が高速化し、高い FPS で表
示できるようになる。

Linux 仮想マシン、WebGL 未対応ブラウザー、古いドライバーを搭載したマシンでは、
WebGL が正しく動作しない場合がある。

設定項目 ``terminal.integrated.gpuAcceleration`` の既定値である ``auto``
は、WebGL, 2D Canvas, DOM レンダラーを順次試し、問題を検出しない最初のものに決着する。

この検出がうまくいかず、手動での介入が必要になることがある。値を ``dom`` にする
と通常、性能を犠牲にして、このような描画関連の問題を解決できる。

カスタムグリフ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GPU 高速化が有効な場合、フォントではなくカスタムレンダリングの手法で端末における
一部の文字に対する表示が改善する。この恩恵を受けるものには、次の文字がある：

* ボックス描画文字 U+2500..U+257F
* ブロック要素 U+2580..U+259F
* 電力線記号の部分集合 U+E0B0..U+E0B7

つまり、設定されたフォントはこれらの文字に対応する必要がなく、また、文字が pixel
perfect でセル全体のサイズに伸張するように描画されることを意味する。

公式文書のイラストは行の高さと文字間隔をカスタム設定した場合のものなのだが、
グリフの効能によりセル間に隙間がない。Powerline Symbols がきれいに描画されている
ことに注意。

この機能は ON にするべきだが、無効にする設定項目がある。

.. code:: json

   {
       "terminal.integrated.customGlyphs": false
   }

プロンプトをカスタマイズする
----------------------------------------------------------------------

シェルのほとんどは、端末のプロンプトを広範囲にカスタマイズすることができる。
VS Code の外側でシェルを設定することになる。通常は変数 ``$PS1`` を変更したり、
``$PROMPT_COMMAND`` を設定したり、プラグインをインストールしたりすることで実現する。

.. admonition:: 利用者ノート

   私は Bash で Oh My Posh を利用している。そのカスタムプロンプトが VS Code 端末
   でも期待どおりに描画させることが直前に記した設定次第で可能だ。

高度な機能
======================================================================

VS Code の組み込み端末は Unicode やカスタムキーバインド、自動返信など、高度な機
能と設定を用意している。使いたいものを記していく。

永続セッション
----------------------------------------------------------------------

VS Code 端末は永続セッションを二とおりの方法で実現している。再接続と復活だ。

プロセス再接続
  拡張機能の構成に変更が生じるなどしてメインウィンドウを再読み込みするとき、以前
  のプロセスに再接続し、その内容を復元する。

プロセス復活
  VS Code を再起動するとき、端末の内容を復元し、元の環境を使用してプロセスを再開
  する。

これらの永続セッションは両方とも設定項目 ``terminal.integrated.enablePersistentSessions``
を ``false`` に設定すれば無効になる。復元されるスクロールバックの量は
設定項目 ``terminal.integrated.persistentSessionScrollback`` で制御する。
プロセス復活は設定項目 ``terminal.integrated.persistentSessionReviveProcess``
で個別に指定することができる。値は ``onExit``, ``onExitAndWindowClose``, ``never``
のいずれかだ。

.. admonition:: 利用者ノート

   端末セッションの環境と履歴をどういうふうに、どれくらいの量を復旧するかという
   機能だ。永続機能は今のところ邪魔になるほうが多いのでオフにしている。
   しかし、上で言及された最後の項目の値によっては有用である気がしてきた。

メインウィンドウをまたいで移動する
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

端末を VS Code ウィンドウ間で移動することも可能だ。次の方法がある：

* 端末画面タブをドラッグ＆ドロップ
* 次のコマンドをそれぞれのウィンドウから直接呼び出す：

  * コマンド :guilabel:`Terminal: Detach Session`
  * コマンド :guilabel:`Terminal: Attach to Session`

.. admonition:: 利用者ノート

   そんなことをするくらいなら Windows Terminal で作業をすればいい。

キーバインド
----------------------------------------------------------------------

TBW

確認ダイアログ
----------------------------------------------------------------------

不要なユーザープロンプトを避けたいので、プロセス終了時には通常、警告ダイアログが出たりしない。
万が一、警告が必要な場合は次の設定で構成する：

``terminal.integrated.confirmOnExit``
  アクティブなデバッグセッションがある場合に、ウィンドウが閉じるときに確認するかどうかを制御します。
``terminal.integrated.confirmOnKill``
  子プロセスがある場合に、ターミナルの終了を確認するかどうかを制御します。
``terminal.integrated.showExitAlert``
  終了コードが 0 ではないときに "The terminal process terminated with exit code"
  という警告を表示するかどうかを制御します。

自動応答
----------------------------------------------------------------------

自動応答機能については、次の設定例を見れば理解できるだろう：

.. code:: json

   {
       "terminal.integrated.autoReplies": {
           "Terminate batch job (Y/N)": "Y\r"
       }
   }

初期設定では自動応答はまったく設定されていない。シェルへの入力はなるべくユーザー
による明示的な操作であるべきだからだ。
