======================================================================
テキスト編集基本機能
======================================================================

VS Code のテキスト編集機能のうち、基本的なものからやや先進的なものまでについて記す。
本章ではショートカットキーは既定のものを示す。

.. attention::

   :doc:`./index` 冒頭の前提条件に留意すること。

.. contents::

キャレットを移動する
======================================================================

VS Code のユーザー設定が初期状態であれば、Windows のエディットコントロール上での
ショートカットキーと同様にキャレットを移動することができる。

矢印キー各種 :kbd:`←` :kbd:`→` :kbd:`↑` :kbd:`↓` で対応する方向にキャレットを一
単位移動する。

:kbd:`Home` と :kbd:`End` でキャレットを行頭と行末にそれぞれ移動する。

:kbd:`PageUp` と :kbd:`PageDown` でキャレットを上方向と下方向に一画面分ほどそれ
ぞれ移動する。

:kbd:`Ctrl` + :kbd:`Home` と :kbd:`Ctrl` + :kbd:`End` でキャレットを先頭と末尾に
それぞれ移動する。

:kbd:`Ctrl` + :kbd:`←` と :kbd:`Ctrl` + :kbd:`→` でキャレットを単語の先頭または
末尾の位置にそれぞれ移動する。

単語内で移動する
----------------------------------------------------------------------

既定ではキーバインドが割り当てられていないが、キャレットを単語内で前後に移動する
``cursorWordPart{Left,Right}`` コマンドがある。どうやら次の条件でキャレットを移
動させるようだ：

* 英単語の場合は大文字と小文字が入れ替わる最寄りの位置まで移動する。
* 一般には句読点などの最寄りの位置まで移動する。正確に言うと設定項目
  ``editor.wordSeparator`` で定義される文字だ。

.. note::

   このように名前のないコマンドを実行するには、キーバインドを明示的に割り当てる
   必要がある。

.. todo::

   これらのコマンドの本物の仕様を参照する。

行番号を指定して移動する
----------------------------------------------------------------------

既定では :kbd:`Ctrl` + :kbd:`G` 押しで :menuselection:`Go to Line/Column...` 入
力テキストボックスが表示される。ここで行番号単体か、それに加えてコロンと桁番号を
入力すれば、キャレットがその位置に移動する。

その他の移動
----------------------------------------------------------------------

TBW

テキストを選択する
======================================================================

標準的な選択
----------------------------------------------------------------------

前節のキャレット移動キー操作それぞれに対して :kbd:`Shift` キーを追加的に押すと、
対応するキャレット移動が起こり、かつその軌跡上のテキストが選択される。例えば
:kbd:`Shift` + :kbd:`End` を押すとキャレットのあった位置から行末までの文字すべて
が選択され、キャレットは行末に移動している。

Windows 同様に、テキスト全部を :kbd:`Ctrl` + :kbd:`A` を押すことで選択することも
できる。

複数キャレット
----------------------------------------------------------------------

VS Code 独特のキャレット操作に「分身」がある。分身自体は選択ではないが、直後に選
択を伴う可能性が高いので今述べる。

.. csv-table::
   :delim: @
   :header: キーバインド,挙動

   :kbd:`Ctrl` + :kbd:`Alt` + :kbd:`↑` @ 現在位置の上の行の同じ位置にキャレットを分身する
   :kbd:`Ctrl` + :kbd:`Alt` + :kbd:`↓` @ 現在位置の下の行の同じ位置にキャレットを分身する
   n/a @ 現在位置からバッファー先頭までの行すべてに対して同じ位置にキャレットを分身する
   n/a @ 現在位置からバッファー末端までの行すべてに対して同じ位置にキャレットを分身する
   :kbd:`Shift` + :kbd:`Alt` + :kbd:`I` @ 選択範囲を含む行全部の行末にキャレットを分身する

「分身」を解除するには、既定では :kbd:`Escape` を押す。

スマート選択
----------------------------------------------------------------------

スマート選択とは、現在の選択に基づいて選択領域を拡張または縮小していく操作だ。
高級プログラミング言語のコードを編集しているならば、選択領域がスコープになるよう
に段階的に変化するのを想像するとだいたい合っているだろう。

.. csv-table::
   :delim: @
   :header: キーバインド,挙動

   :kbd:`Shift` + :kbd:`Alt` + :kbd:`←` @ スコープ方向に選択を縮小する
   :kbd:`Shift` + :kbd:`Alt` + :kbd:`→` @ スコープ方向に選択を拡大する

列選択モード
----------------------------------------------------------------------

VS Code の公式文書では列選択モードという言い回しをしているが、Emacs の用語を借用
すると矩形選択モードだ。列選択モードでは選択部分が矩形状に変化するのが特徴だ。関
連事項として次の二点を覚えておけばいい。

まず、メインメニューから :menuselection:`Selecion --> Column Selection Mode` を
選択すると、エディターの選択モードが通常選択と列選択に交互に入れ替わる。

そして、列選択モードに入らなくても、:kbd:`Ctrl` + :kbd:`Shift` + :kbd:`Alt` キー
を押しながら、矢印キーやページキーを組み合わせて押せば列選択が可能であることを押
さえる。

テキストを削除する
======================================================================

削除した部分を選択して :kbd:`Delete` または :kbd:`Backspace` キーを押すのが一般
的な削除方法だ。特殊な用途に特化した削除コマンドも用意されている：

.. csv-table::
   :delim: @
   :header: キーバインド,挙動

   :kbd:`Backspace` @ キャレットの左の文字を削除する
   :kbd:`Delete` @ キャレットの右の文字を削除する
   :kbd:`Ctrl` + :kbd:`Backspace` @ キャレットがある単語の先頭まで文字を削除する
   :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`K` @ キャレットがある行全体を削除する

次の表は最初のものを除いて既定ではキーバインドが割り当てられていないテキスト削除
コマンドだ：

.. csv-table::
   :delim: @
   :header: コマンド,挙動

   ``deleteWordStartLeft`` @ キャレットから単語の先頭まで削除する
   ``deleteWordStartRight`` @ キャレットから単語の末尾まで＋区切り文字を削除する
   ``deleteWordEndLeft`` @ キャレットから単語の先頭まで＋区切り文字を削除する
   ``deleteWordEndRight`` @ キャレットから単語の末尾まで削除する
   ``deleteWordPartLeft`` @ キャレットから「単語内に移動する」の節で述べた最も左側に近い文字（含む）まで削除する
   ``deleteWordPartRight`` @ キャレットから「単語内に移動する」の節で述べた最も右側に近い文字（含まない）まで削除する
   ``deleteAllLeft`` @ キャレットから行の先頭まで削除する
   ``deleteAllRight`` @ キャレットから行の末尾まで削除する

行単位の編集
======================================================================

.. todo::

   * Move Line {Up,Down}
   * Copy Line {Up,Down}
   * Sort Lines {Ascending,Descending}
   * Delete Duplicated Lines
   * Join Lines

クリップボード操作
======================================================================

Windows 標準の意味でのクリップボード操作は VS Code でも有効だ。なお、コマンドに
対するキーバインドも OS 標準の二種類あるが、次の表では短い方を採用してある：

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Ctrl` + :kbd:`X` @ 切り取り
   :kbd:`Ctrl` + :kbd:`C` @ コピー
   :kbd:`Ctrl` + :kbd:`V` @ 貼り付け

整形 Format Document, Format Selection
======================================================================

.. todo::

   * Format Docment
   * Format Document With...
   * Format Selection
   * Format Modified Lines

インデント
======================================================================

.. todo::

   * {Indent,Outdent} Line

履歴
======================================================================

MS Office のソフトウェアと同様に、バッファーの内容を編集直前に戻したり、戻すのを
やめたりすることが可能だ。

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Ctrl` + :kbd:`Z` @ 元に戻す
   :kbd:`Ctrl` + :kbd:`Y` @ やり直す

ファイルに保存する
======================================================================

ショートカットキー :kbd:`Ctrl` + :kbd:`S` は、現在のバッファーが既存のファイルに
関連していれば上書き保存コマンドを、そうでなければ名前を付けて保存コマンドを実行
する。

コマンド :menuselection:`Save All` は、大まかに言えば現在の編集バッファー全てに
対して上記を実行する。

自動保存
----------------------------------------------------------------------

:menuselection:`File --> Auto Save` をオンにすると、編集バッファーすべてに対して
自動保存機能が有効になる。これにより、ファイルを明示的に保存する手間が省ける。

.. todo::

   設定内容を説明して settings.json の章とリンク。

Hot Exit
----------------------------------------------------------------------

編集済みだがまだファイルに保存されていないバッファーが VS Code 終了時に存在する場合、
それらの内容を密かに作業ファイルに保存するという機能がある。

* 細かい挙動は設定ファイルで設定可能だ。
* 作業ファイルはフォルダー :file:`%APPDATA%\\Code\\Backups` に保存される。

.. todo::

   設定内容を説明して settings.json の章とリンク。

検索と置換
======================================================================

検索と置換で UI が酷似しているのでまとめて説明する。

バッファーを対象とする検索および置換
----------------------------------------------------------------------

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Ctrl` + :kbd:`F` @ バッファー内から文字列を検索する
   :kbd:`Ctrl` + :kbd:`H` @ バッファー内の文字列を置換

検索コマンドを開始すると、バッファー上部に引数入力用の UI が表示される。

* エディットボックスに対象となる文字列を入力する。
* Match Case アイコンをクリックするたびに、検索における大文字小文字区別モードの
  ON/OFF を切り替える。
* Match Whole Word アイコンをクリックすると、対象文字列を単語として扱うように指
  示することになる。部分文字列としての合致を無視することになる。
* Use Regular Expression アイコンをクリックすると、対象文字列が正規表現パターン
  であるか否かを切り替える。
* Find in Selection ボタンを押すと、検索対象範囲を現在選択に限定する。

実際に検索すると、次のことが起こる：

* UI 上に結果数が出力される。
* エディター本体のみならず、縦スクロールバー、ミニマップに検索結果がハイライトされる。
* Previous Match と Next Match ボタンを押すと、エディターの表示が隣の合致位置に移動する。

置換コマンドを開始すると、検索コマンドの UI によく似たものが表示される。UI 項目
の追加分を述べる：

* 下のエディットボックスに置換後の文字列または正規表現パターンを指定する。
* Preserve Case ボタンで大文字小文字を維持させるか否かを指定する。
* Replace ボタンで実際に現在ハイライトしている合致部分に対して置換する。
* Replace All ボタンで合致全部を置換する。

正規表現
----------------------------------------------------------------------

.. todo::

   述べることがあるか？

ファイルの集合を対象とする検索および置換
----------------------------------------------------------------------

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`F` @ ファイル群から文字列を検索する
   :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`H` @ ファイル群に対して文字列を置換する

検索エディター Open Search Editor, etc.
----------------------------------------------------------------------

畳み込み Folding
======================================================================

自動検出
----------------------------------------------------------------------

エンコーディング
======================================================================
