======================================================================
テキスト編集基本機能
======================================================================

VS Code のテキスト編集機能のうち、基本的なものからやや先進的なものまでについて記
す。本章ではショートカットキーは既定のものを示す。記述の便宜上、部分的に Emacs
用語を借用する。

.. attention::

   :doc:`./index` 冒頭の前提条件に留意すること。

.. contents::

キャレットを移動する
======================================================================

VS Code のユーザー設定が初期状態であれば、Windows のエディットコントロール上での
ショートカットキーと同様にキャレットを移動することができる。

.. csv-table::
   :delim: @
   :header: キーバインド,キャレットの移動または移動先

   矢印キー各種 @ 矢印方向に一文字または一行移動する
   :kbd:`Home` @ 行頭
   :kbd:`End` @ 行末
   :kbd:`PageUp` @ 一画面ほど上
   :kbd:`PageDown` @ 一画面ほど下
   :kbd:`Ctrl` + :kbd:`Home` @ バッファーの先頭
   :kbd:`Ctrl` + :kbd:`End` @ バッファーの末尾
   :kbd:`Ctrl` + :kbd:`←` @ 現在いる単語の先頭
   :kbd:`Ctrl` + :kbd:`→` @ 現在いる単語の末尾

単語内で移動する
----------------------------------------------------------------------

既定ではキーバインドが割り当てられていないが、キャレットを単語内で前後に移動する
``cursorWordPart{Left,Right}`` コマンドがある。どうやら次の条件でキャレットを移
動させるようだ：

* 英単語の場合は大文字と小文字が入れ替わる最寄りの位置まで移動する。
* 一般には句読点などの最寄りの位置まで移動する。正確に言うと設定項目
  ``editor.wordSeparator`` で定義される文字だ。

.. note::

   このように名前のないコマンドを実行するには、キーバインドを明示的に割り当てる
   必要がある。

.. todo::

   これらのコマンドの本物の仕様を参照する。

釣りあう括弧に移動する
----------------------------------------------------------------------

キャレットが括弧にあるときに :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`\\` を押すと、そ
の括弧に釣りあう括弧にキャレットが移動する。

行番号を指定して移動する
----------------------------------------------------------------------

既定では :kbd:`Ctrl` + :kbd:`G` 押しで :menuselection:`Go to Line/Column...` 入
力テキストボックスが表示される。ここで行番号単体か、それに加えてコロンと桁番号を
入力すれば、キャレットがその位置に移動する。

テキストを選択する
======================================================================

標準的な選択
----------------------------------------------------------------------

前節のキャレット移動キー操作それぞれに対して :kbd:`Shift` キーを追加的に押すと、
対応するキャレット移動が起こり、かつその軌跡上のテキストが選択される。例えば
:kbd:`Shift` + :kbd:`End` を押すとキャレットのあった位置から行末までの文字すべて
が選択され、キャレットは行末に移動している。

選択操作においてはキャレット移動が副作用的に発生しがちだが、気にしないほうがいい。

Windows 同様に、テキスト全部を :kbd:`Ctrl` + :kbd:`A` を押すことで選択することも
できる。

複数キャレット
----------------------------------------------------------------------

VS Code 独特のキャレット操作に「分身」がある。分身自体は選択ではないが、直後に選
択を伴う可能性が高いので今述べる。

:kbd:`Ctrl` + :kbd:`Alt` + (:kbd:`↑` | :kbd:`↓`) を押すと、現在位置の上または下
の行の同じ位置にキャレットを分身する。

:kbd:`Shift` + :kbd:`Alt` + :kbd:`I` を押すと、選択範囲を含む行全部の行末にキャ
レットを分身する。

キーバインドが既定では与えられていないものの、さらなる分身コマンドが用意されている：

.. csv-table::
   :delim: @
   :header: コマンド,キャレットの分身位置

   Add Cursors To Top @ 現在位置からバッファー先頭までの行すべての対応する桁
   Add Cursors To Bottom @ 現在位置からバッファー末端までの行すべての対応する桁

「分身」を解除するには、既定では :kbd:`Escape` を押す。

同じ文字列を全て選択
----------------------------------------------------------------------

文字列を選択して :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`L` を押すと、エディター内に
あるこの文字列と同じ文字列すべても選択されたことになり、キャレットの分身も起こる。

スマート選択
----------------------------------------------------------------------

スマート選択とは、現在の選択に基づいて選択領域を拡張または縮小していく操作だ。
高級プログラミング言語のコードを編集しているならば、選択領域がスコープになるよう
に段階的に変化するのを想像するとだいたい合っているだろう。

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Shift` + :kbd:`Alt` + :kbd:`←` @ スコープ方向に選択を縮小する
   :kbd:`Shift` + :kbd:`Alt` + :kbd:`→` @ スコープ方向に選択を拡大する

列選択モード
----------------------------------------------------------------------

VS Code の公式文書では列選択モードという言い回しをしているが、Emacs の用語を借用
すると矩形選択モードだ。列選択モードでは選択部分が矩形状に変化するのが特徴だ。関
連事項として次の二点を覚えておけばいい。

まず、メインメニューから :menuselection:`Selecion --> Column Selection Mode` を
選択すると、エディターの選択モードが通常選択と列選択に交互に入れ替わる。

そして、列選択モードに入らなくても、:kbd:`Ctrl` + :kbd:`Shift` + :kbd:`Alt` キー
を押しながら、矢印キーやページキーを組み合わせて押せば列選択が可能であることを押
さえる。

テキストを削除する
======================================================================

削除した部分を選択して :kbd:`Delete` または :kbd:`Backspace` キーを押すのが一般
的な削除方法だ。特殊な用途に特化した削除コマンドも用意されている：

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Backspace` @ キャレットの左の文字を削除する
   :kbd:`Delete` @ キャレットの右の文字を削除する
   :kbd:`Ctrl` + :kbd:`Backspace` @ キャレットがある単語の先頭まで文字を削除する
   :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`K` @ キャレットがある行全体を削除する

次の表は最初のものを除いて既定ではキーバインドが割り当てられていないテキスト削除
コマンドだ：

.. csv-table::
   :delim: @
   :header: コマンド,操作

   ``deleteWordStartLeft`` @ キャレットから単語の先頭まで削除する
   ``deleteWordStartRight`` @ キャレットから単語の末尾まで＋区切り文字を削除する
   ``deleteWordEndLeft`` @ キャレットから単語の先頭まで＋区切り文字を削除する
   ``deleteWordEndRight`` @ キャレットから単語の末尾まで削除する
   ``deleteWordPartLeft`` @ キャレットから「単語内に移動する」の節で述べた最も左側に近い文字（含む）まで削除する
   ``deleteWordPartRight`` @ キャレットから「単語内に移動する」の節で述べた最も右側に近い文字（含まない）まで削除する
   ``deleteAllLeft`` @ キャレットから行の先頭まで削除する
   ``deleteAllRight`` @ キャレットから行の末尾まで削除する

行単位の編集
======================================================================

エディター上で行単位で編集する便利なコマンドをいくつか挙げる。

エディターで :kbd:`Alt` + (:kbd:`↑` | :kbd:`↓`) を押すと上または下の行と現在の行
を入れ替える。

同様に、:kbd:`Shift` + :kbd:`Alt` + (:kbd:`↑` | :kbd:`↓`) を押すと現在の行の複製
を上または下の行との間に挿入する。

キーバインドが既定では与えられていないものの、複数行を選択した状態で効果があるコ
マンドが用意されている。一部を次に示す：

.. csv-table::
   :delim: @

   コマンド,操作

   Sort Lines Ascending @ 行単位で昇順に並び替える
   Sort Lines Descending @ 行単位で降順に並び替える
   Delete Duplicated Lines @ 行単位で重複するものを一つを除いて削除する
   Join Lines @ 改行文字を削除して一行に結合する

クリップボード操作
======================================================================

Windows 標準の意味でのクリップボード操作は VS Code でも有効だ。なお、コマンドに
対するキーバインドも OS 標準の二種類あるが、次の表では短い方を採用してある：

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Ctrl` + :kbd:`X` @ 切り取り
   :kbd:`Ctrl` + :kbd:`C` @ コピー
   :kbd:`Ctrl` + :kbd:`V` @ 貼り付け

コード整形
======================================================================

HTML や JavaScript などは VS Code 自身が整形規則を規定しており、汚いコードを書い
ても次のコマンドを実行すれば、インデントや改行がよく揃う：

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Shift` + :kbd:`Alt` + :kbd:`F` @ バッファー内容全体を整形する
   :kbd:`Ctrl` + :kbd:`K` :kbd:`Ctrl` + :kbd:`F` @ 選択部分を整形する

その他の言語については、これらが機能するのは利用している拡張機能が整形規則を定義
していることが必要だ。

自動整形機能については settings.json の章で述べる。

ブロックを折り畳む
======================================================================

構造化されたコードで表現されるような言語のテキストであれば、エディターの行番号と
行頭の間の隙間に折りたたみボタンがあり、それぞれがブロックに関連している。

* これをクリックすると、そのブロックを畳むか展開する。
* これを :kbd:`Shift` を押しつつクリックすると、そのブロックと子孫ブロック全部を
  一斉に折り畳むか展開する。

キーバインドも使える。下の表にあるコマンド以外にも、便利な操作がある。

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`[` @ キャレット位置のブロックを畳む
   :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`]` @ キャレット位置のブロックを展開する

ブロックは人為的に定義することも可能だ。これも言語によって異なるが、例えば
Markdown ならば、文字列 ``<!-- #region -->`` から文字列 ``<!-- #endregion -->``
までの部分がブロックとみなされる。

インデント
======================================================================

エディター内で :kbd:`Tab` を押すと、VS Code はタブ文字か空白文字数個をキャレット
位置に挿入する。この挙動はユーザー設定により変化する。

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Ctrl` + :kbd:`]` @ キャレットのある行をインデントする
   :kbd:`Ctrl` + :kbd:`[` @ キャレットのある行のインデントを一単位戻す

インデント設定を検出する
----------------------------------------------------------------------

VS Code は開いているファイルを分析し、採用されているインデントを判断する。自動検
出されたインデントが既定のインデント設定に優先する。実際に適用されているインデン
ト条件は Status Bar のインジケーターで確認できる。例えば ``Spaces: 4`` のような
表示があるはずだ。

そのインデント表示をクリックすると、メインウィンドウ上部にインデント関連のドロッ
プダウンが表示される。現在のエディターの設定を変更したり、タブ文字と空白文字を相
互に変換したりするのに利用する。

.. csv-table::
   :delim: @
   :header: コマンド,操作

   Indent Using Spaces @ 空白文字を使ってインデントすることにする
   Indent Using Tabs @ タブ文字を使ってインデントすることにする
   Detect Indentation from Content @ インデント設定を検出する
   Convert Indentation to Spaces @ インデント箇所のタブ文字すべてを適切な個数の空白文字に置換する
   Convert Indentation to Tabs @ インデント箇所の空白文字すべてを適切な個数のタブ文字に置換する

エンコーディング
======================================================================

ワークスペース内のファイルに対する既定のエンコーディングを指定できる。もっと大域
的に、VS Code で編集するファイルすべてに対する既定のエンコーディングを指定でき
る。

エンコーディングを指定してファイルを開き直したり、保存したりすることができる。

現在のエディターに関するエンコーディングは Status Bar のインジケーターに表示され
る。

履歴
======================================================================

MS Office のソフトウェアと同様に、バッファーの内容を編集直前に戻したり、戻すのを
やめたりすることが可能だ。

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Ctrl` + :kbd:`Z` @ 元に戻す
   :kbd:`Ctrl` + :kbd:`Y` @ やり直す

ファイルに保存する
======================================================================

ショートカットキー :kbd:`Ctrl` + :kbd:`S` は、現在のバッファーが既存のファイルに
関連していれば上書き保存コマンドを、そうでなければ名前を付けて保存コマンドを実行
する。

コマンド :menuselection:`Save All` は、大まかに言えば現在の編集バッファー全てに
対して上記を実行する。

自動保存
----------------------------------------------------------------------

:menuselection:`File --> Auto Save` をオンにすると、編集バッファーすべてに対して
自動保存機能が有効になる。これにより、ファイルを明示的に保存する手間が省ける。

Hot Exit
----------------------------------------------------------------------

編集済みだがまだファイルに保存されていないバッファーが VS Code 終了時に存在する
場合、それらの内容を密かに作業ファイルに保存するという機能がある。

* 細かい挙動は設定ファイルで設定可能だ。
* 作業ファイルはフォルダー :file:`%APPDATA%\\Code\\Backups` に保存される。

検索と置換
======================================================================

検索と置換で UI が酷似しているのでまとめて説明する。

バッファーを対象とする検索および置換
----------------------------------------------------------------------

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Ctrl` + :kbd:`F` @ バッファー内から文字列を検索する
   :kbd:`Ctrl` + :kbd:`H` @ バッファー内の文字列を置換

検索コマンドを開始すると、バッファー上部に引数入力用の UI が表示される。

* エディットボックスに対象となる文字列を入力する。
* Match Case アイコンをクリックするたびに、検索における大文字小文字区別モードの
  ON/OFF を切り替える。
* Match Whole Word アイコンをクリックすると、対象文字列を単語として扱うように指
  示することになる。部分文字列としての合致を無視することになる。
* Use Regular Expression アイコンをクリックすると、対象文字列が正規表現パターン
  であるか否かを切り替える。
* Find in Selection ボタンを押すと、検索対象範囲を現在選択に限定する。

実際に検索すると、次のことが起こる：

* UI 上に結果数が出力される。
* エディター本体のみならず、縦スクロールバー、ミニマップに検索結果がハイライトさ
  れる。
* Previous Match と Next Match ボタンを押すと、エディターの表示が隣の合致位置に
  移動する。

置換コマンドを開始すると、検索コマンドの UI によく似たものが表示される。UI 項目
の追加分を述べる：

* 下のエディットボックスに置換後の文字列または正規表現パターンを指定する。
* Preserve Case ボタンで大文字小文字を維持させるか否かを指定する。
* Replace ボタンで実際に現在ハイライトしている合致部分に対して置換する。
* Replace All ボタンで合致全部を置換する。

ファイルの集合を対象とする検索および置換
----------------------------------------------------------------------

現在のワークスペース管理下にあるファイルすべてに対して、検索または置換ができる。

.. csv-table::
   :delim: @
   :header: キーバインド,操作

   :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`F` @ ファイル群から文字列を検索する
   :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`H` @ ファイル群に対して文字列を置換する

検索・置換オプションは上述のものと共通する仕様だ。共通でないものは：

:guilabel:`files to include`
   操作対象となるファイル名を glob 指定する。必須項目。

   :guilabel:`Search only in Open Editors`
      さらに、現在開いているバッファーに操作対象を限定する。
:guilabel:`files to exclude`
   操作対象から除外するファイル名を glob 指定する。こちらはオプショナル。

   :guilabel:`Use Exclude Settings and Ignore Files`
      :file:`.gitignore` や VS Code のユーザー設定を考慮するかどうか。
      ON にしておくのが普通だ。

検索ボックスの内容が更新されるたびに、検索結果または置換プレビュー表示が下の空間
に出力される。

なお、特定のフィルダーから下にあるファイルすべてを対象としたい場合は、
Explorer ビューのフォルダーアイコンのコンテキストメニューから
:menuselection:`Find In Folder...` を選択すると :guilabel:`files to include` の
入力の手間が省ける。

最後に globbing について補足する。通常のワイルドカードに加え、Bash の globstar
ワイルドカード ``**`` と等しいものが最初から使える。このパターンはゼロまたは複数
のディレクトリーで構成される有効なパスに展開する。

検索エディター
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

検索結果の統計の右側に書いてあるリンク :guilabel:`Open in editor` をクリックする
と、検索結果または置換プレビュー表示をより見易い形式で表示するタブが VS Code の
メイン部分に出現する。これを検索エディターという。

検索エディターでは、合致行の前後を確認できたり、キーワードを着色したりする。
一般的な :command:`grep` 出力の役目を期待して良い。

結果行をダブルクリックすると、キャレットが同じ位置にあるエディタータブが新たに開
く。
