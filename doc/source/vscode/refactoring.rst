======================================================================
リファクタリング
======================================================================

VS Code にあるリファクタリングに関係する機能について記す。これらもエディターで有
効となっているプログラミング言語用拡張機能次第であることがほとんどだ。VS Code が
組み込みで用意しているのは、JavaScript/TypeScript のリファクタリング機能だ。

リファクタリング用インターフェイスおよびコマンドは、プログラミング言語によって異
ならないように設計されている。

.. contents::

Code Actions
======================================================================

.. todo::

   摘出系と識別子一括置換については把握しているので述べるが、他にも「らしい」機
   能があるはずだ。

クイック修正
======================================================================

まずいコードを書くと、当該箇所に波線が描画され、これを含む行の左側に電球アイコン
が表示される。以下に示す操作のいずれかにより、問題点や改善方法を列挙した
:guilabel:`Quick Fix...` ポップアップが出現する。

* エディターに表示されている電球アイコンをクリックする
* 波線にキャレットを合わせて :kbd:`Ctrl` + :kbd:`.` を押す

VS Code が機械的に修正できる不具合については、項目のクリック一発で当該箇所付近が
修正される。修正項目によっては、エディターの内容全体を修正するものさえある。

電球アイコンを出現させたくない場合には、設定項目 ``editor.lightbulb.enable`` をカ
スタマイズすることだ。これを無効にすると、ショートカットキーを押すことしでしかク
イック修正ポップアップが出現しない。

.. csv-table::
   :delim: @
   :header-rows: 1
   :widths: auto

   コマンド @ キーバインド @ 操作
   :menuselection:`Quick Fix...` @ :kbd:`Ctrl` + :kbd:`.` @ クイック修正
   :menuselection:`Refactor...` @ :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`R` @ リファクタリング表示

クイック修正を表示せずにリファクタリングしか表示したくない場合は Refactor コマン
ドを使用するといい。

メソッドや変数として摘出する
-----------------------------------------------------------------------

ソースコードの断片を選択してから上述のいずれかの方法でクイック修正コマンドを実行
すると、利用可能なリファクタリング一覧がポップアップに出現する。メソッドや変数を
改めて定義するコードが生成される。

説明のための JavaScript コードを次に示す：

.. code:: javascript

   class Circle {
       constructor(radius){
           this.radius = radius;
       }

       calcArea() {
           return 2 * 3.14 * this.radius;
       }
   }

メソッド内の ``2 * 3.14`` を選択してクイック修正ポップアップを表示させると、
:guilabel:`Extract ...` というグループ項目がある。この場合には定数としてリファク
タリングするための次のコマンド二つが少なくとも含まれているはずだ：

* :guilabel:`Extract to constant in enclosing scope`
* :guilabel:`Extract to constant in global scope`

いずれかを実行すると（この場合は後者が自然）、定数識別子の入力を促され、その確定
後、コマンド名の示すようにコードが修正される。例えば ``TAU`` と入力すると、次の
変更が発生する：

* ``2 * 3.14`` が ``TAU`` に置換される。
* クラス宣言の前に ``const TAU = 2 * 3.14;`` が追加される。

さらにメソッドとして括り出そうというコマンド群も同時に現れる：

* :guilabel:`Extract to inner funtion in method 'calcArea'`
* :guilabel:`Extract to method in class 'Circle'`
* :guilabel:`Extract to funtion in global scope`

いずれかを実行すると、定数摘出のときと同様の手順を経て自動的コード変更が発生する。

以上は JavaScript の編集例だが、静的型付け言語になるとインターフェイスや型の摘出
に対応したコマンドが利用可能になる。それについては言語向け拡張機能の詳細を当たる
こと。

キーバインドのカスタマイズについては :doc:`./key-bindings` を参照。

識別子の名前を変更する
======================================================================

VS Code の基本的コマンドである Select All Occurrences 系コマンドで特定の文字列を
すべて選択状態にしてから、新しい名前をタイプするという方法もあったが、この場合に
はより適切なのは Rename Symbol コマンドだ。エディターをまたがって文字列を置換す
るし、リテラル文字列のマッチを無視したりと、気が利いている。キーバインドも
:kbd:`Ctrl` + :kbd:`Shift` + :kbd:`L` を押すよりは :kbd:`F2` 一つを押すだけで済
む。
