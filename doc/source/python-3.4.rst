======================================================================
What's New In Python 3.4 ノート
======================================================================

What's New In Python 3.4 を読んで、個人的に関心のある項目に注釈を付けていく。
3.4 は新規モジュールがどれも重要なので要点はぜひとも習得したい。

.. contents:: ノート目次

新規機能
======================================================================

* ``pip`` が存在することを請け負う。
* ``min``, ``max`` にキーワード専用引数 ``default`` が追加された。
  引数が空集合のときの戻り値を指定するために使えるとのこと。
* モジュールの ``__file__`` 属性は基本的に完全パスを表す文字列。

変更機能
======================================================================

* :command:`python --version` や ``argparse`` の ``--version`` は標準出力に文字
  列を出力する。
* ``re`` の各関数で ``group()`` や ``groups()`` の対象がバイトデータであるなら
  ば、戻り値もバイトデータになると期待して良い。
* ``json``: ``dump()`` と ``dumps()`` で ``indent`` を明示した場合のデフォルトの
  振る舞いが変更。要素を区切るカンマが行末に来る場合、空白文字が改行直前に付加さ
  れなくなった。

新規モジュール
======================================================================

学習すると見返りを期待できるような利用価値の高いモジュールばかりだ。

* ``asyncio``: 非同期 IO

  * まずは ``asyncio.get_event_loop()`` と ``AbstractEventLoop`` のイベントルー
    プに関するメソッドを学ぶ。
  * 次に ``AbstractEventLoop`` の呼び出しに関するメソッドの違いを学ぶ。
  * コルーチンの概念を理解する。
  * ``Future`` を理解する。非同期実行をクラスとして表現したものだ。
  * Python Library Reference のサンプルコードをそのまま実行したら、``Protocol``
    を使うデモコードのサーバー側の出力がなぜか表示されない。明示的に文字列出力を
    フラッシュしないとメッセージが見えない。

    .. code:: python3

       # Serve requests until Ctrl+C is pressed
       print(f'Serving on {server.sockets[0].getsockname()}', flush=True)

  * サブプロセス周りは Windows だと少々面倒。

* ``enum``: 列挙型 ``Enum``, ``IntEnum`` および関連 API を備える。

  * ``Enum`` の意味は C/C++ の古典的なそれと同じ。少々高機能。
  * C/C++ とは異なり ``Enum`` のメンバー宣言時に値を明示的に与えなければならな
    い。

    * ``auto()`` という関数で多少は楽になるが、やはり面倒だ。
    * あるいは ``Enum('Animal', 'ANT', 'BEE', 'CAT')`` 方式で列挙型を定義するこ
      ともできる。

  * ``Enum`` のメンバーには ``.name`` と ``.value`` の二つの属性しかない。
  * ``Enum`` のメンバーを ``print`` すると識別子の名前が現れる。
  * ``Enum`` は iterable だ。全メンバーを iterate できる。このときメンバーは定義
    した順番で現れる。
  * ``Enum`` のメンバーには順序関係がない。期待するかもしれないが ``.value`` 属
    性値同士の比較とはならない。この手の比較を認めるには ``IntEnum`` から列挙型
    を定義する。

* ``pathlib``: ファイルシステムパス。パスを文字列として表現する際の処理と、ファ
  イルシステム上の構成要素としての処理の両方の能力がある。

  * 一連のパスクラス群を備えている。おもしろい継承グラフなので一度は見ることだ。
    もっとも抽象的なクラスは ``PurePath`` であり、どのような属性あるのかを調べる
    のはここを ``dir()`` するといい。どのような操作が備わっているのかを調べるな
    らば、もう一つ高水準のクラス ``Path`` を ``dir()`` する。
  * クラス ``Path`` のコンストラクター呼び出しでオブジェクトを生成すると、実行環
    境に見合う型、例えば ``WindowsPath`` のオブジェクトが得られる。
  * 実行環境に見合わない型、例えば ``PosixPath`` のコンストラクターを明示的に呼
    び出すと、例外が送出される。
  * パスオブジェクトは値として振る舞う。文字列のようなものだからこの仕様は納得で
    きる。
  * パスオブジェクト同士は比較可能だ。
  * 演算子 ``/`` でパスの連結ができる。これは :code:`os.path.join()` の意味での
    連結だ。
  * ``os.PathLike`` と深く関係する。

* ``statistics``: 統計関数をいくつか提供する。

  * ``int`` や ``float`` ばかりか、``decimal.Decimal`` や ``fractions.Fraction``
    も統計関数の対象として扱える。
  * どの関数も引数 ``data`` はそのような値からなる列または iterator であることを
    必要とする。引数 ``data`` が空のときに例外 ``StatisticsError`` を送出するの
    も共通した振る舞いだ。
  * 中央値を評価する関数が複数ある。わかりやすいのを挙げると

    * ``median()``
    * ``median_low()``
    * ``median_high()``

    という名前のものだ。データの要素数が偶数のときの振る舞いで区別するのがいい。

変更モジュール
======================================================================

* ``argparse`` の ``FileType`` が ``encoding`` と ``errors`` を受け付ける。この
  値がそのまま ``open()`` に引き渡されるようだ。
* ``contextlib`` ``redirect_stdout()`` が使えそう。
* ``functools`` に ``partialmethod()``, ``singledispatch()`` 追加。
* ``html`` に ``unescape()`` 追加。
* ``html`` の ``HTMLParser`` の ``strict`` 引数は非推奨。
* ``pdb`` の ``print`` はコマンドではなく Python の関数である。
* ``re`` に ``fullmatch()`` が追加。
