======================================================================
アジャイルプラクティス 読書ノート
======================================================================

ソフトウェア開発本として Joel 本の次に買った記憶がある。

:著者: Venkat Subramaniam and Andy Hunt
:訳者: 角谷信太郎・木下史彦
:出版社: オーム社
:ISBN: 978-4-274-06694-8

.. contents:: ノート目次

目次以前のローマ数字ページ
===================================
* 扉ページの絵画はヒエロニムス・ボスあたりの作品か。
* ティルヴァックヴァルとやらの警句。これは何国語の文字だろうか。

第 1 章
-----------------------------------
この短い章は、本書のイントロダクションの役割を果たす。

* アジャイルは <重要度の高い事柄に注力し、
  重要度の低い事柄（略）には労力を割かないようにする方法論> (p. 2) である。

* <ソフトウェア開発は継続的なものなんだ。フィードバックも継続的だ> (p. 3)

* 囲み記事「アジャイルツールキット」は必読。
  Wiki を筆頭にバージョン管理、ユニットテスト、ビルド自動化を挙げている。
  以前読んだ Joel Test と主張の方向性は同じだと思う。

第 2 章
-----------------------------------
* 冒頭から <ソフトウェア開発の方法論をテーマとした従来の書籍でよくある説明の流れはこうだ。
  （略）本書はこうした流れに従わない> (p. 11) と、威勢がよい。

* <ソフトウェア開発が本当に行われる場所は、チャートや IDE や設計ツールの中ではない。
  人の頭の中だ> (p. 11)

1
~~~~
* <チームの多数の振る舞いがプロ意識に欠けていて、
  チームの運営に無関心な場合は、
  自分自身がチームを離れてよそで成功を目指すべきだ> (p. 15)

2
~~~~
* <実際に髪が薄くなった開発者が何人もいた> (p. 16)

* <差し迫った状況で問題の本質や起こり得る結果をきちんと理解することなく、
  手っ取り早く加えた修正> (p. 17)

* <単独行動は危険だ。
  開発者が独りきりでコードを書くことがないようにしよう> (p. 17)
  これを予防するにはやはりバージョン管理、コードレビュー、ユニットテスト。

  * <ユニットテストに慣れれば、コードは自然と扱いやすい単位で構造化される> (p. 17)

3
~~~~
セクション冒頭でいきなり悪魔が話しかけてくる。斬新な演出だ。

* <思いついたアイデアをチームの誰もが自由に表現できる雰囲気が必要> (p. 21)

* 囲み記事のタイトル <全員一致でラクダが生まれた> (p. 21) がインパクト大。

  * <とりわけ優れた斬新なアイデアというものは 1 人の頭脳、
    すなわち確固たるヴィジョンを持った個人から出てくるものだ> (p. 21)

* <設計とは妥協の連続だ> (p. 22)

* <主張している事態がどれだけ可能性があることなのかを併せて評価しなければならない。
  主張を裏付けたり、反論したりするためにプロトタイプや調査が必要であれば、
  そうすればいい> (p. 23) やはり裏は取りたいものだ。

* メンバー全員の「その状況におけるベストとは何か」の認識を合わせておく。

4
~~~~
* どうしてもコードをゼロから作り直したければ、
  <今のコードを捨てて書き直したほうが費用対効果が高いことを明確に示そう
  （口頭で伝えるだけでは不十分だ）> (p. 24)

  * 著者の例が囲み記事内に挙げられている：
    <こんなコードではすぐにメンテナンスのコストが大きくなりすぎて保守できなくなります> (p. 24)

  * <「コードがすっきりするから」では、
    経営陣や事業家に納得してもらえる理由にならない。
    費用の節約、投資収益率の向上、訴訟の回避、顧客基盤の拡張といった理由のほうが適切だ> (p. 26)
    意思決定者がビジネス寄りの人間ならば、
    こういう毛色の用語を駆使して丸め込むるのがコツか。

第 3 章
-----------------------------------
時代に乗り遅れないようにアジャイル。

* <ほとんどの考え方はあっという間に時代遅れになってしまう> (p. 27)
* <時代遅れの古びた手法と決別することも重要だ> (p. 27)

5
~~~~
* <何やらインターネットとかいう代物も話題になっていた> (p. 29)
  1995 年が懐かしいような。

* <**イテレーティブかつインクリメンタルに学習する**> (p. 30)
* <定評のある技術系ブログ> (p. 30) はみんな見ているから、
  自分だけ見ていないと思うと恐ろしいことになる？

* <非技術系の良書> (p. 30) どこから外側が非技術系なのだろうか。
  関係ないが、本を読む以前に、身銭を切って本を買うのを避けている。

* <新技術は、採用を決める前にそのメリットをきちんと評価しなければならない> (p. 31)

6
~~~~
* <もし自分が一番上手いんだとしたら、それは別のバンドに移る時だ> (p. 32)
  という某ジャズギタリストの至言は心を打つねえ。

* <『一週間でおぼえる XYZ 入門―パターンと UML で完璧マスター！』
  といったタイトルの書籍は十中八九、読書会向きじゃない> (p. 32)
  いかにもありそうなタイトルで笑える。
  あくまで読書会向きじゃないだけで、読むなとは言っていない、はず。

7
~~~~
* <変化への対応> (p. 35)

* <現代では開発者の時間こそが貴重な（しかも高くつく）リソースなのだ> (p. 36)
* <古い習慣に気づくのはそれに輪をかけて難しい> (p. 36)

* <例えば、新しいプログラミング言語を学ぶとしよう。
  この場合は、その言語用の新しい IDE を使うようにする> (p. 37)
  まったく耳が痛い。
* <これまで経験した言語で使い慣れた独特の特徴にはとりわけ注意を払い、
  新しい言語や新バージョンでは、互いの類似点や同意点を学ぼう> (p. 37)

8
~~~~
* <質問をする前に、そう問う根拠を考えておくこと。
  事前に考えておくことには、
  質問と問題との関連を確実にする効果もある> (p. 40)

9
~~~~


第 4 章
-----------------------------------
第 5 章
-----------------------------------
第 6 章
-----------------------------------
第 7 章
-----------------------------------
第 8 章
-----------------------------------
第 9 章
-----------------------------------

付録以降のページ
-----------------------------------
